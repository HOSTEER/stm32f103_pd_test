
stm32f103_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ed8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f8  080084f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080084f8  080084f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084f8  080084f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080084f8  080084f8  000184f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008500  08008500  00018500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000070  08008574  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08008574  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116e8  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032ab  00000000  00000000  000317c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d10  00000000  00000000  00034a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a01  00000000  00000000  00035780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c986  00000000  00000000  00036181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a7c  00000000  00000000  00052b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dc62  00000000  00000000  00065583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b8c  00000000  00000000  000f31e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f6d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08007fcc 	.word	0x08007fcc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08007fcc 	.word	0x08007fcc

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b10      	ldr	r3, [pc, #64]	; (8000194 <MX_DMA_Init+0x48>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0f      	ldr	r2, [pc, #60]	; (8000194 <MX_DMA_Init+0x48>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b0d      	ldr	r3, [pc, #52]	; (8000194 <MX_DMA_Init+0x48>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	2010      	movs	r0, #16
 8000170:	f000 fcf3 	bl	8000b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000174:	2010      	movs	r0, #16
 8000176:	f000 fd0c 	bl	8000b92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	2011      	movs	r0, #17
 8000180:	f000 fceb 	bl	8000b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000184:	2011      	movs	r0, #17
 8000186:	f000 fd04 	bl	8000b92 <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0310 	add.w	r3, r7, #16
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001ac:	4b28      	ldr	r3, [pc, #160]	; (8000250 <MX_GPIO_Init+0xb8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a27      	ldr	r2, [pc, #156]	; (8000250 <MX_GPIO_Init+0xb8>)
 80001b2:	f043 0320 	orr.w	r3, r3, #32
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b25      	ldr	r3, [pc, #148]	; (8000250 <MX_GPIO_Init+0xb8>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0320 	and.w	r3, r3, #32
 80001c0:	60fb      	str	r3, [r7, #12]
 80001c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001c4:	4b22      	ldr	r3, [pc, #136]	; (8000250 <MX_GPIO_Init+0xb8>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a21      	ldr	r2, [pc, #132]	; (8000250 <MX_GPIO_Init+0xb8>)
 80001ca:	f043 0304 	orr.w	r3, r3, #4
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b1f      	ldr	r3, [pc, #124]	; (8000250 <MX_GPIO_Init+0xb8>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0304 	and.w	r3, r3, #4
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001dc:	4b1c      	ldr	r3, [pc, #112]	; (8000250 <MX_GPIO_Init+0xb8>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a1b      	ldr	r2, [pc, #108]	; (8000250 <MX_GPIO_Init+0xb8>)
 80001e2:	f043 0308 	orr.w	r3, r3, #8
 80001e6:	6193      	str	r3, [r2, #24]
 80001e8:	4b19      	ldr	r3, [pc, #100]	; (8000250 <MX_GPIO_Init+0xb8>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f003 0308 	and.w	r3, r3, #8
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHRG_EN_GPIO_Port, CHRG_EN_Pin, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001fa:	4816      	ldr	r0, [pc, #88]	; (8000254 <MX_GPIO_Init+0xbc>)
 80001fc:	f001 f8a1 	bl	8001342 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHRG_EN_Pin;
 8000200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000206:	2301      	movs	r3, #1
 8000208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020a:	2300      	movs	r3, #0
 800020c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020e:	2302      	movs	r3, #2
 8000210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHRG_EN_GPIO_Port, &GPIO_InitStruct);
 8000212:	f107 0310 	add.w	r3, r7, #16
 8000216:	4619      	mov	r1, r3
 8000218:	480e      	ldr	r0, [pc, #56]	; (8000254 <MX_GPIO_Init+0xbc>)
 800021a:	f000 fef7 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FUSB_IRQ_Pin;
 800021e:	2320      	movs	r3, #32
 8000220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000222:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <MX_GPIO_Init+0xc0>)
 8000224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000226:	2300      	movs	r3, #0
 8000228:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FUSB_IRQ_GPIO_Port, &GPIO_InitStruct);
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	4619      	mov	r1, r3
 8000230:	480a      	ldr	r0, [pc, #40]	; (800025c <MX_GPIO_Init+0xc4>)
 8000232:	f000 feeb 	bl	800100c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000236:	2200      	movs	r2, #0
 8000238:	2100      	movs	r1, #0
 800023a:	2017      	movs	r0, #23
 800023c:	f000 fc8d 	bl	8000b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000240:	2017      	movs	r0, #23
 8000242:	f000 fca6 	bl	8000b92 <HAL_NVIC_EnableIRQ>

}
 8000246:	bf00      	nop
 8000248:	3720      	adds	r7, #32
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40021000 	.word	0x40021000
 8000254:	40010800 	.word	0x40010800
 8000258:	10110000 	.word	0x10110000
 800025c:	40010c00 	.word	0x40010c00

08000260 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000266:	4a13      	ldr	r2, [pc, #76]	; (80002b4 <MX_I2C1_Init+0x54>)
 8000268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800026a:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <MX_I2C1_Init+0x50>)
 800026c:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <MX_I2C1_Init+0x58>)
 800026e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000272:	2200      	movs	r2, #0
 8000274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000278:	2200      	movs	r2, #0
 800027a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <MX_I2C1_Init+0x50>)
 800027e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000282:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000286:	2200      	movs	r2, #0
 8000288:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <MX_I2C1_Init+0x50>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <MX_I2C1_Init+0x50>)
 8000298:	2200      	movs	r2, #0
 800029a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <MX_I2C1_Init+0x50>)
 800029e:	f001 f881 	bl	80013a4 <HAL_I2C_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002a8:	f000 f918 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	2000008c 	.word	0x2000008c
 80002b4:	40005400 	.word	0x40005400
 80002b8:	000186a0 	.word	0x000186a0

080002bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a43      	ldr	r2, [pc, #268]	; (80003e4 <HAL_I2C_MspInit+0x128>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d17f      	bne.n	80003dc <HAL_I2C_MspInit+0x120>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002dc:	4b42      	ldr	r3, [pc, #264]	; (80003e8 <HAL_I2C_MspInit+0x12c>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a41      	ldr	r2, [pc, #260]	; (80003e8 <HAL_I2C_MspInit+0x12c>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b3f      	ldr	r3, [pc, #252]	; (80003e8 <HAL_I2C_MspInit+0x12c>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0308 	and.w	r3, r3, #8
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = FUSB_SCL_Pin|FUSB_SDA_Pin;
 80002f4:	23c0      	movs	r3, #192	; 0xc0
 80002f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002f8:	2312      	movs	r3, #18
 80002fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002fc:	2303      	movs	r3, #3
 80002fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000300:	f107 0310 	add.w	r3, r7, #16
 8000304:	4619      	mov	r1, r3
 8000306:	4839      	ldr	r0, [pc, #228]	; (80003ec <HAL_I2C_MspInit+0x130>)
 8000308:	f000 fe80 	bl	800100c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800030c:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <HAL_I2C_MspInit+0x12c>)
 800030e:	69db      	ldr	r3, [r3, #28]
 8000310:	4a35      	ldr	r2, [pc, #212]	; (80003e8 <HAL_I2C_MspInit+0x12c>)
 8000312:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000316:	61d3      	str	r3, [r2, #28]
 8000318:	4b33      	ldr	r3, [pc, #204]	; (80003e8 <HAL_I2C_MspInit+0x12c>)
 800031a:	69db      	ldr	r3, [r3, #28]
 800031c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000324:	4b32      	ldr	r3, [pc, #200]	; (80003f0 <HAL_I2C_MspInit+0x134>)
 8000326:	4a33      	ldr	r2, [pc, #204]	; (80003f4 <HAL_I2C_MspInit+0x138>)
 8000328:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800032a:	4b31      	ldr	r3, [pc, #196]	; (80003f0 <HAL_I2C_MspInit+0x134>)
 800032c:	2200      	movs	r2, #0
 800032e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000330:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <HAL_I2C_MspInit+0x134>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000336:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <HAL_I2C_MspInit+0x134>)
 8000338:	2280      	movs	r2, #128	; 0x80
 800033a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800033c:	4b2c      	ldr	r3, [pc, #176]	; (80003f0 <HAL_I2C_MspInit+0x134>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000342:	4b2b      	ldr	r3, [pc, #172]	; (80003f0 <HAL_I2C_MspInit+0x134>)
 8000344:	2200      	movs	r2, #0
 8000346:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000348:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <HAL_I2C_MspInit+0x134>)
 800034a:	2200      	movs	r2, #0
 800034c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800034e:	4b28      	ldr	r3, [pc, #160]	; (80003f0 <HAL_I2C_MspInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000354:	4826      	ldr	r0, [pc, #152]	; (80003f0 <HAL_I2C_MspInit+0x134>)
 8000356:	f000 fc37 	bl	8000bc8 <HAL_DMA_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000360:	f000 f8bc 	bl	80004dc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a22      	ldr	r2, [pc, #136]	; (80003f0 <HAL_I2C_MspInit+0x134>)
 8000368:	639a      	str	r2, [r3, #56]	; 0x38
 800036a:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <HAL_I2C_MspInit+0x134>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000370:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <HAL_I2C_MspInit+0x13c>)
 8000372:	4a22      	ldr	r2, [pc, #136]	; (80003fc <HAL_I2C_MspInit+0x140>)
 8000374:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000376:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <HAL_I2C_MspInit+0x13c>)
 8000378:	2210      	movs	r2, #16
 800037a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800037c:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <HAL_I2C_MspInit+0x13c>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000382:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <HAL_I2C_MspInit+0x13c>)
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000388:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <HAL_I2C_MspInit+0x13c>)
 800038a:	2200      	movs	r2, #0
 800038c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800038e:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <HAL_I2C_MspInit+0x13c>)
 8000390:	2200      	movs	r2, #0
 8000392:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <HAL_I2C_MspInit+0x13c>)
 8000396:	2200      	movs	r2, #0
 8000398:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <HAL_I2C_MspInit+0x13c>)
 800039c:	2200      	movs	r2, #0
 800039e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80003a0:	4815      	ldr	r0, [pc, #84]	; (80003f8 <HAL_I2C_MspInit+0x13c>)
 80003a2:	f000 fc11 	bl	8000bc8 <HAL_DMA_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 80003ac:	f000 f896 	bl	80004dc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a11      	ldr	r2, [pc, #68]	; (80003f8 <HAL_I2C_MspInit+0x13c>)
 80003b4:	635a      	str	r2, [r3, #52]	; 0x34
 80003b6:	4a10      	ldr	r2, [pc, #64]	; (80003f8 <HAL_I2C_MspInit+0x13c>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80003bc:	2200      	movs	r2, #0
 80003be:	2100      	movs	r1, #0
 80003c0:	201f      	movs	r0, #31
 80003c2:	f000 fbca 	bl	8000b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80003c6:	201f      	movs	r0, #31
 80003c8:	f000 fbe3 	bl	8000b92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2100      	movs	r1, #0
 80003d0:	2020      	movs	r0, #32
 80003d2:	f000 fbc2 	bl	8000b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80003d6:	2020      	movs	r0, #32
 80003d8:	f000 fbdb 	bl	8000b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003dc:	bf00      	nop
 80003de:	3720      	adds	r7, #32
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40005400 	.word	0x40005400
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	200000e0 	.word	0x200000e0
 80003f4:	40020080 	.word	0x40020080
 80003f8:	20000124 	.word	0x20000124
 80003fc:	4002006c 	.word	0x4002006c

08000400 <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8000408:	1d39      	adds	r1, r7, #4
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
 800040e:	2201      	movs	r2, #1
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <__io_putchar+0x20>)
 8000412:	f004 f975 	bl	8004700 <HAL_UART_Transmit>
	return ch;
 8000416:	687b      	ldr	r3, [r7, #4]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000016c 	.word	0x2000016c

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000428:	f000 fa3a 	bl	80008a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800042c:	f000 f810 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000430:	f7ff feb2 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 8000434:	f7ff fe8a 	bl	800014c <MX_DMA_Init>
  MX_I2C1_Init();
 8000438:	f7ff ff12 	bl	8000260 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800043c:	f000 f98e 	bl	800075c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("Starting\r\n");
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <main+0x28>)
 8000442:	f006 ff43 	bl	80072cc <puts>
	pd_user_main();
 8000446:	f004 ffd7 	bl	80053f8 <pd_user_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800044a:	e7fe      	b.n	800044a <main+0x26>
 800044c:	08007fe4 	.word	0x08007fe4

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b090      	sub	sp, #64	; 0x40
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0318 	add.w	r3, r7, #24
 800045a:	2228      	movs	r2, #40	; 0x28
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f007 f814 	bl	800748c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000472:	2301      	movs	r3, #1
 8000474:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800047c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000480:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000482:	2301      	movs	r3, #1
 8000484:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000486:	2302      	movs	r3, #2
 8000488:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000490:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000494:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	4618      	mov	r0, r3
 800049c:	f003 fcce 	bl	8003e3c <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80004a6:	f000 f819 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	230f      	movs	r3, #15
 80004ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ae:	2302      	movs	r3, #2
 80004b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2102      	movs	r1, #2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f003 ff3b 	bl	8004340 <HAL_RCC_ClockConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004d0:	f000 f804 	bl	80004dc <Error_Handler>
  }
}
 80004d4:	bf00      	nop
 80004d6:	3740      	adds	r7, #64	; 0x40
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80004e4:	e7fe      	b.n	80004e4 <Error_Handler+0x8>
	...

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <HAL_MspInit+0x5c>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a14      	ldr	r2, [pc, #80]	; (8000544 <HAL_MspInit+0x5c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <HAL_MspInit+0x5c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_MspInit+0x5c>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_MspInit+0x5c>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_MspInit+0x5c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <HAL_MspInit+0x60>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_MspInit+0x60>)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40021000 	.word	0x40021000
 8000548:	40010000 	.word	0x40010000

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000550:	e7fe      	b.n	8000550 <NMI_Handler+0x4>

08000552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <MemManage_Handler+0x4>

0800055e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <BusFault_Handler+0x4>

08000564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <UsageFault_Handler+0x4>

0800056a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000592:	f000 f9cb 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <DMA1_Channel6_IRQHandler+0x10>)
 80005a2:	f000 fc1f 	bl	8000de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000124 	.word	0x20000124

080005b0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <DMA1_Channel7_IRQHandler+0x10>)
 80005b6:	f000 fc15 	bl	8000de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200000e0 	.word	0x200000e0

080005c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FUSB_IRQ_Pin);
 80005c8:	2020      	movs	r0, #32
 80005ca:	f000 fed3 	bl	8001374 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <I2C1_EV_IRQHandler+0x10>)
 80005da:	f001 fba9 	bl	8001d30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000008c 	.word	0x2000008c

080005e8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80005ec:	4802      	ldr	r0, [pc, #8]	; (80005f8 <I2C1_ER_IRQHandler+0x10>)
 80005ee:	f001 fcf2 	bl	8001fd6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000008c 	.word	0x2000008c

080005fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000600:	4802      	ldr	r0, [pc, #8]	; (800060c <USART2_IRQHandler+0x10>)
 8000602:	f004 f909 	bl	8004818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000016c 	.word	0x2000016c

08000610 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	e00a      	b.n	8000638 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000622:	f3af 8000 	nop.w
 8000626:	4601      	mov	r1, r0
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	60ba      	str	r2, [r7, #8]
 800062e:	b2ca      	uxtb	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	429a      	cmp	r2, r3
 800063e:	dbf0      	blt.n	8000622 <_read+0x12>
  }

  return len;
 8000640:	687b      	ldr	r3, [r7, #4]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b086      	sub	sp, #24
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	e009      	b.n	8000670 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	60ba      	str	r2, [r7, #8]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fecb 	bl	8000400 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	3301      	adds	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	697a      	ldr	r2, [r7, #20]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	429a      	cmp	r2, r3
 8000676:	dbf1      	blt.n	800065c <_write+0x12>
  }
  return len;
 8000678:	687b      	ldr	r3, [r7, #4]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <_close>:

int _close(int file)
{
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006a8:	605a      	str	r2, [r3, #4]
  return 0;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <_isatty>:

int _isatty(int file)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b085      	sub	sp, #20
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
	...

080006e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006ec:	4a14      	ldr	r2, [pc, #80]	; (8000740 <_sbrk+0x5c>)
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <_sbrk+0x60>)
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <_sbrk+0x64>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d102      	bne.n	8000706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <_sbrk+0x64>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <_sbrk+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <_sbrk+0x64>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	429a      	cmp	r2, r3
 8000712:	d207      	bcs.n	8000724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000714:	f006 ff08 	bl	8007528 <__errno>
 8000718:	4603      	mov	r3, r0
 800071a:	220c      	movs	r2, #12
 800071c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	e009      	b.n	8000738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <_sbrk+0x64>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <_sbrk+0x64>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <_sbrk+0x64>)
 8000734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20005000 	.word	0x20005000
 8000744:	00000400 	.word	0x00000400
 8000748:	20000168 	.word	0x20000168
 800074c:	20000458 	.word	0x20000458

08000750 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_USART2_UART_Init+0x48>)
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_USART2_UART_Init+0x48>)
 8000768:	4a10      	ldr	r2, [pc, #64]	; (80007ac <MX_USART2_UART_Init+0x50>)
 800076a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_USART2_UART_Init+0x48>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART2_UART_Init+0x48>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_USART2_UART_Init+0x48>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART2_UART_Init+0x48>)
 8000780:	220c      	movs	r2, #12
 8000782:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_USART2_UART_Init+0x48>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART2_UART_Init+0x48>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_USART2_UART_Init+0x48>)
 8000792:	f003 ff65 	bl	8004660 <HAL_UART_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800079c:	f7ff fe9e 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000016c 	.word	0x2000016c
 80007a8:	40004400 	.word	0x40004400
 80007ac:	001e8480 	.word	0x001e8480

080007b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a1f      	ldr	r2, [pc, #124]	; (8000848 <HAL_UART_MspInit+0x98>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d137      	bne.n	8000840 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <HAL_UART_MspInit+0x9c>)
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	4a1d      	ldr	r2, [pc, #116]	; (800084c <HAL_UART_MspInit+0x9c>)
 80007d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007da:	61d3      	str	r3, [r2, #28]
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <HAL_UART_MspInit+0x9c>)
 80007de:	69db      	ldr	r3, [r3, #28]
 80007e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <HAL_UART_MspInit+0x9c>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a17      	ldr	r2, [pc, #92]	; (800084c <HAL_UART_MspInit+0x9c>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_UART_MspInit+0x9c>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin;
 8000800:	2304      	movs	r3, #4
 8000802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <HAL_UART_MspInit+0xa0>)
 8000814:	f000 fbfa 	bl	800100c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_RX_Pin;
 8000818:	2308      	movs	r3, #8
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4809      	ldr	r0, [pc, #36]	; (8000850 <HAL_UART_MspInit+0xa0>)
 800082c:	f000 fbee 	bl	800100c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	2026      	movs	r0, #38	; 0x26
 8000836:	f000 f990 	bl	8000b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800083a:	2026      	movs	r0, #38	; 0x26
 800083c:	f000 f9a9 	bl	8000b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40004400 	.word	0x40004400
 800084c:	40021000 	.word	0x40021000
 8000850:	40010800 	.word	0x40010800

08000854 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000854:	f7ff ff7c 	bl	8000750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800085a:	490c      	ldr	r1, [pc, #48]	; (800088c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <LoopFillZerobss+0x16>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a09      	ldr	r2, [pc, #36]	; (8000894 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000870:	4c09      	ldr	r4, [pc, #36]	; (8000898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800087e:	f006 fe59 	bl	8007534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000882:	f7ff fdcf 	bl	8000424 <main>
  bx lr
 8000886:	4770      	bx	lr
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800088c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000890:	08008504 	.word	0x08008504
  ldr r2, =_sbss
 8000894:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000898:	20000454 	.word	0x20000454

0800089c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800089c:	e7fe      	b.n	800089c <ADC1_2_IRQHandler>
	...

080008a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_Init+0x28>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_Init+0x28>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f947 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 f808 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008bc:	f7ff fe14 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40022000 	.word	0x40022000

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x54>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f95f 	bl	8000bae <HAL_SYSTICK_Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00e      	b.n	8000918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d80a      	bhi.n	8000916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f000 f927 	bl	8000b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_InitTick+0x5c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	20000004 	.word	0x20000004

0800092c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x1c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x20>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <HAL_IncTick+0x20>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000008 	.word	0x20000008
 800094c:	200001b4 	.word	0x200001b4

08000950 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <HAL_GetTick+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	200001b4 	.word	0x200001b4

08000964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800096c:	f7ff fff0 	bl	8000950 <HAL_GetTick>
 8000970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800097c:	d005      	beq.n	800098a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_Delay+0x44>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800098a:	bf00      	nop
 800098c:	f7ff ffe0 	bl	8000950 <HAL_GetTick>
 8000990:	4602      	mov	r2, r0
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d8f7      	bhi.n	800098c <HAL_Delay+0x28>
  {
  }
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4906      	ldr	r1, [pc, #24]	; (8000a44 <__NVIC_EnableIRQ+0x34>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f7ff ff90 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff2d 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6c:	f7ff ff42 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	6978      	ldr	r0, [r7, #20]
 8000b78:	f7ff ff90 	bl	8000a9c <NVIC_EncodePriority>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff5f 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff35 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffa2 	bl	8000b00 <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e043      	b.n	8000c66 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <HAL_DMA_Init+0xa8>)
 8000be6:	4413      	add	r3, r2
 8000be8:	4a22      	ldr	r2, [pc, #136]	; (8000c74 <HAL_DMA_Init+0xac>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	091b      	lsrs	r3, r3, #4
 8000bf0:	009a      	lsls	r2, r3, #2
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a1f      	ldr	r2, [pc, #124]	; (8000c78 <HAL_DMA_Init+0xb0>)
 8000bfa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2202      	movs	r2, #2
 8000c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	bffdfff8 	.word	0xbffdfff8
 8000c74:	cccccccd 	.word	0xcccccccd
 8000c78:	40020000 	.word	0x40020000

08000c7c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d008      	beq.n	8000ca6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2204      	movs	r2, #4
 8000c98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e020      	b.n	8000ce8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 020e 	bic.w	r2, r2, #14
 8000cb4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0201 	bic.w	r2, r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
	...

08000cf4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d005      	beq.n	8000d18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2204      	movs	r2, #4
 8000d10:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e051      	b.n	8000dbc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 020e 	bic.w	r2, r2, #14
 8000d26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0201 	bic.w	r2, r2, #1
 8000d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a22      	ldr	r2, [pc, #136]	; (8000dc8 <HAL_DMA_Abort_IT+0xd4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d029      	beq.n	8000d96 <HAL_DMA_Abort_IT+0xa2>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <HAL_DMA_Abort_IT+0xd8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d022      	beq.n	8000d92 <HAL_DMA_Abort_IT+0x9e>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <HAL_DMA_Abort_IT+0xdc>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d01a      	beq.n	8000d8c <HAL_DMA_Abort_IT+0x98>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <HAL_DMA_Abort_IT+0xe0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d012      	beq.n	8000d86 <HAL_DMA_Abort_IT+0x92>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <HAL_DMA_Abort_IT+0xe4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d00a      	beq.n	8000d80 <HAL_DMA_Abort_IT+0x8c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <HAL_DMA_Abort_IT+0xe8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d102      	bne.n	8000d7a <HAL_DMA_Abort_IT+0x86>
 8000d74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d78:	e00e      	b.n	8000d98 <HAL_DMA_Abort_IT+0xa4>
 8000d7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d7e:	e00b      	b.n	8000d98 <HAL_DMA_Abort_IT+0xa4>
 8000d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d84:	e008      	b.n	8000d98 <HAL_DMA_Abort_IT+0xa4>
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	e005      	b.n	8000d98 <HAL_DMA_Abort_IT+0xa4>
 8000d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d90:	e002      	b.n	8000d98 <HAL_DMA_Abort_IT+0xa4>
 8000d92:	2310      	movs	r3, #16
 8000d94:	e000      	b.n	8000d98 <HAL_DMA_Abort_IT+0xa4>
 8000d96:	2301      	movs	r3, #1
 8000d98:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <HAL_DMA_Abort_IT+0xec>)
 8000d9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	4798      	blx	r3
    } 
  }
  return status;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40020008 	.word	0x40020008
 8000dcc:	4002001c 	.word	0x4002001c
 8000dd0:	40020030 	.word	0x40020030
 8000dd4:	40020044 	.word	0x40020044
 8000dd8:	40020058 	.word	0x40020058
 8000ddc:	4002006c 	.word	0x4002006c
 8000de0:	40020000 	.word	0x40020000

08000de4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	2204      	movs	r2, #4
 8000e02:	409a      	lsls	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d04f      	beq.n	8000eac <HAL_DMA_IRQHandler+0xc8>
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d04a      	beq.n	8000eac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0320 	and.w	r3, r3, #32
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d107      	bne.n	8000e34 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 0204 	bic.w	r2, r2, #4
 8000e32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a66      	ldr	r2, [pc, #408]	; (8000fd4 <HAL_DMA_IRQHandler+0x1f0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d029      	beq.n	8000e92 <HAL_DMA_IRQHandler+0xae>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a65      	ldr	r2, [pc, #404]	; (8000fd8 <HAL_DMA_IRQHandler+0x1f4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d022      	beq.n	8000e8e <HAL_DMA_IRQHandler+0xaa>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a63      	ldr	r2, [pc, #396]	; (8000fdc <HAL_DMA_IRQHandler+0x1f8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d01a      	beq.n	8000e88 <HAL_DMA_IRQHandler+0xa4>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a62      	ldr	r2, [pc, #392]	; (8000fe0 <HAL_DMA_IRQHandler+0x1fc>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d012      	beq.n	8000e82 <HAL_DMA_IRQHandler+0x9e>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a60      	ldr	r2, [pc, #384]	; (8000fe4 <HAL_DMA_IRQHandler+0x200>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d00a      	beq.n	8000e7c <HAL_DMA_IRQHandler+0x98>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a5f      	ldr	r2, [pc, #380]	; (8000fe8 <HAL_DMA_IRQHandler+0x204>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d102      	bne.n	8000e76 <HAL_DMA_IRQHandler+0x92>
 8000e70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e74:	e00e      	b.n	8000e94 <HAL_DMA_IRQHandler+0xb0>
 8000e76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e7a:	e00b      	b.n	8000e94 <HAL_DMA_IRQHandler+0xb0>
 8000e7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e80:	e008      	b.n	8000e94 <HAL_DMA_IRQHandler+0xb0>
 8000e82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e86:	e005      	b.n	8000e94 <HAL_DMA_IRQHandler+0xb0>
 8000e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8c:	e002      	b.n	8000e94 <HAL_DMA_IRQHandler+0xb0>
 8000e8e:	2340      	movs	r3, #64	; 0x40
 8000e90:	e000      	b.n	8000e94 <HAL_DMA_IRQHandler+0xb0>
 8000e92:	2304      	movs	r3, #4
 8000e94:	4a55      	ldr	r2, [pc, #340]	; (8000fec <HAL_DMA_IRQHandler+0x208>)
 8000e96:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 8094 	beq.w	8000fca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000eaa:	e08e      	b.n	8000fca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d056      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x186>
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d051      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0320 	and.w	r3, r3, #32
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10b      	bne.n	8000eec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 020a 	bic.w	r2, r2, #10
 8000ee2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a38      	ldr	r2, [pc, #224]	; (8000fd4 <HAL_DMA_IRQHandler+0x1f0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d029      	beq.n	8000f4a <HAL_DMA_IRQHandler+0x166>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a37      	ldr	r2, [pc, #220]	; (8000fd8 <HAL_DMA_IRQHandler+0x1f4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d022      	beq.n	8000f46 <HAL_DMA_IRQHandler+0x162>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a35      	ldr	r2, [pc, #212]	; (8000fdc <HAL_DMA_IRQHandler+0x1f8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01a      	beq.n	8000f40 <HAL_DMA_IRQHandler+0x15c>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a34      	ldr	r2, [pc, #208]	; (8000fe0 <HAL_DMA_IRQHandler+0x1fc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d012      	beq.n	8000f3a <HAL_DMA_IRQHandler+0x156>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a32      	ldr	r2, [pc, #200]	; (8000fe4 <HAL_DMA_IRQHandler+0x200>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00a      	beq.n	8000f34 <HAL_DMA_IRQHandler+0x150>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <HAL_DMA_IRQHandler+0x204>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d102      	bne.n	8000f2e <HAL_DMA_IRQHandler+0x14a>
 8000f28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f2c:	e00e      	b.n	8000f4c <HAL_DMA_IRQHandler+0x168>
 8000f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f32:	e00b      	b.n	8000f4c <HAL_DMA_IRQHandler+0x168>
 8000f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f38:	e008      	b.n	8000f4c <HAL_DMA_IRQHandler+0x168>
 8000f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3e:	e005      	b.n	8000f4c <HAL_DMA_IRQHandler+0x168>
 8000f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f44:	e002      	b.n	8000f4c <HAL_DMA_IRQHandler+0x168>
 8000f46:	2320      	movs	r3, #32
 8000f48:	e000      	b.n	8000f4c <HAL_DMA_IRQHandler+0x168>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	4a27      	ldr	r2, [pc, #156]	; (8000fec <HAL_DMA_IRQHandler+0x208>)
 8000f4e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d034      	beq.n	8000fca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f68:	e02f      	b.n	8000fca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	2208      	movs	r2, #8
 8000f70:	409a      	lsls	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d028      	beq.n	8000fcc <HAL_DMA_IRQHandler+0x1e8>
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d023      	beq.n	8000fcc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 020e 	bic.w	r2, r2, #14
 8000f92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	4798      	blx	r3
    }
  }
  return;
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
}
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020008 	.word	0x40020008
 8000fd8:	4002001c 	.word	0x4002001c
 8000fdc:	40020030 	.word	0x40020030
 8000fe0:	40020044 	.word	0x40020044
 8000fe4:	40020058 	.word	0x40020058
 8000fe8:	4002006c 	.word	0x4002006c
 8000fec:	40020000 	.word	0x40020000

08000ff0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ffe:	b2db      	uxtb	r3, r3
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b08b      	sub	sp, #44	; 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	e169      	b.n	80012f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001020:	2201      	movs	r2, #1
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 8158 	bne.w	80012ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4a9a      	ldr	r2, [pc, #616]	; (80012ac <HAL_GPIO_Init+0x2a0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d05e      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001048:	4a98      	ldr	r2, [pc, #608]	; (80012ac <HAL_GPIO_Init+0x2a0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d875      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 800104e:	4a98      	ldr	r2, [pc, #608]	; (80012b0 <HAL_GPIO_Init+0x2a4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d058      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001054:	4a96      	ldr	r2, [pc, #600]	; (80012b0 <HAL_GPIO_Init+0x2a4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d86f      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 800105a:	4a96      	ldr	r2, [pc, #600]	; (80012b4 <HAL_GPIO_Init+0x2a8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d052      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001060:	4a94      	ldr	r2, [pc, #592]	; (80012b4 <HAL_GPIO_Init+0x2a8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d869      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 8001066:	4a94      	ldr	r2, [pc, #592]	; (80012b8 <HAL_GPIO_Init+0x2ac>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d04c      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 800106c:	4a92      	ldr	r2, [pc, #584]	; (80012b8 <HAL_GPIO_Init+0x2ac>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d863      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 8001072:	4a92      	ldr	r2, [pc, #584]	; (80012bc <HAL_GPIO_Init+0x2b0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d046      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001078:	4a90      	ldr	r2, [pc, #576]	; (80012bc <HAL_GPIO_Init+0x2b0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d85d      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 800107e:	2b12      	cmp	r3, #18
 8001080:	d82a      	bhi.n	80010d8 <HAL_GPIO_Init+0xcc>
 8001082:	2b12      	cmp	r3, #18
 8001084:	d859      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 8001086:	a201      	add	r2, pc, #4	; (adr r2, 800108c <HAL_GPIO_Init+0x80>)
 8001088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108c:	08001107 	.word	0x08001107
 8001090:	080010e1 	.word	0x080010e1
 8001094:	080010f3 	.word	0x080010f3
 8001098:	08001135 	.word	0x08001135
 800109c:	0800113b 	.word	0x0800113b
 80010a0:	0800113b 	.word	0x0800113b
 80010a4:	0800113b 	.word	0x0800113b
 80010a8:	0800113b 	.word	0x0800113b
 80010ac:	0800113b 	.word	0x0800113b
 80010b0:	0800113b 	.word	0x0800113b
 80010b4:	0800113b 	.word	0x0800113b
 80010b8:	0800113b 	.word	0x0800113b
 80010bc:	0800113b 	.word	0x0800113b
 80010c0:	0800113b 	.word	0x0800113b
 80010c4:	0800113b 	.word	0x0800113b
 80010c8:	0800113b 	.word	0x0800113b
 80010cc:	0800113b 	.word	0x0800113b
 80010d0:	080010e9 	.word	0x080010e9
 80010d4:	080010fd 	.word	0x080010fd
 80010d8:	4a79      	ldr	r2, [pc, #484]	; (80012c0 <HAL_GPIO_Init+0x2b4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010de:	e02c      	b.n	800113a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e029      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	3304      	adds	r3, #4
 80010ee:	623b      	str	r3, [r7, #32]
          break;
 80010f0:	e024      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	3308      	adds	r3, #8
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e01f      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	330c      	adds	r3, #12
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	e01a      	b.n	800113c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110e:	2304      	movs	r3, #4
 8001110:	623b      	str	r3, [r7, #32]
          break;
 8001112:	e013      	b.n	800113c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d105      	bne.n	8001128 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800111c:	2308      	movs	r3, #8
 800111e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	611a      	str	r2, [r3, #16]
          break;
 8001126:	e009      	b.n	800113c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001128:	2308      	movs	r3, #8
 800112a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	615a      	str	r2, [r3, #20]
          break;
 8001132:	e003      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
          break;
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x130>
          break;
 800113a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2bff      	cmp	r3, #255	; 0xff
 8001140:	d801      	bhi.n	8001146 <HAL_GPIO_Init+0x13a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	e001      	b.n	800114a <HAL_GPIO_Init+0x13e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3304      	adds	r3, #4
 800114a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2bff      	cmp	r3, #255	; 0xff
 8001150:	d802      	bhi.n	8001158 <HAL_GPIO_Init+0x14c>
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	e002      	b.n	800115e <HAL_GPIO_Init+0x152>
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	3b08      	subs	r3, #8
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	210f      	movs	r1, #15
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	401a      	ands	r2, r3
 8001170:	6a39      	ldr	r1, [r7, #32]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	431a      	orrs	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80b1 	beq.w	80012ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800118c:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <HAL_GPIO_Init+0x2b8>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a4c      	ldr	r2, [pc, #304]	; (80012c4 <HAL_GPIO_Init+0x2b8>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <HAL_GPIO_Init+0x2b8>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a4:	4a48      	ldr	r2, [pc, #288]	; (80012c8 <HAL_GPIO_Init+0x2bc>)
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a40      	ldr	r2, [pc, #256]	; (80012cc <HAL_GPIO_Init+0x2c0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d013      	beq.n	80011f8 <HAL_GPIO_Init+0x1ec>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a3f      	ldr	r2, [pc, #252]	; (80012d0 <HAL_GPIO_Init+0x2c4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00d      	beq.n	80011f4 <HAL_GPIO_Init+0x1e8>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a3e      	ldr	r2, [pc, #248]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d007      	beq.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a3d      	ldr	r2, [pc, #244]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d101      	bne.n	80011ec <HAL_GPIO_Init+0x1e0>
 80011e8:	2303      	movs	r3, #3
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x1ee>
 80011ec:	2304      	movs	r3, #4
 80011ee:	e004      	b.n	80011fa <HAL_GPIO_Init+0x1ee>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x1ee>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_Init+0x1ee>
 80011f8:	2300      	movs	r3, #0
 80011fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011fc:	f002 0203 	and.w	r2, r2, #3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4093      	lsls	r3, r2
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800120a:	492f      	ldr	r1, [pc, #188]	; (80012c8 <HAL_GPIO_Init+0x2bc>)
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	492c      	ldr	r1, [pc, #176]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001232:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	43db      	mvns	r3, r3
 800123a:	4928      	ldr	r1, [pc, #160]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800123c:	4013      	ands	r3, r2
 800123e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	4922      	ldr	r1, [pc, #136]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	60cb      	str	r3, [r1, #12]
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	43db      	mvns	r3, r3
 8001262:	491e      	ldr	r1, [pc, #120]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001264:	4013      	ands	r3, r2
 8001266:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	4918      	ldr	r1, [pc, #96]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	4914      	ldr	r1, [pc, #80]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800128c:	4013      	ands	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d021      	beq.n	80012e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	490e      	ldr	r1, [pc, #56]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	600b      	str	r3, [r1, #0]
 80012a8:	e021      	b.n	80012ee <HAL_GPIO_Init+0x2e2>
 80012aa:	bf00      	nop
 80012ac:	10320000 	.word	0x10320000
 80012b0:	10310000 	.word	0x10310000
 80012b4:	10220000 	.word	0x10220000
 80012b8:	10210000 	.word	0x10210000
 80012bc:	10120000 	.word	0x10120000
 80012c0:	10110000 	.word	0x10110000
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000
 80012cc:	40010800 	.word	0x40010800
 80012d0:	40010c00 	.word	0x40010c00
 80012d4:	40011000 	.word	0x40011000
 80012d8:	40011400 	.word	0x40011400
 80012dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_GPIO_Init+0x304>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	4909      	ldr	r1, [pc, #36]	; (8001310 <HAL_GPIO_Init+0x304>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	3301      	adds	r3, #1
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	fa22 f303 	lsr.w	r3, r2, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f47f ae8e 	bne.w	8001020 <HAL_GPIO_Init+0x14>
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	372c      	adds	r7, #44	; 0x2c
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	40010400 	.word	0x40010400

08001314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e001      	b.n	8001336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	807b      	strh	r3, [r7, #2]
 800134e:	4613      	mov	r3, r2
 8001350:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001352:	787b      	ldrb	r3, [r7, #1]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001358:	887a      	ldrh	r2, [r7, #2]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800135e:	e003      	b.n	8001368 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	041a      	lsls	r2, r3, #16
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	611a      	str	r2, [r3, #16]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
	...

08001374 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	4618      	mov	r0, r3
 8001394:	f004 f888 	bl	80054a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40010400 	.word	0x40010400

080013a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e12b      	b.n	800160e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d106      	bne.n	80013d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7fe ff76 	bl	80002bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2224      	movs	r2, #36	; 0x24
 80013d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001406:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001408:	f003 f8e4 	bl	80045d4 <HAL_RCC_GetPCLK1Freq>
 800140c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a81      	ldr	r2, [pc, #516]	; (8001618 <HAL_I2C_Init+0x274>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d807      	bhi.n	8001428 <HAL_I2C_Init+0x84>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4a80      	ldr	r2, [pc, #512]	; (800161c <HAL_I2C_Init+0x278>)
 800141c:	4293      	cmp	r3, r2
 800141e:	bf94      	ite	ls
 8001420:	2301      	movls	r3, #1
 8001422:	2300      	movhi	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	e006      	b.n	8001436 <HAL_I2C_Init+0x92>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4a7d      	ldr	r2, [pc, #500]	; (8001620 <HAL_I2C_Init+0x27c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	bf94      	ite	ls
 8001430:	2301      	movls	r3, #1
 8001432:	2300      	movhi	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e0e7      	b.n	800160e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4a78      	ldr	r2, [pc, #480]	; (8001624 <HAL_I2C_Init+0x280>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0c9b      	lsrs	r3, r3, #18
 8001448:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	430a      	orrs	r2, r1
 800145c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a6a      	ldr	r2, [pc, #424]	; (8001618 <HAL_I2C_Init+0x274>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d802      	bhi.n	8001478 <HAL_I2C_Init+0xd4>
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	3301      	adds	r3, #1
 8001476:	e009      	b.n	800148c <HAL_I2C_Init+0xe8>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	4a69      	ldr	r2, [pc, #420]	; (8001628 <HAL_I2C_Init+0x284>)
 8001484:	fba2 2303 	umull	r2, r3, r2, r3
 8001488:	099b      	lsrs	r3, r3, #6
 800148a:	3301      	adds	r3, #1
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	430b      	orrs	r3, r1
 8001492:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800149e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	495c      	ldr	r1, [pc, #368]	; (8001618 <HAL_I2C_Init+0x274>)
 80014a8:	428b      	cmp	r3, r1
 80014aa:	d819      	bhi.n	80014e0 <HAL_I2C_Init+0x13c>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1e59      	subs	r1, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ba:	1c59      	adds	r1, r3, #1
 80014bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014c0:	400b      	ands	r3, r1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00a      	beq.n	80014dc <HAL_I2C_Init+0x138>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1e59      	subs	r1, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d4:	3301      	adds	r3, #1
 80014d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014da:	e051      	b.n	8001580 <HAL_I2C_Init+0x1dc>
 80014dc:	2304      	movs	r3, #4
 80014de:	e04f      	b.n	8001580 <HAL_I2C_Init+0x1dc>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d111      	bne.n	800150c <HAL_I2C_Init+0x168>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1e58      	subs	r0, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	440b      	add	r3, r1
 80014f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fa:	3301      	adds	r3, #1
 80014fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001500:	2b00      	cmp	r3, #0
 8001502:	bf0c      	ite	eq
 8001504:	2301      	moveq	r3, #1
 8001506:	2300      	movne	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	e012      	b.n	8001532 <HAL_I2C_Init+0x18e>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1e58      	subs	r0, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	0099      	lsls	r1, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001522:	3301      	adds	r3, #1
 8001524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_Init+0x196>
 8001536:	2301      	movs	r3, #1
 8001538:	e022      	b.n	8001580 <HAL_I2C_Init+0x1dc>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10e      	bne.n	8001560 <HAL_I2C_Init+0x1bc>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1e58      	subs	r0, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6859      	ldr	r1, [r3, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	440b      	add	r3, r1
 8001550:	fbb0 f3f3 	udiv	r3, r0, r3
 8001554:	3301      	adds	r3, #1
 8001556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155e:	e00f      	b.n	8001580 <HAL_I2C_Init+0x1dc>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1e58      	subs	r0, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6859      	ldr	r1, [r3, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	0099      	lsls	r1, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	fbb0 f3f3 	udiv	r3, r0, r3
 8001576:	3301      	adds	r3, #1
 8001578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	6809      	ldr	r1, [r1, #0]
 8001584:	4313      	orrs	r3, r2
 8001586:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69da      	ldr	r2, [r3, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6911      	ldr	r1, [r2, #16]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68d2      	ldr	r2, [r2, #12]
 80015ba:	4311      	orrs	r1, r2
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	430b      	orrs	r3, r1
 80015c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2220      	movs	r2, #32
 80015fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	000186a0 	.word	0x000186a0
 800161c:	001e847f 	.word	0x001e847f
 8001620:	003d08ff 	.word	0x003d08ff
 8001624:	431bde83 	.word	0x431bde83
 8001628:	10624dd3 	.word	0x10624dd3

0800162c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163e:	2b80      	cmp	r3, #128	; 0x80
 8001640:	d103      	bne.n	800164a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af02      	add	r7, sp, #8
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	4608      	mov	r0, r1
 800165e:	4611      	mov	r1, r2
 8001660:	461a      	mov	r2, r3
 8001662:	4603      	mov	r3, r0
 8001664:	817b      	strh	r3, [r7, #10]
 8001666:	460b      	mov	r3, r1
 8001668:	813b      	strh	r3, [r7, #8]
 800166a:	4613      	mov	r3, r2
 800166c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800166e:	f7ff f96f 	bl	8000950 <HAL_GetTick>
 8001672:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b20      	cmp	r3, #32
 800167e:	f040 80d9 	bne.w	8001834 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2319      	movs	r3, #25
 8001688:	2201      	movs	r2, #1
 800168a:	496d      	ldr	r1, [pc, #436]	; (8001840 <HAL_I2C_Mem_Write+0x1ec>)
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f002 f953 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001698:	2302      	movs	r3, #2
 800169a:	e0cc      	b.n	8001836 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_I2C_Mem_Write+0x56>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e0c5      	b.n	8001836 <HAL_I2C_Mem_Write+0x1e2>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d007      	beq.n	80016d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2221      	movs	r2, #33	; 0x21
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2240      	movs	r2, #64	; 0x40
 80016ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a3a      	ldr	r2, [r7, #32]
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4a4d      	ldr	r2, [pc, #308]	; (8001844 <HAL_I2C_Mem_Write+0x1f0>)
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001712:	88f8      	ldrh	r0, [r7, #6]
 8001714:	893a      	ldrh	r2, [r7, #8]
 8001716:	8979      	ldrh	r1, [r7, #10]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	4603      	mov	r3, r0
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f001 fee2 	bl	80034ec <I2C_RequestMemoryWrite>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d052      	beq.n	80017d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e081      	b.n	8001836 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f002 fa18 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00d      	beq.n	800175e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	2b04      	cmp	r3, #4
 8001748:	d107      	bne.n	800175a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001758:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e06b      	b.n	8001836 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001778:	3b01      	subs	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001784:	b29b      	uxth	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b04      	cmp	r3, #4
 800179a:	d11b      	bne.n	80017d4 <HAL_I2C_Mem_Write+0x180>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d017      	beq.n	80017d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017be:	3b01      	subs	r3, #1
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1aa      	bne.n	8001732 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f002 fa0b 	bl	8003bfc <I2C_WaitOnBTFFlagUntilTimeout>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00d      	beq.n	8001808 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d107      	bne.n	8001804 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001802:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e016      	b.n	8001836 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2220      	movs	r2, #32
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	e000      	b.n	8001836 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001834:	2302      	movs	r3, #2
  }
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	00100002 	.word	0x00100002
 8001844:	ffff0000 	.word	0xffff0000

08001848 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4603      	mov	r3, r0
 8001858:	817b      	strh	r3, [r7, #10]
 800185a:	460b      	mov	r3, r1
 800185c:	813b      	strh	r3, [r7, #8]
 800185e:	4613      	mov	r3, r2
 8001860:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001866:	f7ff f873 	bl	8000950 <HAL_GetTick>
 800186a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b20      	cmp	r3, #32
 8001876:	f040 8250 	bne.w	8001d1a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2319      	movs	r3, #25
 8001880:	2201      	movs	r2, #1
 8001882:	4982      	ldr	r1, [pc, #520]	; (8001a8c <HAL_I2C_Mem_Read+0x244>)
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f002 f857 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001890:	2302      	movs	r3, #2
 8001892:	e243      	b.n	8001d1c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_I2C_Mem_Read+0x5a>
 800189e:	2302      	movs	r3, #2
 80018a0:	e23c      	b.n	8001d1c <HAL_I2C_Mem_Read+0x4d4>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d007      	beq.n	80018c8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2222      	movs	r2, #34	; 0x22
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2240      	movs	r2, #64	; 0x40
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a62      	ldr	r2, [pc, #392]	; (8001a90 <HAL_I2C_Mem_Read+0x248>)
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800190a:	88f8      	ldrh	r0, [r7, #6]
 800190c:	893a      	ldrh	r2, [r7, #8]
 800190e:	8979      	ldrh	r1, [r7, #10]
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	4603      	mov	r3, r0
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f001 fe7c 	bl	8003618 <I2C_RequestMemoryRead>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e1f8      	b.n	8001d1c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192e:	2b00      	cmp	r3, #0
 8001930:	d113      	bne.n	800195a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e1cc      	b.n	8001cf4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195e:	2b01      	cmp	r3, #1
 8001960:	d11e      	bne.n	80019a0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001970:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001972:	b672      	cpsid	i
}
 8001974:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800199a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800199c:	b662      	cpsie	i
}
 800199e:	e035      	b.n	8001a0c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d11e      	bne.n	80019e6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019e2:	b662      	cpsie	i
}
 80019e4:	e012      	b.n	8001a0c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019f4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001a0c:	e172      	b.n	8001cf4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	f200 811f 	bhi.w	8001c56 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d123      	bne.n	8001a68 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f002 f963 	bl	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e173      	b.n	8001d1c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a66:	e145      	b.n	8001cf4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d152      	bne.n	8001b16 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a76:	2200      	movs	r2, #0
 8001a78:	4906      	ldr	r1, [pc, #24]	; (8001a94 <HAL_I2C_Mem_Read+0x24c>)
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f001 ff5c 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d008      	beq.n	8001a98 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e148      	b.n	8001d1c <HAL_I2C_Mem_Read+0x4d4>
 8001a8a:	bf00      	nop
 8001a8c:	00100002 	.word	0x00100002
 8001a90:	ffff0000 	.word	0xffff0000
 8001a94:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ade:	b662      	cpsie	i
}
 8001ae0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b14:	e0ee      	b.n	8001cf4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4981      	ldr	r1, [pc, #516]	; (8001d24 <HAL_I2C_Mem_Read+0x4dc>)
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f001 ff09 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0f5      	b.n	8001d1c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001b76:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <HAL_I2C_Mem_Read+0x4e0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	08db      	lsrs	r3, r3, #3
 8001b7c:	4a6b      	ldr	r2, [pc, #428]	; (8001d2c <HAL_I2C_Mem_Read+0x4e4>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0a1a      	lsrs	r2, r3, #8
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00da      	lsls	r2, r3, #3
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d118      	bne.n	8001bce <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f043 0220 	orr.w	r2, r3, #32
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001bbe:	b662      	cpsie	i
}
 8001bc0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0a6      	b.n	8001d1c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d1d9      	bne.n	8001b90 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c1e:	b662      	cpsie	i
}
 8001c20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c54:	e04e      	b.n	8001cf4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f002 f848 	bl	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e058      	b.n	8001d1c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d124      	bne.n	8001cf4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d107      	bne.n	8001cc2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f47f ae88 	bne.w	8001a0e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001d1a:	2302      	movs	r3, #2
  }
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3728      	adds	r7, #40	; 0x28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	00010004 	.word	0x00010004
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	14f8b589 	.word	0x14f8b589

08001d30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d003      	beq.n	8001d68 <HAL_I2C_EV_IRQHandler+0x38>
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b40      	cmp	r3, #64	; 0x40
 8001d64:	f040 80b1 	bne.w	8001eca <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10d      	bne.n	8001d9e <HAL_I2C_EV_IRQHandler+0x6e>
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001d88:	d003      	beq.n	8001d92 <HAL_I2C_EV_IRQHandler+0x62>
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d90:	d101      	bne.n	8001d96 <HAL_I2C_EV_IRQHandler+0x66>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_I2C_EV_IRQHandler+0x68>
 8001d96:	2300      	movs	r3, #0
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	f000 8114 	beq.w	8001fc6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00b      	beq.n	8001dc0 <HAL_I2C_EV_IRQHandler+0x90>
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f002 f827 	bl	8003e06 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fd74 	bl	80028a6 <I2C_Master_SB>
 8001dbe:	e083      	b.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <HAL_I2C_EV_IRQHandler+0xac>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fdeb 	bl	80029b0 <I2C_Master_ADD10>
 8001dda:	e075      	b.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <HAL_I2C_EV_IRQHandler+0xc8>
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fe06 	bl	8002a02 <I2C_Master_ADDR>
 8001df6:	e067      	b.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d036      	beq.n	8001e70 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e10:	f000 80db 	beq.w	8001fca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00d      	beq.n	8001e3a <HAL_I2C_EV_IRQHandler+0x10a>
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_I2C_EV_IRQHandler+0x10a>
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d103      	bne.n	8001e3a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f9d4 	bl	80021e0 <I2C_MasterTransmit_TXE>
 8001e38:	e046      	b.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80c2 	beq.w	8001fca <HAL_I2C_EV_IRQHandler+0x29a>
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80bc 	beq.w	8001fca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001e52:	7bbb      	ldrb	r3, [r7, #14]
 8001e54:	2b21      	cmp	r3, #33	; 0x21
 8001e56:	d103      	bne.n	8001e60 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fa5d 	bl	8002318 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e5e:	e0b4      	b.n	8001fca <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b40      	cmp	r3, #64	; 0x40
 8001e64:	f040 80b1 	bne.w	8001fca <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 facb 	bl	8002404 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e6e:	e0ac      	b.n	8001fca <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e7e:	f000 80a4 	beq.w	8001fca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_I2C_EV_IRQHandler+0x178>
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d008      	beq.n	8001ea8 <HAL_I2C_EV_IRQHandler+0x178>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d103      	bne.n	8001ea8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fb47 	bl	8002534 <I2C_MasterReceive_RXNE>
 8001ea6:	e00f      	b.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 808b 	beq.w	8001fca <HAL_I2C_EV_IRQHandler+0x29a>
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8085 	beq.w	8001fca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fbff 	bl	80026c4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ec6:	e080      	b.n	8001fca <HAL_I2C_EV_IRQHandler+0x29a>
 8001ec8:	e07f      	b.n	8001fca <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e007      	b.n	8001eec <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d011      	beq.n	8001f1a <HAL_I2C_EV_IRQHandler+0x1ea>
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00c      	beq.n	8001f1a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f10:	69b9      	ldr	r1, [r7, #24]
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 ffcc 	bl	8002eb0 <I2C_Slave_ADDR>
 8001f18:	e05a      	b.n	8001fd0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_I2C_EV_IRQHandler+0x206>
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f001 f806 	bl	8002f40 <I2C_Slave_STOPF>
 8001f34:	e04c      	b.n	8001fd0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f36:	7bbb      	ldrb	r3, [r7, #14]
 8001f38:	2b21      	cmp	r3, #33	; 0x21
 8001f3a:	d002      	beq.n	8001f42 <HAL_I2C_EV_IRQHandler+0x212>
 8001f3c:	7bbb      	ldrb	r3, [r7, #14]
 8001f3e:	2b29      	cmp	r3, #41	; 0x29
 8001f40:	d120      	bne.n	8001f84 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00d      	beq.n	8001f68 <HAL_I2C_EV_IRQHandler+0x238>
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <HAL_I2C_EV_IRQHandler+0x238>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d103      	bne.n	8001f68 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fee9 	bl	8002d38 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f66:	e032      	b.n	8001fce <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d02d      	beq.n	8001fce <HAL_I2C_EV_IRQHandler+0x29e>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d028      	beq.n	8001fce <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 ff18 	bl	8002db2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f82:	e024      	b.n	8001fce <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00d      	beq.n	8001faa <HAL_I2C_EV_IRQHandler+0x27a>
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_I2C_EV_IRQHandler+0x27a>
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d103      	bne.n	8001faa <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 ff25 	bl	8002df2 <I2C_SlaveReceive_RXNE>
 8001fa8:	e012      	b.n	8001fd0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00d      	beq.n	8001fd0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 ff55 	bl	8002e6e <I2C_SlaveReceive_BTF>
 8001fc4:	e004      	b.n	8001fd0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001fc6:	bf00      	nop
 8001fc8:	e002      	b.n	8001fd0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fca:	bf00      	nop
 8001fcc:	e000      	b.n	8001fd0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fce:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b08a      	sub	sp, #40	; 0x28
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ff8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_I2C_ER_IRQHandler+0x5a>
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d010      	beq.n	8002030 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800201e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800202e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00d      	beq.n	8002056 <HAL_I2C_ER_IRQHandler+0x80>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002054:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d03e      	beq.n	80020de <HAL_I2C_ER_IRQHandler+0x108>
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d039      	beq.n	80020de <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 800206a:	7efb      	ldrb	r3, [r7, #27]
 800206c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002084:	7ebb      	ldrb	r3, [r7, #26]
 8002086:	2b20      	cmp	r3, #32
 8002088:	d112      	bne.n	80020b0 <HAL_I2C_ER_IRQHandler+0xda>
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10f      	bne.n	80020b0 <HAL_I2C_ER_IRQHandler+0xda>
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	2b21      	cmp	r3, #33	; 0x21
 8002094:	d008      	beq.n	80020a8 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	2b29      	cmp	r3, #41	; 0x29
 800209a:	d005      	beq.n	80020a8 <HAL_I2C_ER_IRQHandler+0xd2>
 800209c:	7cfb      	ldrb	r3, [r7, #19]
 800209e:	2b28      	cmp	r3, #40	; 0x28
 80020a0:	d106      	bne.n	80020b0 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b21      	cmp	r3, #33	; 0x21
 80020a6:	d103      	bne.n	80020b0 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f001 f879 	bl	80031a0 <I2C_Slave_AF>
 80020ae:	e016      	b.n	80020de <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020b8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020c2:	7efb      	ldrb	r3, [r7, #27]
 80020c4:	2b10      	cmp	r3, #16
 80020c6:	d002      	beq.n	80020ce <HAL_I2C_ER_IRQHandler+0xf8>
 80020c8:	7efb      	ldrb	r3, [r7, #27]
 80020ca:	2b40      	cmp	r3, #64	; 0x40
 80020cc:	d107      	bne.n	80020de <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020dc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00d      	beq.n	8002104 <HAL_I2C_ER_IRQHandler+0x12e>
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002102:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f001 f8b6 	bl	8003288 <I2C_ITError>
  }
}
 800211c:	bf00      	nop
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
 8002178:	4613      	mov	r3, r2
 800217a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	2b00      	cmp	r3, #0
 8002204:	d150      	bne.n	80022a8 <I2C_MasterTransmit_TXE+0xc8>
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b21      	cmp	r3, #33	; 0x21
 800220a:	d14d      	bne.n	80022a8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b08      	cmp	r3, #8
 8002210:	d01d      	beq.n	800224e <I2C_MasterTransmit_TXE+0x6e>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b20      	cmp	r3, #32
 8002216:	d01a      	beq.n	800224e <I2C_MasterTransmit_TXE+0x6e>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800221e:	d016      	beq.n	800224e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800222e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2211      	movs	r2, #17
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ff6c 	bl	8002124 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800224c:	e060      	b.n	8002310 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800225c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b40      	cmp	r3, #64	; 0x40
 8002286:	d107      	bne.n	8002298 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ff81 	bl	8002198 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002296:	e03b      	b.n	8002310 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff3f 	bl	8002124 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022a6:	e033      	b.n	8002310 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b21      	cmp	r3, #33	; 0x21
 80022ac:	d005      	beq.n	80022ba <I2C_MasterTransmit_TXE+0xda>
 80022ae:	7bbb      	ldrb	r3, [r7, #14]
 80022b0:	2b40      	cmp	r3, #64	; 0x40
 80022b2:	d12d      	bne.n	8002310 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	2b22      	cmp	r3, #34	; 0x22
 80022b8:	d12a      	bne.n	8002310 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d108      	bne.n	80022d6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022d4:	e01c      	b.n	8002310 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b40      	cmp	r3, #64	; 0x40
 80022e0:	d103      	bne.n	80022ea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f88e 	bl	8002404 <I2C_MemoryTransmit_TXE_BTF>
}
 80022e8:	e012      	b.n	8002310 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	781a      	ldrb	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800230e:	e7ff      	b.n	8002310 <I2C_MasterTransmit_TXE+0x130>
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b21      	cmp	r3, #33	; 0x21
 8002330:	d164      	bne.n	80023fc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d012      	beq.n	8002362 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002360:	e04c      	b.n	80023fc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d01d      	beq.n	80023a4 <I2C_MasterTransmit_BTF+0x8c>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b20      	cmp	r3, #32
 800236c:	d01a      	beq.n	80023a4 <I2C_MasterTransmit_BTF+0x8c>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002374:	d016      	beq.n	80023a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002384:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2211      	movs	r2, #17
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff fec1 	bl	8002124 <HAL_I2C_MasterTxCpltCallback>
}
 80023a2:	e02b      	b.n	80023fc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b40      	cmp	r3, #64	; 0x40
 80023dc:	d107      	bne.n	80023ee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fed6 	bl	8002198 <HAL_I2C_MemTxCpltCallback>
}
 80023ec:	e006      	b.n	80023fc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fe94 	bl	8002124 <HAL_I2C_MasterTxCpltCallback>
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002412:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002418:	2b00      	cmp	r3, #0
 800241a:	d11d      	bne.n	8002458 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10b      	bne.n	800243c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002428:	b2da      	uxtb	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002434:	1c9a      	adds	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800243a:	e077      	b.n	800252c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002440:	b29b      	uxth	r3, r3
 8002442:	121b      	asrs	r3, r3, #8
 8002444:	b2da      	uxtb	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002456:	e069      	b.n	800252c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10b      	bne.n	8002478 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002464:	b2da      	uxtb	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002476:	e059      	b.n	800252c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247c:	2b02      	cmp	r3, #2
 800247e:	d152      	bne.n	8002526 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b22      	cmp	r3, #34	; 0x22
 8002484:	d10d      	bne.n	80024a2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002494:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80024a0:	e044      	b.n	800252c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b21      	cmp	r3, #33	; 0x21
 80024b0:	d112      	bne.n	80024d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024d6:	e029      	b.n	800252c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d124      	bne.n	800252c <I2C_MemoryTransmit_TXE_BTF+0x128>
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b21      	cmp	r3, #33	; 0x21
 80024e6:	d121      	bne.n	800252c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024f6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002506:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fe3a 	bl	8002198 <HAL_I2C_MemTxCpltCallback>
}
 8002524:	e002      	b.n	800252c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff f880 	bl	800162c <I2C_Flush_DR>
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b22      	cmp	r3, #34	; 0x22
 8002546:	f040 80b9 	bne.w	80026bc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d921      	bls.n	80025a2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b03      	cmp	r3, #3
 800258c:	f040 8096 	bne.w	80026bc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80025a0:	e08c      	b.n	80026bc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d07f      	beq.n	80026aa <I2C_MasterReceive_RXNE+0x176>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d002      	beq.n	80025b6 <I2C_MasterReceive_RXNE+0x82>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d179      	bne.n	80026aa <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f001 fb68 	bl	8003c8c <I2C_WaitOnSTOPRequestThroughIT>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d14c      	bne.n	800265c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025e0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	d10a      	bne.n	8002632 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fdbd 	bl	80021aa <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002630:	e044      	b.n	80026bc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b08      	cmp	r3, #8
 800263e:	d002      	beq.n	8002646 <I2C_MasterReceive_RXNE+0x112>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b20      	cmp	r3, #32
 8002644:	d103      	bne.n	800264e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
 800264c:	e002      	b.n	8002654 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2212      	movs	r2, #18
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff fd6e 	bl	8002136 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800265a:	e02f      	b.n	80026bc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800266a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fd8a 	bl	80021bc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026a8:	e008      	b.n	80026bc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b8:	605a      	str	r2, [r3, #4]
}
 80026ba:	e7ff      	b.n	80026bc <I2C_MasterReceive_RXNE+0x188>
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d11b      	bne.n	8002714 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002712:	e0c4      	b.n	800289e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b03      	cmp	r3, #3
 800271c:	d129      	bne.n	8002772 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d00a      	beq.n	800274a <I2C_MasterReceive_BTF+0x86>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d007      	beq.n	800274a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002748:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002770:	e095      	b.n	800289e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d17d      	bne.n	8002878 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d002      	beq.n	8002788 <I2C_MasterReceive_BTF+0xc4>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b10      	cmp	r3, #16
 8002786:	d108      	bne.n	800279a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e016      	b.n	80027c8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d002      	beq.n	80027a6 <I2C_MasterReceive_BTF+0xe2>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d108      	bne.n	80027b8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e007      	b.n	80027c8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002822:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d10a      	bne.n	800284e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fcaf 	bl	80021aa <HAL_I2C_MemRxCpltCallback>
}
 800284c:	e027      	b.n	800289e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d002      	beq.n	8002862 <I2C_MasterReceive_BTF+0x19e>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b20      	cmp	r3, #32
 8002860:	d103      	bne.n	800286a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
 8002868:	e002      	b.n	8002870 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2212      	movs	r2, #18
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff fc60 	bl	8002136 <HAL_I2C_MasterRxCpltCallback>
}
 8002876:	e012      	b.n	800289e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d117      	bne.n	80028ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80028d4:	e067      	b.n	80029a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	611a      	str	r2, [r3, #16]
}
 80028e8:	e05d      	b.n	80029a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028f2:	d133      	bne.n	800295c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b21      	cmp	r3, #33	; 0x21
 80028fe:	d109      	bne.n	8002914 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002910:	611a      	str	r2, [r3, #16]
 8002912:	e008      	b.n	8002926 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	b2da      	uxtb	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <I2C_Master_SB+0x92>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	d108      	bne.n	800294a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	2b00      	cmp	r3, #0
 800293e:	d032      	beq.n	80029a6 <I2C_Master_SB+0x100>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	d02d      	beq.n	80029a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002958:	605a      	str	r2, [r3, #4]
}
 800295a:	e024      	b.n	80029a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10e      	bne.n	8002982 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	b29b      	uxth	r3, r3
 800296a:	11db      	asrs	r3, r3, #7
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 0306 	and.w	r3, r3, #6
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f063 030f 	orn	r3, r3, #15
 8002978:	b2da      	uxtb	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	611a      	str	r2, [r3, #16]
}
 8002980:	e011      	b.n	80029a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	2b01      	cmp	r3, #1
 8002988:	d10d      	bne.n	80029a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	b29b      	uxth	r3, r3
 8002990:	11db      	asrs	r3, r3, #7
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f003 0306 	and.w	r3, r3, #6
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f063 030e 	orn	r3, r3, #14
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	611a      	str	r2, [r3, #16]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <I2C_Master_ADD10+0x26>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d108      	bne.n	80029e8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <I2C_Master_ADD10+0x48>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f6:	605a      	str	r2, [r3, #4]
  }
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b091      	sub	sp, #68	; 0x44
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b22      	cmp	r3, #34	; 0x22
 8002a2a:	f040 8174 	bne.w	8002d16 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10f      	bne.n	8002a56 <I2C_Master_ADDR+0x54>
 8002a36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a3a:	2b40      	cmp	r3, #64	; 0x40
 8002a3c:	d10b      	bne.n	8002a56 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	e16b      	b.n	8002d2e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d11d      	bne.n	8002a9a <I2C_Master_ADDR+0x98>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a66:	d118      	bne.n	8002a9a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a8c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	651a      	str	r2, [r3, #80]	; 0x50
 8002a98:	e149      	b.n	8002d2e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d113      	bne.n	8002acc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e120      	b.n	8002d0e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	f040 808a 	bne.w	8002bec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ada:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ade:	d137      	bne.n	8002b50 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002afe:	d113      	bne.n	8002b28 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	e0f2      	b.n	8002d0e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	623b      	str	r3, [r7, #32]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e0de      	b.n	8002d0e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d02e      	beq.n	8002bb4 <I2C_Master_ADDR+0x1b2>
 8002b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d02b      	beq.n	8002bb4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5e:	2b12      	cmp	r3, #18
 8002b60:	d102      	bne.n	8002b68 <I2C_Master_ADDR+0x166>
 8002b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d125      	bne.n	8002bb4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d00e      	beq.n	8002b8c <I2C_Master_ADDR+0x18a>
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d00b      	beq.n	8002b8c <I2C_Master_ADDR+0x18a>
 8002b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d008      	beq.n	8002b8c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e007      	b.n	8002b9c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b9a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	61fb      	str	r3, [r7, #28]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	e0ac      	b.n	8002d0e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	61bb      	str	r3, [r7, #24]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e090      	b.n	8002d0e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d158      	bne.n	8002ca8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d021      	beq.n	8002c40 <I2C_Master_ADDR+0x23e>
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d01e      	beq.n	8002c40 <I2C_Master_ADDR+0x23e>
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d01b      	beq.n	8002c40 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c16:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e012      	b.n	8002c66 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c4e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c50:	2300      	movs	r3, #0
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c74:	d14b      	bne.n	8002d0e <I2C_Master_ADDR+0x30c>
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c7c:	d00b      	beq.n	8002c96 <I2C_Master_ADDR+0x294>
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d008      	beq.n	8002c96 <I2C_Master_ADDR+0x294>
 8002c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d005      	beq.n	8002c96 <I2C_Master_ADDR+0x294>
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d002      	beq.n	8002c96 <I2C_Master_ADDR+0x294>
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d13b      	bne.n	8002d0e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	e032      	b.n	8002d0e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc6:	d117      	bne.n	8002cf8 <I2C_Master_ADDR+0x2f6>
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cce:	d00b      	beq.n	8002ce8 <I2C_Master_ADDR+0x2e6>
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d008      	beq.n	8002ce8 <I2C_Master_ADDR+0x2e6>
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d005      	beq.n	8002ce8 <I2C_Master_ADDR+0x2e6>
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d002      	beq.n	8002ce8 <I2C_Master_ADDR+0x2e6>
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d107      	bne.n	8002cf8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cf6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d14:	e00b      	b.n	8002d2e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
}
 8002d2c:	e7ff      	b.n	8002d2e <I2C_Master_ADDR+0x32c>
 8002d2e:	bf00      	nop
 8002d30:	3744      	adds	r7, #68	; 0x44
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d02b      	beq.n	8002daa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d114      	bne.n	8002daa <I2C_SlaveTransmit_TXE+0x72>
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b29      	cmp	r3, #41	; 0x29
 8002d84:	d111      	bne.n	8002daa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d94:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2221      	movs	r2, #33	; 0x21
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2228      	movs	r2, #40	; 0x28
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff f9cf 	bl	8002148 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d011      	beq.n	8002de8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e00:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d02c      	beq.n	8002e66 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d114      	bne.n	8002e66 <I2C_SlaveReceive_RXNE+0x74>
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e40:	d111      	bne.n	8002e66 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e50:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2222      	movs	r2, #34	; 0x22
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2228      	movs	r2, #40	; 0x28
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff f97a 	bl	800215a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d012      	beq.n	8002ea6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002eca:	2b28      	cmp	r3, #40	; 0x28
 8002ecc:	d125      	bne.n	8002f1a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002edc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	81bb      	strh	r3, [r7, #12]
 8002efc:	e002      	b.n	8002f04 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f0c:	89ba      	ldrh	r2, [r7, #12]
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	4619      	mov	r1, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff f92a 	bl	800216c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f18:	e00e      	b.n	8002f38 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f5e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f9c:	d172      	bne.n	8003084 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b22      	cmp	r3, #34	; 0x22
 8002fa2:	d002      	beq.n	8002faa <I2C_Slave_STOPF+0x6a>
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8002fa8:	d135      	bne.n	8003016 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f043 0204 	orr.w	r2, r3, #4
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fdc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe f804 	bl	8000ff0 <HAL_DMA_GetState>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d049      	beq.n	8003082 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	4a69      	ldr	r2, [pc, #420]	; (8003198 <I2C_Slave_STOPF+0x258>)
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fe7a 	bl	8000cf4 <HAL_DMA_Abort_IT>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d03d      	beq.n	8003082 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003010:	4610      	mov	r0, r2
 8003012:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003014:	e035      	b.n	8003082 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f043 0204 	orr.w	r2, r3, #4
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003048:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd ffce 	bl	8000ff0 <HAL_DMA_GetState>
 8003054:	4603      	mov	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	d014      	beq.n	8003084 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	4a4e      	ldr	r2, [pc, #312]	; (8003198 <I2C_Slave_STOPF+0x258>)
 8003060:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fe44 	bl	8000cf4 <HAL_DMA_Abort_IT>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800307c:	4610      	mov	r0, r2
 800307e:	4798      	blx	r3
 8003080:	e000      	b.n	8003084 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003082:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d03e      	beq.n	800310c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b04      	cmp	r3, #4
 800309a:	d112      	bne.n	80030c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d112      	bne.n	80030f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f043 0204 	orr.w	r2, r3, #4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f8b7 	bl	8003288 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800311a:	e039      	b.n	8003190 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b2a      	cmp	r3, #42	; 0x2a
 8003120:	d109      	bne.n	8003136 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2228      	movs	r2, #40	; 0x28
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff f812 	bl	800215a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b28      	cmp	r3, #40	; 0x28
 8003140:	d111      	bne.n	8003166 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <I2C_Slave_STOPF+0x25c>)
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff f811 	bl	8002186 <HAL_I2C_ListenCpltCallback>
}
 8003164:	e014      	b.n	8003190 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	2b22      	cmp	r3, #34	; 0x22
 800316c:	d002      	beq.n	8003174 <I2C_Slave_STOPF+0x234>
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	2b22      	cmp	r3, #34	; 0x22
 8003172:	d10d      	bne.n	8003190 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe ffe5 	bl	800215a <HAL_I2C_SlaveRxCpltCallback>
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	080037e9 	.word	0x080037e9
 800319c:	ffff0000 	.word	0xffff0000

080031a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d002      	beq.n	80031c2 <I2C_Slave_AF+0x22>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d129      	bne.n	8003216 <I2C_Slave_AF+0x76>
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b28      	cmp	r3, #40	; 0x28
 80031c6:	d126      	bne.n	8003216 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a2e      	ldr	r2, [pc, #184]	; (8003284 <I2C_Slave_AF+0xe4>)
 80031cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe ffb9 	bl	8002186 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003214:	e031      	b.n	800327a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b21      	cmp	r3, #33	; 0x21
 800321a:	d129      	bne.n	8003270 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a19      	ldr	r2, [pc, #100]	; (8003284 <I2C_Slave_AF+0xe4>)
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2221      	movs	r2, #33	; 0x21
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003246:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003250:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003260:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe f9e2 	bl	800162c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7fe ff6d 	bl	8002148 <HAL_I2C_SlaveTxCpltCallback>
}
 800326e:	e004      	b.n	800327a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003278:	615a      	str	r2, [r3, #20]
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	ffff0000 	.word	0xffff0000

08003288 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800329e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80032a0:	7bbb      	ldrb	r3, [r7, #14]
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d002      	beq.n	80032ac <I2C_ITError+0x24>
 80032a6:	7bbb      	ldrb	r3, [r7, #14]
 80032a8:	2b40      	cmp	r3, #64	; 0x40
 80032aa:	d10a      	bne.n	80032c2 <I2C_ITError+0x3a>
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b22      	cmp	r3, #34	; 0x22
 80032b0:	d107      	bne.n	80032c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032c8:	2b28      	cmp	r3, #40	; 0x28
 80032ca:	d107      	bne.n	80032dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2228      	movs	r2, #40	; 0x28
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032da:	e015      	b.n	8003308 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ea:	d00a      	beq.n	8003302 <I2C_ITError+0x7a>
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b60      	cmp	r3, #96	; 0x60
 80032f0:	d007      	beq.n	8003302 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003316:	d162      	bne.n	80033de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003326:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d020      	beq.n	8003378 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	4a6a      	ldr	r2, [pc, #424]	; (80034e4 <I2C_ITError+0x25c>)
 800333c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd fcd6 	bl	8000cf4 <HAL_DMA_Abort_IT>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8089 	beq.w	8003462 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003372:	4610      	mov	r0, r2
 8003374:	4798      	blx	r3
 8003376:	e074      	b.n	8003462 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	4a59      	ldr	r2, [pc, #356]	; (80034e4 <I2C_ITError+0x25c>)
 800337e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd fcb5 	bl	8000cf4 <HAL_DMA_Abort_IT>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d068      	beq.n	8003462 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b40      	cmp	r3, #64	; 0x40
 800339c:	d10b      	bne.n	80033b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033d8:	4610      	mov	r0, r2
 80033da:	4798      	blx	r3
 80033dc:	e041      	b.n	8003462 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b60      	cmp	r3, #96	; 0x60
 80033e8:	d125      	bne.n	8003436 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	d10b      	bne.n	800341e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe fecd 	bl	80021ce <HAL_I2C_AbortCpltCallback>
 8003434:	e015      	b.n	8003462 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d10b      	bne.n	800345c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7fe fead 	bl	80021bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10e      	bne.n	8003490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003482:	2b00      	cmp	r3, #0
 8003484:	d104      	bne.n	8003490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800349e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d113      	bne.n	80034dc <I2C_ITError+0x254>
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b28      	cmp	r3, #40	; 0x28
 80034b8:	d110      	bne.n	80034dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <I2C_ITError+0x260>)
 80034be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fe55 	bl	8002186 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	080037e9 	.word	0x080037e9
 80034e8:	ffff0000 	.word	0xffff0000

080034ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	4608      	mov	r0, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	817b      	strh	r3, [r7, #10]
 80034fe:	460b      	mov	r3, r1
 8003500:	813b      	strh	r3, [r7, #8]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003514:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	2200      	movs	r2, #0
 800351e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fa08 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00d      	beq.n	800354a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353c:	d103      	bne.n	8003546 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e05f      	b.n	800360a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800354a:	897b      	ldrh	r3, [r7, #10]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003558:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	492d      	ldr	r1, [pc, #180]	; (8003614 <I2C_RequestMemoryWrite+0x128>)
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fa63 	bl	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e04c      	b.n	800360a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003588:	6a39      	ldr	r1, [r7, #32]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 faee 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00d      	beq.n	80035b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b04      	cmp	r3, #4
 800359c:	d107      	bne.n	80035ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e02b      	b.n	800360a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035b8:	893b      	ldrh	r3, [r7, #8]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	611a      	str	r2, [r3, #16]
 80035c2:	e021      	b.n	8003608 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035c4:	893b      	ldrh	r3, [r7, #8]
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	6a39      	ldr	r1, [r7, #32]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fac8 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d107      	bne.n	80035fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e005      	b.n	800360a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035fe:	893b      	ldrh	r3, [r7, #8]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	00010002 	.word	0x00010002

08003618 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	4608      	mov	r0, r1
 8003622:	4611      	mov	r1, r2
 8003624:	461a      	mov	r2, r3
 8003626:	4603      	mov	r3, r0
 8003628:	817b      	strh	r3, [r7, #10]
 800362a:	460b      	mov	r3, r1
 800362c:	813b      	strh	r3, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003640:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	2200      	movs	r2, #0
 800365a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f96a 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00d      	beq.n	8003686 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003678:	d103      	bne.n	8003682 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003680:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0aa      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003686:	897b      	ldrh	r3, [r7, #10]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003694:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	6a3a      	ldr	r2, [r7, #32]
 800369a:	4952      	ldr	r1, [pc, #328]	; (80037e4 <I2C_RequestMemoryRead+0x1cc>)
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f9c5 	bl	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e097      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c4:	6a39      	ldr	r1, [r7, #32]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fa50 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00d      	beq.n	80036ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d107      	bne.n	80036ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e076      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f4:	893b      	ldrh	r3, [r7, #8]
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	611a      	str	r2, [r3, #16]
 80036fe:	e021      	b.n	8003744 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003700:	893b      	ldrh	r3, [r7, #8]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	b29b      	uxth	r3, r3
 8003706:	b2da      	uxtb	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800370e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003710:	6a39      	ldr	r1, [r7, #32]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fa2a 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00d      	beq.n	800373a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	2b04      	cmp	r3, #4
 8003724:	d107      	bne.n	8003736 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003734:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e050      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800373a:	893b      	ldrh	r3, [r7, #8]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003746:	6a39      	ldr	r1, [r7, #32]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fa0f 	bl	8003b6c <I2C_WaitOnTXEFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	2b04      	cmp	r3, #4
 800375a:	d107      	bne.n	800376c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e035      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800377e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	2200      	movs	r2, #0
 8003788:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f8d3 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a6:	d103      	bne.n	80037b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e013      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037b4:	897b      	ldrh	r3, [r7, #10]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	6a3a      	ldr	r2, [r7, #32]
 80037c8:	4906      	ldr	r1, [pc, #24]	; (80037e4 <I2C_RequestMemoryRead+0x1cc>)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f92e 	bl	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	00010002 	.word	0x00010002

080037e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003802:	4b4b      	ldr	r3, [pc, #300]	; (8003930 <I2C_DMAAbort+0x148>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	08db      	lsrs	r3, r3, #3
 8003808:	4a4a      	ldr	r2, [pc, #296]	; (8003934 <I2C_DMAAbort+0x14c>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0a1a      	lsrs	r2, r3, #8
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	00da      	lsls	r2, r3, #3
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800382e:	e00a      	b.n	8003846 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3b01      	subs	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003844:	d0ea      	beq.n	800381c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003852:	2200      	movs	r2, #0
 8003854:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	2200      	movs	r2, #0
 8003864:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003874:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003888:	2200      	movs	r2, #0
 800388a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	2200      	movs	r2, #0
 800389a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b60      	cmp	r3, #96	; 0x60
 80038b6:	d10e      	bne.n	80038d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2200      	movs	r2, #0
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038ce:	6978      	ldr	r0, [r7, #20]
 80038d0:	f7fe fc7d 	bl	80021ce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038d4:	e027      	b.n	8003926 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038dc:	2b28      	cmp	r3, #40	; 0x28
 80038de:	d117      	bne.n	8003910 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2228      	movs	r2, #40	; 0x28
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800390e:	e007      	b.n	8003920 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003920:	6978      	ldr	r0, [r7, #20]
 8003922:	f7fe fc4b 	bl	80021bc <HAL_I2C_ErrorCallback>
}
 8003926:	bf00      	nop
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000000 	.word	0x20000000
 8003934:	14f8b589 	.word	0x14f8b589

08003938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003948:	e048      	b.n	80039dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d044      	beq.n	80039dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7fc fffd 	bl	8000950 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d139      	bne.n	80039dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	0c1b      	lsrs	r3, r3, #16
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d10d      	bne.n	800398e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	43da      	mvns	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4013      	ands	r3, r2
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	e00c      	b.n	80039a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	43da      	mvns	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d116      	bne.n	80039dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	f043 0220 	orr.w	r2, r3, #32
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e023      	b.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d10d      	bne.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0xca>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	43da      	mvns	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4013      	ands	r3, r2
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf0c      	ite	eq
 80039f8:	2301      	moveq	r3, #1
 80039fa:	2300      	movne	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	e00c      	b.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d093      	beq.n	800394a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a3a:	e071      	b.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4a:	d123      	bne.n	8003a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	f043 0204 	orr.w	r2, r3, #4
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e067      	b.n	8003b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9a:	d041      	beq.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9c:	f7fc ff58 	bl	8000950 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d302      	bcc.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d136      	bne.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d10c      	bne.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bf14      	ite	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	2300      	moveq	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	e00b      	b.n	8003aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	43da      	mvns	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf14      	ite	ne
 8003ae8:	2301      	movne	r3, #1
 8003aea:	2300      	moveq	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e021      	b.n	8003b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d10c      	bne.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	43da      	mvns	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e00b      	b.n	8003b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bf14      	ite	ne
 8003b56:	2301      	movne	r3, #1
 8003b58:	2300      	moveq	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f47f af6d 	bne.w	8003a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b78:	e034      	b.n	8003be4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f915 	bl	8003daa <I2C_IsAcknowledgeFailed>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e034      	b.n	8003bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d028      	beq.n	8003be4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b92:	f7fc fedd 	bl	8000950 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d302      	bcc.n	8003ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d11d      	bne.n	8003be4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b80      	cmp	r3, #128	; 0x80
 8003bb4:	d016      	beq.n	8003be4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e007      	b.n	8003bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b80      	cmp	r3, #128	; 0x80
 8003bf0:	d1c3      	bne.n	8003b7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c08:	e034      	b.n	8003c74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f8cd 	bl	8003daa <I2C_IsAcknowledgeFailed>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e034      	b.n	8003c84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d028      	beq.n	8003c74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7fc fe95 	bl	8000950 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d11d      	bne.n	8003c74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d016      	beq.n	8003c74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e007      	b.n	8003c84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d1c3      	bne.n	8003c0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	08db      	lsrs	r3, r3, #3
 8003c9e:	4a13      	ldr	r2, [pc, #76]	; (8003cec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	0a1a      	lsrs	r2, r3, #8
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d107      	bne.n	8003cca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f043 0220 	orr.w	r2, r3, #32
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e008      	b.n	8003cdc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd8:	d0e9      	beq.n	8003cae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000000 	.word	0x20000000
 8003cec:	14f8b589 	.word	0x14f8b589

08003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cfc:	e049      	b.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d119      	bne.n	8003d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0210 	mvn.w	r2, #16
 8003d14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e030      	b.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d40:	f7fc fe06 	bl	8000950 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d302      	bcc.n	8003d56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d11d      	bne.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d016      	beq.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f043 0220 	orr.w	r2, r3, #32
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e007      	b.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d1ae      	bne.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc0:	d11b      	bne.n	8003dfa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f043 0204 	orr.w	r2, r3, #4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e16:	d103      	bne.n	8003e20 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e1e:	e007      	b.n	8003e30 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e28:	d102      	bne.n	8003e30 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e272      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8087 	beq.w	8003f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e5c:	4b92      	ldr	r3, [pc, #584]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d00c      	beq.n	8003e82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e68:	4b8f      	ldr	r3, [pc, #572]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d112      	bne.n	8003e9a <HAL_RCC_OscConfig+0x5e>
 8003e74:	4b8c      	ldr	r3, [pc, #560]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d10b      	bne.n	8003e9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e82:	4b89      	ldr	r3, [pc, #548]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d06c      	beq.n	8003f68 <HAL_RCC_OscConfig+0x12c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d168      	bne.n	8003f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e24c      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x76>
 8003ea4:	4b80      	ldr	r3, [pc, #512]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a7f      	ldr	r2, [pc, #508]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	e02e      	b.n	8003f10 <HAL_RCC_OscConfig+0xd4>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x98>
 8003eba:	4b7b      	ldr	r3, [pc, #492]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a7a      	ldr	r2, [pc, #488]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	4b78      	ldr	r3, [pc, #480]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a77      	ldr	r2, [pc, #476]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e01d      	b.n	8003f10 <HAL_RCC_OscConfig+0xd4>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0xbc>
 8003ede:	4b72      	ldr	r3, [pc, #456]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a71      	ldr	r2, [pc, #452]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b6f      	ldr	r3, [pc, #444]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a6e      	ldr	r2, [pc, #440]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCC_OscConfig+0xd4>
 8003ef8:	4b6b      	ldr	r3, [pc, #428]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a6a      	ldr	r2, [pc, #424]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	4b68      	ldr	r3, [pc, #416]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a67      	ldr	r2, [pc, #412]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d013      	beq.n	8003f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fc fd1a 	bl	8000950 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f20:	f7fc fd16 	bl	8000950 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e200      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0xe4>
 8003f3e:	e014      	b.n	8003f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fc fd06 	bl	8000950 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fc fd02 	bl	8000950 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e1ec      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5a:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x10c>
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d063      	beq.n	800403e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f76:	4b4c      	ldr	r3, [pc, #304]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f82:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d11c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x18c>
 8003f8e:	4b46      	ldr	r3, [pc, #280]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d116      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9a:	4b43      	ldr	r3, [pc, #268]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x176>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d001      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e1c0      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb2:	4b3d      	ldr	r3, [pc, #244]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4939      	ldr	r1, [pc, #228]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc6:	e03a      	b.n	800403e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd0:	4b36      	ldr	r3, [pc, #216]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fc fcbb 	bl	8000950 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fde:	f7fc fcb7 	bl	8000950 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e1a1      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff0:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4927      	ldr	r1, [pc, #156]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	600b      	str	r3, [r1, #0]
 8004010:	e015      	b.n	800403e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004012:	4b26      	ldr	r3, [pc, #152]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fc fc9a 	bl	8000950 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004020:	f7fc fc96 	bl	8000950 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e180      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d03a      	beq.n	80040c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d019      	beq.n	8004086 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004052:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004058:	f7fc fc7a 	bl	8000950 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004060:	f7fc fc76 	bl	8000950 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e160      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800407e:	2001      	movs	r0, #1
 8004080:	f000 fad0 	bl	8004624 <RCC_Delay>
 8004084:	e01c      	b.n	80040c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408c:	f7fc fc60 	bl	8000950 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004092:	e00f      	b.n	80040b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004094:	f7fc fc5c 	bl	8000950 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d908      	bls.n	80040b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e146      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	42420000 	.word	0x42420000
 80040b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b4:	4b92      	ldr	r3, [pc, #584]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e9      	bne.n	8004094 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80a6 	beq.w	800421a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ce:	2300      	movs	r3, #0
 80040d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040d2:	4b8b      	ldr	r3, [pc, #556]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10d      	bne.n	80040fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040de:	4b88      	ldr	r3, [pc, #544]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4a87      	ldr	r2, [pc, #540]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e8:	61d3      	str	r3, [r2, #28]
 80040ea:	4b85      	ldr	r3, [pc, #532]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f6:	2301      	movs	r3, #1
 80040f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fa:	4b82      	ldr	r3, [pc, #520]	; (8004304 <HAL_RCC_OscConfig+0x4c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d118      	bne.n	8004138 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004106:	4b7f      	ldr	r3, [pc, #508]	; (8004304 <HAL_RCC_OscConfig+0x4c8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a7e      	ldr	r2, [pc, #504]	; (8004304 <HAL_RCC_OscConfig+0x4c8>)
 800410c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004112:	f7fc fc1d 	bl	8000950 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411a:	f7fc fc19 	bl	8000950 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b64      	cmp	r3, #100	; 0x64
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e103      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	4b75      	ldr	r3, [pc, #468]	; (8004304 <HAL_RCC_OscConfig+0x4c8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x312>
 8004140:	4b6f      	ldr	r3, [pc, #444]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	4a6e      	ldr	r2, [pc, #440]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6213      	str	r3, [r2, #32]
 800414c:	e02d      	b.n	80041aa <HAL_RCC_OscConfig+0x36e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0x334>
 8004156:	4b6a      	ldr	r3, [pc, #424]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4a69      	ldr	r2, [pc, #420]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6213      	str	r3, [r2, #32]
 8004162:	4b67      	ldr	r3, [pc, #412]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	4a66      	ldr	r2, [pc, #408]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	6213      	str	r3, [r2, #32]
 800416e:	e01c      	b.n	80041aa <HAL_RCC_OscConfig+0x36e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b05      	cmp	r3, #5
 8004176:	d10c      	bne.n	8004192 <HAL_RCC_OscConfig+0x356>
 8004178:	4b61      	ldr	r3, [pc, #388]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	4a60      	ldr	r2, [pc, #384]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800417e:	f043 0304 	orr.w	r3, r3, #4
 8004182:	6213      	str	r3, [r2, #32]
 8004184:	4b5e      	ldr	r3, [pc, #376]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	4a5d      	ldr	r2, [pc, #372]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6213      	str	r3, [r2, #32]
 8004190:	e00b      	b.n	80041aa <HAL_RCC_OscConfig+0x36e>
 8004192:	4b5b      	ldr	r3, [pc, #364]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4a5a      	ldr	r2, [pc, #360]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	6213      	str	r3, [r2, #32]
 800419e:	4b58      	ldr	r3, [pc, #352]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4a57      	ldr	r2, [pc, #348]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80041a4:	f023 0304 	bic.w	r3, r3, #4
 80041a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d015      	beq.n	80041de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b2:	f7fc fbcd 	bl	8000950 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b8:	e00a      	b.n	80041d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ba:	f7fc fbc9 	bl	8000950 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e0b1      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d0:	4b4b      	ldr	r3, [pc, #300]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ee      	beq.n	80041ba <HAL_RCC_OscConfig+0x37e>
 80041dc:	e014      	b.n	8004208 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041de:	f7fc fbb7 	bl	8000950 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fc fbb3 	bl	8000950 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e09b      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fc:	4b40      	ldr	r3, [pc, #256]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ee      	bne.n	80041e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d105      	bne.n	800421a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420e:	4b3c      	ldr	r3, [pc, #240]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	4a3b      	ldr	r2, [pc, #236]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004218:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8087 	beq.w	8004332 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004224:	4b36      	ldr	r3, [pc, #216]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b08      	cmp	r3, #8
 800422e:	d061      	beq.n	80042f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d146      	bne.n	80042c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004238:	4b33      	ldr	r3, [pc, #204]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fc fb87 	bl	8000950 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004246:	f7fc fb83 	bl	8000950 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e06d      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004258:	4b29      	ldr	r3, [pc, #164]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426c:	d108      	bne.n	8004280 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800426e:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	4921      	ldr	r1, [pc, #132]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004280:	4b1f      	ldr	r3, [pc, #124]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a19      	ldr	r1, [r3, #32]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	430b      	orrs	r3, r1
 8004292:	491b      	ldr	r1, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429e:	f7fc fb57 	bl	8000950 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a6:	f7fc fb53 	bl	8000950 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e03d      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042b8:	4b11      	ldr	r3, [pc, #68]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x46a>
 80042c4:	e035      	b.n	8004332 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fc fb40 	bl	8000950 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d4:	f7fc fb3c 	bl	8000950 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e026      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x498>
 80042f2:	e01e      	b.n	8004332 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d107      	bne.n	800430c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e019      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
 8004300:	40021000 	.word	0x40021000
 8004304:	40007000 	.word	0x40007000
 8004308:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_OscConfig+0x500>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	429a      	cmp	r2, r3
 800431e:	d106      	bne.n	800432e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d001      	beq.n	8004332 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000

08004340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0d0      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004354:	4b6a      	ldr	r3, [pc, #424]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d910      	bls.n	8004384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b67      	ldr	r3, [pc, #412]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 0207 	bic.w	r2, r3, #7
 800436a:	4965      	ldr	r1, [pc, #404]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	4b63      	ldr	r3, [pc, #396]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0b8      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d020      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800439c:	4b59      	ldr	r3, [pc, #356]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4a58      	ldr	r2, [pc, #352]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b4:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a52      	ldr	r2, [pc, #328]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c0:	4b50      	ldr	r3, [pc, #320]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	494d      	ldr	r1, [pc, #308]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d040      	beq.n	8004460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d115      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e07f      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	4b41      	ldr	r3, [pc, #260]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e073      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440e:	4b3d      	ldr	r3, [pc, #244]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e06b      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441e:	4b39      	ldr	r3, [pc, #228]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f023 0203 	bic.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4936      	ldr	r1, [pc, #216]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	4313      	orrs	r3, r2
 800442e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004430:	f7fc fa8e 	bl	8000950 <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	e00a      	b.n	800444e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004438:	f7fc fa8a 	bl	8000950 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	; 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e053      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 020c 	and.w	r2, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	429a      	cmp	r2, r3
 800445e:	d1eb      	bne.n	8004438 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004460:	4b27      	ldr	r3, [pc, #156]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d210      	bcs.n	8004490 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 0207 	bic.w	r2, r3, #7
 8004476:	4922      	ldr	r1, [pc, #136]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e032      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4916      	ldr	r1, [pc, #88]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	490e      	ldr	r1, [pc, #56]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044ce:	f000 f821 	bl	8004514 <HAL_RCC_GetSysClockFreq>
 80044d2:	4602      	mov	r2, r0
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	490a      	ldr	r1, [pc, #40]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044e0:	5ccb      	ldrb	r3, [r1, r3]
 80044e2:	fa22 f303 	lsr.w	r3, r2, r3
 80044e6:	4a09      	ldr	r2, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1cc>)
 80044e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_RCC_ClockConfig+0x1d0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fc f9ec 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40022000 	.word	0x40022000
 8004504:	40021000 	.word	0x40021000
 8004508:	08008494 	.word	0x08008494
 800450c:	20000000 	.word	0x20000000
 8004510:	20000004 	.word	0x20000004

08004514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	2300      	movs	r3, #0
 8004528:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b04      	cmp	r3, #4
 800453c:	d002      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0x30>
 800453e:	2b08      	cmp	r3, #8
 8004540:	d003      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x36>
 8004542:	e027      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004544:	4b19      	ldr	r3, [pc, #100]	; (80045ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004546:	613b      	str	r3, [r7, #16]
      break;
 8004548:	e027      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	0c9b      	lsrs	r3, r3, #18
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d010      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	0c5b      	lsrs	r3, r3, #17
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	4a11      	ldr	r2, [pc, #68]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800456e:	5cd3      	ldrb	r3, [r2, r3]
 8004570:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004576:	fb03 f202 	mul.w	r2, r3, r2
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e004      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004588:	fb02 f303 	mul.w	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	613b      	str	r3, [r7, #16]
      break;
 8004592:	e002      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_GetSysClockFreq+0xa8>)
 8004596:	613b      	str	r3, [r7, #16]
      break;
 8004598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459a:	693b      	ldr	r3, [r7, #16]
}
 800459c:	4618      	mov	r0, r3
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	00f42400 	.word	0x00f42400
 80045b0:	080084ac 	.word	0x080084ac
 80045b4:	080084bc 	.word	0x080084bc
 80045b8:	003d0900 	.word	0x003d0900
 80045bc:	007a1200 	.word	0x007a1200

080045c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c4:	4b02      	ldr	r3, [pc, #8]	; (80045d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	20000000 	.word	0x20000000

080045d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045d8:	f7ff fff2 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4903      	ldr	r1, [pc, #12]	; (80045f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021000 	.word	0x40021000
 80045f8:	080084a4 	.word	0x080084a4

080045fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004600:	f7ff ffde 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	0adb      	lsrs	r3, r3, #11
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4903      	ldr	r1, [pc, #12]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000
 8004620:	080084a4 	.word	0x080084a4

08004624 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <RCC_Delay+0x34>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a0a      	ldr	r2, [pc, #40]	; (800465c <RCC_Delay+0x38>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	0a5b      	lsrs	r3, r3, #9
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	fb02 f303 	mul.w	r3, r2, r3
 800463e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004640:	bf00      	nop
  }
  while (Delay --);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1e5a      	subs	r2, r3, #1
 8004646:	60fa      	str	r2, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f9      	bne.n	8004640 <RCC_Delay+0x1c>
}
 800464c:	bf00      	nop
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	20000000 	.word	0x20000000
 800465c:	10624dd3 	.word	0x10624dd3

08004660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e042      	b.n	80046f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc f892 	bl	80007b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2224      	movs	r2, #36	; 0x24
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fd63 	bl	8005170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	; 0x28
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b20      	cmp	r3, #32
 800471e:	d175      	bne.n	800480c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_UART_Transmit+0x2c>
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e06e      	b.n	800480e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2221      	movs	r2, #33	; 0x21
 800473a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800473e:	f7fc f907 	bl	8000950 <HAL_GetTick>
 8004742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	88fa      	ldrh	r2, [r7, #6]
 8004748:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004758:	d108      	bne.n	800476c <HAL_UART_Transmit+0x6c>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	e003      	b.n	8004774 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004774:	e02e      	b.n	80047d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2200      	movs	r2, #0
 800477e:	2180      	movs	r1, #128	; 0x80
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 fb01 	bl	8004d88 <UART_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e03a      	b.n	800480e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	3302      	adds	r3, #2
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	e007      	b.n	80047c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	781a      	ldrb	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	3301      	adds	r3, #1
 80047c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1cb      	bne.n	8004776 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2140      	movs	r1, #64	; 0x40
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 facd 	bl	8004d88 <UART_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e006      	b.n	800480e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	e000      	b.n	800480e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800480c:	2302      	movs	r3, #2
  }
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b0ba      	sub	sp, #232	; 0xe8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800483e:	2300      	movs	r3, #0
 8004840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004844:	2300      	movs	r3, #0
 8004846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800484a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004856:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10f      	bne.n	800487e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800485e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d009      	beq.n	800487e <HAL_UART_IRQHandler+0x66>
 800486a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fbbc 	bl	8004ff4 <UART_Receive_IT>
      return;
 800487c:	e25b      	b.n	8004d36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800487e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 80de 	beq.w	8004a44 <HAL_UART_IRQHandler+0x22c>
 8004888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d106      	bne.n	80048a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004898:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80d1 	beq.w	8004a44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <HAL_UART_IRQHandler+0xae>
 80048ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_UART_IRQHandler+0xd2>
 80048d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	f043 0202 	orr.w	r2, r3, #2
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <HAL_UART_IRQHandler+0xf6>
 80048f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	f043 0204 	orr.w	r2, r3, #4
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800490e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d011      	beq.n	800493e <HAL_UART_IRQHandler+0x126>
 800491a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d105      	bne.n	8004932 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	f043 0208 	orr.w	r2, r3, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 81f2 	beq.w	8004d2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_UART_IRQHandler+0x14e>
 8004954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fb47 	bl	8004ff4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d103      	bne.n	8004992 <HAL_UART_IRQHandler+0x17a>
 800498a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d04f      	beq.n	8004a32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fa51 	bl	8004e3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d041      	beq.n	8004a2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3314      	adds	r3, #20
 80049ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3314      	adds	r3, #20
 80049ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1d9      	bne.n	80049a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d013      	beq.n	8004a22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fe:	4a7e      	ldr	r2, [pc, #504]	; (8004bf8 <HAL_UART_IRQHandler+0x3e0>)
 8004a00:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fc f974 	bl	8000cf4 <HAL_DMA_Abort_IT>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d016      	beq.n	8004a40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a20:	e00e      	b.n	8004a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f99c 	bl	8004d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	e00a      	b.n	8004a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f998 	bl	8004d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a30:	e006      	b.n	8004a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f994 	bl	8004d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004a3e:	e175      	b.n	8004d2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a40:	bf00      	nop
    return;
 8004a42:	e173      	b.n	8004d2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	f040 814f 	bne.w	8004cec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 8148 	beq.w	8004cec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 8141 	beq.w	8004cec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 80b6 	beq.w	8004bfc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8145 	beq.w	8004d30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	f080 813e 	bcs.w	8004d30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	f000 8088 	beq.w	8004bd8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	330c      	adds	r3, #12
 8004af0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004af4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004af8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1d9      	bne.n	8004ac8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b26:	f023 0301 	bic.w	r3, r3, #1
 8004b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3314      	adds	r3, #20
 8004b34:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b38:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e1      	bne.n	8004b14 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3314      	adds	r3, #20
 8004b70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b74:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e3      	bne.n	8004b50 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba8:	f023 0310 	bic.w	r3, r3, #16
 8004bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004bba:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bbc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e3      	bne.n	8004b96 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fc f852 	bl	8000c7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8bf 	bl	8004d72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bf4:	e09c      	b.n	8004d30 <HAL_UART_IRQHandler+0x518>
 8004bf6:	bf00      	nop
 8004bf8:	08004eff 	.word	0x08004eff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 808e 	beq.w	8004d34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8089 	beq.w	8004d34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	330c      	adds	r3, #12
 8004c28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	330c      	adds	r3, #12
 8004c42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c46:	647a      	str	r2, [r7, #68]	; 0x44
 8004c48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e3      	bne.n	8004c22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	623b      	str	r3, [r7, #32]
   return(result);
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c7e:	633a      	str	r2, [r7, #48]	; 0x30
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e3      	bne.n	8004c5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0310 	bic.w	r3, r3, #16
 8004cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004cc4:	61fa      	str	r2, [r7, #28]
 8004cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e3      	bne.n	8004ca0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f844 	bl	8004d72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cea:	e023      	b.n	8004d34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d009      	beq.n	8004d0c <HAL_UART_IRQHandler+0x4f4>
 8004cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f90e 	bl	8004f26 <UART_Transmit_IT>
    return;
 8004d0a:	e014      	b.n	8004d36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00e      	beq.n	8004d36 <HAL_UART_IRQHandler+0x51e>
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f94d 	bl	8004fc4 <UART_EndTransmit_IT>
    return;
 8004d2a:	e004      	b.n	8004d36 <HAL_UART_IRQHandler+0x51e>
    return;
 8004d2c:	bf00      	nop
 8004d2e:	e002      	b.n	8004d36 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d30:	bf00      	nop
 8004d32:	e000      	b.n	8004d36 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d34:	bf00      	nop
  }
}
 8004d36:	37e8      	adds	r7, #232	; 0xe8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr

08004d4e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr

08004d60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr

08004d72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d98:	e03b      	b.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d037      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da2:	f7fb fdd5 	bl	8000950 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	6a3a      	ldr	r2, [r7, #32]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d302      	bcc.n	8004db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e03a      	b.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d023      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b80      	cmp	r3, #128	; 0x80
 8004dce:	d020      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b40      	cmp	r3, #64	; 0x40
 8004dd4:	d01d      	beq.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d116      	bne.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f81d 	bl	8004e3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2208      	movs	r2, #8
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e00f      	b.n	8004e32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	bf0c      	ite	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	2300      	movne	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d0b4      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b095      	sub	sp, #84	; 0x54
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e62:	643a      	str	r2, [r7, #64]	; 0x40
 8004e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e5      	bne.n	8004e42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3314      	adds	r3, #20
 8004e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3314      	adds	r3, #20
 8004e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e5      	bne.n	8004e76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d119      	bne.n	8004ee6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f023 0310 	bic.w	r3, r3, #16
 8004ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed2:	61ba      	str	r2, [r7, #24]
 8004ed4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	6979      	ldr	r1, [r7, #20]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e5      	bne.n	8004eb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ef4:	bf00      	nop
 8004ef6:	3754      	adds	r7, #84	; 0x54
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr

08004efe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff ff21 	bl	8004d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f1e:	bf00      	nop
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b21      	cmp	r3, #33	; 0x21
 8004f38:	d13e      	bne.n	8004fb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f42:	d114      	bne.n	8004f6e <UART_Transmit_IT+0x48>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d110      	bne.n	8004f6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	1c9a      	adds	r2, r3, #2
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	621a      	str	r2, [r3, #32]
 8004f6c:	e008      	b.n	8004f80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	1c59      	adds	r1, r3, #1
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6211      	str	r1, [r2, #32]
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10f      	bne.n	8004fb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fa2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e000      	b.n	8004fba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
  }
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff fea9 	bl	8004d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08c      	sub	sp, #48	; 0x30
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b22      	cmp	r3, #34	; 0x22
 8005006:	f040 80ae 	bne.w	8005166 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005012:	d117      	bne.n	8005044 <UART_Receive_IT+0x50>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d113      	bne.n	8005044 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800501c:	2300      	movs	r3, #0
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	b29b      	uxth	r3, r3
 800502e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005032:	b29a      	uxth	r2, r3
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	1c9a      	adds	r2, r3, #2
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	629a      	str	r2, [r3, #40]	; 0x28
 8005042:	e026      	b.n	8005092 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800504a:	2300      	movs	r3, #0
 800504c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005056:	d007      	beq.n	8005068 <UART_Receive_IT+0x74>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <UART_Receive_IT+0x82>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	e008      	b.n	8005088 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005082:	b2da      	uxtb	r2, r3
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29b      	uxth	r3, r3
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	4619      	mov	r1, r3
 80050a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d15d      	bne.n	8005162 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0220 	bic.w	r2, r2, #32
 80050b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d135      	bne.n	8005158 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	613b      	str	r3, [r7, #16]
   return(result);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f023 0310 	bic.w	r3, r3, #16
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	330c      	adds	r3, #12
 8005110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005112:	623a      	str	r2, [r7, #32]
 8005114:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	69f9      	ldr	r1, [r7, #28]
 8005118:	6a3a      	ldr	r2, [r7, #32]
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e5      	bne.n	80050f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b10      	cmp	r3, #16
 8005132:	d10a      	bne.n	800514a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff fe0e 	bl	8004d72 <HAL_UARTEx_RxEventCallback>
 8005156:	e002      	b.n	800515e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff fdf8 	bl	8004d4e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	e002      	b.n	8005168 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	e000      	b.n	8005168 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005166:	2302      	movs	r3, #2
  }
}
 8005168:	4618      	mov	r0, r3
 800516a:	3730      	adds	r7, #48	; 0x30
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80051aa:	f023 030c 	bic.w	r3, r3, #12
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	430b      	orrs	r3, r1
 80051b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2c      	ldr	r2, [pc, #176]	; (8005284 <UART_SetConfig+0x114>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d103      	bne.n	80051e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051d8:	f7ff fa10 	bl	80045fc <HAL_RCC_GetPCLK2Freq>
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	e002      	b.n	80051e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051e0:	f7ff f9f8 	bl	80045d4 <HAL_RCC_GetPCLK1Freq>
 80051e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	009a      	lsls	r2, r3, #2
 80051f0:	441a      	add	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fc:	4a22      	ldr	r2, [pc, #136]	; (8005288 <UART_SetConfig+0x118>)
 80051fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	0119      	lsls	r1, r3, #4
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009a      	lsls	r2, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	fbb2 f2f3 	udiv	r2, r2, r3
 800521c:	4b1a      	ldr	r3, [pc, #104]	; (8005288 <UART_SetConfig+0x118>)
 800521e:	fba3 0302 	umull	r0, r3, r3, r2
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	2064      	movs	r0, #100	; 0x64
 8005226:	fb00 f303 	mul.w	r3, r0, r3
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	3332      	adds	r3, #50	; 0x32
 8005230:	4a15      	ldr	r2, [pc, #84]	; (8005288 <UART_SetConfig+0x118>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800523c:	4419      	add	r1, r3
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	009a      	lsls	r2, r3, #2
 8005248:	441a      	add	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	fbb2 f2f3 	udiv	r2, r2, r3
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <UART_SetConfig+0x118>)
 8005256:	fba3 0302 	umull	r0, r3, r3, r2
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	2064      	movs	r0, #100	; 0x64
 800525e:	fb00 f303 	mul.w	r3, r0, r3
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	3332      	adds	r3, #50	; 0x32
 8005268:	4a07      	ldr	r2, [pc, #28]	; (8005288 <UART_SetConfig+0x118>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	f003 020f 	and.w	r2, r3, #15
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	440a      	add	r2, r1
 800527a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40013800 	.word	0x40013800
 8005288:	51eb851f 	.word	0x51eb851f

0800528c <_ZN7FUSB302C1EhPFbhhhPhES2_PFvmE>:
class FUSB302 {
public:
  typedef bool (*I2CFunc)(const uint8_t deviceAddr, const uint8_t registerAdd, const uint8_t size, uint8_t *buf);
  typedef void (*DelayFunc)(uint32_t milliseconds);

  FUSB302(uint8_t address, I2CFunc read, I2CFunc write, DelayFunc delay) : DeviceAddress(address), I2CRead(read), I2CWrite(write), osDelay(delay){};
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	460b      	mov	r3, r1
 800529a:	72fb      	strb	r3, [r7, #11]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	7afa      	ldrb	r2, [r7, #11]
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	605a      	str	r2, [r3, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	609a      	str	r2, [r3, #8]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	60da      	str	r2, [r3, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <_ZN12PolicyEngineC1E7FUSB302PFmvEPFvmEPFvP6pd_msgbEPFbPKS5_S6_E>:
   * Create a Sink_Capabilities message for our current capabilities.
   */
  typedef void (*SinkCapabilityFunc)(pd_msg *cap, const bool isPD3);
  typedef uint32_t (*TimestampFunc)();
  typedef void (*DelayFunc)(uint32_t milliseconds);
  PolicyEngine(FUSB302 fusbStruct, TimestampFunc getTimestampF, DelayFunc delayFuncF, SinkCapabilityFunc sinkCapabilities, EvaluateCapabilityFunc evalFunc)
 80052c0:	b084      	sub	sp, #16
 80052c2:	b590      	push	{r4, r7, lr}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	f107 001c 	add.w	r0, r7, #28
 80052ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      : fusb(fusbStruct),                               //
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	461c      	mov	r4, r3
 80052d6:	f107 031c 	add.w	r3, r7, #28
 80052da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        getTimeStamp(getTimestampF),                    //
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e4:	611a      	str	r2, [r3, #16]
        pdbs_dpm_get_sink_capability(sinkCapabilities), //
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052ea:	615a      	str	r2, [r3, #20]
        pdbs_dpm_evaluate_capability(evalFunc),         //
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052f0:	619a      	str	r2, [r3, #24]
        osDelay(delayFuncF)                             //
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f6:	61da      	str	r2, [r3, #28]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	63da      	str	r2, [r3, #60]	; 0x3c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3344      	adds	r3, #68	; 0x44
 8005308:	2220      	movs	r2, #32
 800530a:	2100      	movs	r1, #0
 800530c:	4618      	mov	r0, r3
 800530e:	f002 f8bd 	bl	800748c <memset>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3364      	adds	r3, #100	; 0x64
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fa98 	bl	800584c <_ZN10ringbufferI6pd_msgLj4EEC1Ev>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	33f0      	adds	r3, #240	; 0xf0
 8005320:	2220      	movs	r2, #32
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f002 f8b1 	bl	800748c <memset>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005330:	2220      	movs	r2, #32
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f002 f8a9 	bl	800748c <memset>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2203      	movs	r2, #3
 800533e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  {
    hdr_template = PD_DATAROLE_UFP | PD_POWERROLE_SINK;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	85da      	strh	r2, [r3, #46]	; 0x2e
    _pps_index   = 0xFF;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	22ff      	movs	r2, #255	; 0xff
 800534c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  };
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800535c:	b004      	add	sp, #16
 800535e:	4770      	bx	lr

08005360 <_Z9irc_writehhhPh>:
#include <cstdio>
void pdbs_dpm_get_sink_capability(pd_msg *cap, const bool isPD3);
bool pdbs_dpm_evaluate_capability(const pd_msg *capabilities, pd_msg *request);

bool irc_write(const uint8_t deviceAddr, const uint8_t registerAdd,
		const uint8_t size, uint8_t *buf) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af04      	add	r7, sp, #16
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	4603      	mov	r3, r0
 800536a:	71fb      	strb	r3, [r7, #7]
 800536c:	460b      	mov	r3, r1
 800536e:	71bb      	strb	r3, [r7, #6]
 8005370:	4613      	mov	r3, r2
 8005372:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, deviceAddr, registerAdd,
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	b299      	uxth	r1, r3
 8005378:	79bb      	ldrb	r3, [r7, #6]
 800537a:	b29a      	uxth	r2, r3
 800537c:	797b      	ldrb	r3, [r7, #5]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005384:	9002      	str	r0, [sp, #8]
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	2301      	movs	r3, #1
 800538e:	4806      	ldr	r0, [pc, #24]	; (80053a8 <_Z9irc_writehhhPh+0x48>)
 8005390:	f7fc f960 	bl	8001654 <HAL_I2C_Mem_Write>
 8005394:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, buf, size, 500) == HAL_OK;
 8005396:	2b00      	cmp	r3, #0
 8005398:	bf0c      	ite	eq
 800539a:	2301      	moveq	r3, #1
 800539c:	2300      	movne	r3, #0
 800539e:	b2db      	uxtb	r3, r3
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	2000008c 	.word	0x2000008c

080053ac <_Z8irc_readhhhPh>:
bool irc_read(const uint8_t deviceAddr, const uint8_t registerAdd,
		const uint8_t size, uint8_t *buf) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af04      	add	r7, sp, #16
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4603      	mov	r3, r0
 80053b6:	71fb      	strb	r3, [r7, #7]
 80053b8:	460b      	mov	r3, r1
 80053ba:	71bb      	strb	r3, [r7, #6]
 80053bc:	4613      	mov	r3, r2
 80053be:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, deviceAddr, registerAdd,
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	b299      	uxth	r1, r3
 80053c4:	79bb      	ldrb	r3, [r7, #6]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	797b      	ldrb	r3, [r7, #5]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80053d0:	9002      	str	r0, [sp, #8]
 80053d2:	9301      	str	r3, [sp, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2301      	movs	r3, #1
 80053da:	4806      	ldr	r0, [pc, #24]	; (80053f4 <_Z8irc_readhhhPh+0x48>)
 80053dc:	f7fc fa34 	bl	8001848 <HAL_I2C_Mem_Read>
 80053e0:	4603      	mov	r3, r0
	I2C_MEMADD_SIZE_8BIT, buf, size, 500) == HAL_OK;
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	2000008c 	.word	0x2000008c

080053f8 <pd_user_main>:
FUSB302 fusb(FUSB302B_ADDR, irc_read, irc_write, HAL_Delay); // Create FUSB driver
PolicyEngine pe(fusb, HAL_GetTick, HAL_Delay, pdbs_dpm_get_sink_capability,
		pdbs_dpm_evaluate_capability);

volatile bool irqoccured = false;
void pd_user_main() {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0

	if (fusb.fusb_read_id() && fusb.fusb_setup()) {
 80053fc:	4822      	ldr	r0, [pc, #136]	; (8005488 <pd_user_main+0x90>)
 80053fe:	f000 fc9a 	bl	8005d36 <_ZNK7FUSB30212fusb_read_idEv>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <pd_user_main+0x20>
 8005408:	481f      	ldr	r0, [pc, #124]	; (8005488 <pd_user_main+0x90>)
 800540a:	f000 fb2f 	bl	8005a6c <_ZNK7FUSB30210fusb_setupEv>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <pd_user_main+0x20>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <pd_user_main+0x22>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d02e      	beq.n	800547c <pd_user_main+0x84>

		//FUSB detected, start code
		printf("FUSB Comms OK\r\n");
 800541e:	481b      	ldr	r0, [pc, #108]	; (800548c <pd_user_main+0x94>)
 8005420:	f001 ff54 	bl	80072cc <puts>
		irqoccured = true; //Force at least one read of the status regs at boot
 8005424:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <pd_user_main+0x98>)
 8005426:	2201      	movs	r2, #1
 8005428:	701a      	strb	r2, [r3, #0]
		for (;;) {
			printf(">Running thread \r\n");
 800542a:	481a      	ldr	r0, [pc, #104]	; (8005494 <pd_user_main+0x9c>)
 800542c:	f001 ff4e 	bl	80072cc <puts>
			while (pe.thread()) { //Iterate until its stable
 8005430:	bf00      	nop
 8005432:	4819      	ldr	r0, [pc, #100]	; (8005498 <pd_user_main+0xa0>)
 8005434:	f000 fde0 	bl	8005ff8 <_ZN12PolicyEngine6threadEv>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f9      	bne.n	8005432 <pd_user_main+0x3a>
			}
			printf(">Waiting for events \r\n");
 800543e:	4817      	ldr	r0, [pc, #92]	; (800549c <pd_user_main+0xa4>)
 8005440:	f001 ff44 	bl	80072cc <puts>
			while (irqoccured == false
 8005444:	e002      	b.n	800544c <pd_user_main+0x54>
					&& (HAL_GPIO_ReadPin(FUSB_IRQ_GPIO_Port, FUSB_IRQ_Pin)
							== GPIO_PIN_SET)) {
				HAL_Delay(3); // Must respond to messages < 20ms, so fast iteration or use an rtos to schedule
 8005446:	2003      	movs	r0, #3
 8005448:	f7fb fa8c 	bl	8000964 <HAL_Delay>
			while (irqoccured == false
 800544c:	4b10      	ldr	r3, [pc, #64]	; (8005490 <pd_user_main+0x98>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	b2db      	uxtb	r3, r3
					&& (HAL_GPIO_ReadPin(FUSB_IRQ_GPIO_Port, FUSB_IRQ_Pin)
 8005452:	2b00      	cmp	r3, #0
 8005454:	d108      	bne.n	8005468 <pd_user_main+0x70>
 8005456:	2120      	movs	r1, #32
 8005458:	4811      	ldr	r0, [pc, #68]	; (80054a0 <pd_user_main+0xa8>)
 800545a:	f7fb ff5b 	bl	8001314 <HAL_GPIO_ReadPin>
 800545e:	4603      	mov	r3, r0
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <pd_user_main+0x70>
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <pd_user_main+0x72>
 8005468:	2300      	movs	r3, #0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1eb      	bne.n	8005446 <pd_user_main+0x4e>
			}
			irqoccured = false;
 800546e:	4b08      	ldr	r3, [pc, #32]	; (8005490 <pd_user_main+0x98>)
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
			pe.IRQOccured();
 8005474:	4808      	ldr	r0, [pc, #32]	; (8005498 <pd_user_main+0xa0>)
 8005476:	f000 fd01 	bl	8005e7c <_ZN12PolicyEngine10IRQOccuredEv>
			printf(">Running thread \r\n");
 800547a:	e7d6      	b.n	800542a <pd_user_main+0x32>
		}
	} else {
		printf("FUSB Comms Failed\r\n");
 800547c:	4809      	ldr	r0, [pc, #36]	; (80054a4 <pd_user_main+0xac>)
 800547e:	f001 ff25 	bl	80072cc <puts>
	}
}
 8005482:	bf00      	nop
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	200001b8 	.word	0x200001b8
 800548c:	08007ff0 	.word	0x08007ff0
 8005490:	20000300 	.word	0x20000300
 8005494:	08008000 	.word	0x08008000
 8005498:	200001c8 	.word	0x200001c8
 800549c:	08008014 	.word	0x08008014
 80054a0:	40010c00 	.word	0x40010c00
 80054a4:	0800802c 	.word	0x0800802c

080054a8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	80fb      	strh	r3, [r7, #6]
	irqoccured = true;
 80054b2:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000300 	.word	0x20000300

080054c8 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_>:
/* The current draw when the output is disabled */
#define DPM_MIN_CURRENT PD_MA2PDI(100)

bool pdbs_dpm_evaluate_capability(const pd_msg *capabilities, pd_msg *request) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]

	/* Get the number of PDOs */
	uint8_t numobj = PD_NUMOBJ_GET(capabilities);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	885b      	ldrh	r3, [r3, #2]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	131b      	asrs	r3, r3, #12
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	767b      	strb	r3, [r7, #25]
	/* Get whether or not the power supply is constrained */

	/* Make sure we have configuration */
	/* Look at the PDOs to see if one matches our desires */
	// Look against USB_PD_Desired_Levels to select in order of preference
	uint8_t bestIndex = 0xFF;
 80054e2:	23ff      	movs	r3, #255	; 0xff
 80054e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int bestIndexVoltage = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	623b      	str	r3, [r7, #32]
	int bestIndexCurrent = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
	bool bestIsPPS = false;
 80054f0:	2300      	movs	r3, #0
 80054f2:	76fb      	strb	r3, [r7, #27]
	for (uint8_t i = 0; i < numobj; i++) {
 80054f4:	2300      	movs	r3, #0
 80054f6:	76bb      	strb	r3, [r7, #26]
 80054f8:	e08b      	b.n	8005612 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x14a>
		/* If we have a fixed PDO, its V equals our desired V, and its I is
		 * at least our desired I */
		if ((capabilities->obj[i] & PD_PDO_TYPE) == PD_PDO_TYPE_FIXED) {
 80054fa:	7ebb      	ldrb	r3, [r7, #26]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d12f      	bne.n	800556c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0xa4>
			// This is a fixed PDO entry
			// Evaluate if it can produve sufficient current based on the
			// tipResistance (ohms*10) V=I*R -> V/I => minimum resistance, if our tip
			// resistance is >= this then we can use this supply

			int voltage_mv = PD_PDV2MV(
 800550c:	7ebb      	ldrb	r3, [r7, #26]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	0a9b      	lsrs	r3, r3, #10
 8005518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800551c:	2232      	movs	r2, #50	; 0x32
 800551e:	fb02 f303 	mul.w	r3, r2, r3
 8005522:	613b      	str	r3, [r7, #16]
					PD_PDO_SRC_FIXED_VOLTAGE_GET(capabilities->obj[i])); // voltage in mV units
			int current_a_x100 = PD_PDO_SRC_FIXED_CURRENT_GET(
 8005524:	7ebb      	ldrb	r3, [r7, #26]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005532:	60fb      	str	r3, [r7, #12]
					capabilities->obj[i]);            // current in 10mA units
			printf("PD slot %d -> %d mV; %d mA\r\n", i, voltage_mv,
 8005534:	7eb9      	ldrb	r1, [r7, #26]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4874      	ldr	r0, [pc, #464]	; (8005714 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x24c>)
 8005544:	f001 fe5c 	bl	8007200 <iprintf>
					current_a_x100 * 10);
			if (voltage_mv > bestIndexVoltage || bestIndex == 0xFF) {
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	429a      	cmp	r2, r3
 800554e:	dc03      	bgt.n	8005558 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x90>
 8005550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005554:	2bff      	cmp	r3, #255	; 0xff
 8005556:	d159      	bne.n	800560c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x144>
				// Higher voltage and valid, select this instead
				bestIndex = i;
 8005558:	7ebb      	ldrb	r3, [r7, #26]
 800555a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bestIndexVoltage = voltage_mv;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	623b      	str	r3, [r7, #32]
				bestIndexCurrent = current_a_x100;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	61fb      	str	r3, [r7, #28]
				bestIsPPS = false;
 8005566:	2300      	movs	r3, #0
 8005568:	76fb      	strb	r3, [r7, #27]
 800556a:	e04f      	b.n	800560c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x144>
			}
		} else if ((capabilities->obj[i] & PD_PDO_TYPE) == PD_PDO_TYPE_AUGMENTED
 800556c:	7ebb      	ldrb	r3, [r7, #26]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800557a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800557e:	d145      	bne.n	800560c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x144>
				&& (capabilities->obj[i] & PD_APDO_TYPE) == PD_APDO_TYPE_PPS) {
 8005580:	7ebb      	ldrb	r3, [r7, #26]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d13c      	bne.n	800560c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x144>
			// If this is a PPS slot, calculate the max voltage in the PPS range that
			// can we be used and maintain
			uint16_t max_voltage = PD_PAV2MV(
 8005592:	7ebb      	ldrb	r3, [r7, #26]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	0c5b      	lsrs	r3, r3, #17
 800559e:	b29b      	uxth	r3, r3
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	0092      	lsls	r2, r2, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	461a      	mov	r2, r3
 80055ac:	0091      	lsls	r1, r2, #2
 80055ae:	461a      	mov	r2, r3
 80055b0:	460b      	mov	r3, r1
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	82fb      	strh	r3, [r7, #22]
					PD_APDO_PPS_MAX_VOLTAGE_GET(capabilities->obj[i]));
			// uint16_t min_voltage =
			// PD_PAV2MV(PD_APDO_PPS_MIN_VOLTAGE_GET(capabilities->obj[i]));
			uint16_t max_current = PD_PAI2CA(
 80055b8:	7ebb      	ldrb	r3, [r7, #26]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	0092      	lsls	r2, r2, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	82bb      	strh	r3, [r7, #20]
					PD_APDO_PPS_CURRENT_GET(capabilities->obj[i])); // max current in 10mA units
			printf("PD PDO slot %d -> %d mV; %d mA\r\n", i, max_voltage,
 80055d4:	7eb9      	ldrb	r1, [r7, #26]
 80055d6:	8af8      	ldrh	r0, [r7, #22]
					max_current * 10);
 80055d8:	8aba      	ldrh	r2, [r7, #20]
			printf("PD PDO slot %d -> %d mV; %d mA\r\n", i, max_voltage,
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	4602      	mov	r2, r0
 80055e4:	484c      	ldr	r0, [pc, #304]	; (8005718 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x250>)
 80055e6:	f001 fe0b 	bl	8007200 <iprintf>
			// Using the current and tip resistance, calculate the ideal max voltage
			// if this is range, then we will work with this voltage
			// if this is not in range; then max_voltage can be safely selected
			if (max_voltage > bestIndexVoltage || bestIndex == 0xFF) {
 80055ea:	8afb      	ldrh	r3, [r7, #22]
 80055ec:	6a3a      	ldr	r2, [r7, #32]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	db03      	blt.n	80055fa <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x132>
 80055f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055f6:	2bff      	cmp	r3, #255	; 0xff
 80055f8:	d108      	bne.n	800560c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x144>
				bestIndex = i;
 80055fa:	7ebb      	ldrb	r3, [r7, #26]
 80055fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bestIndexVoltage = max_voltage;
 8005600:	8afb      	ldrh	r3, [r7, #22]
 8005602:	623b      	str	r3, [r7, #32]
				bestIndexCurrent = max_current;
 8005604:	8abb      	ldrh	r3, [r7, #20]
 8005606:	61fb      	str	r3, [r7, #28]
				bestIsPPS = true;
 8005608:	2301      	movs	r3, #1
 800560a:	76fb      	strb	r3, [r7, #27]
	for (uint8_t i = 0; i < numobj; i++) {
 800560c:	7ebb      	ldrb	r3, [r7, #26]
 800560e:	3301      	adds	r3, #1
 8005610:	76bb      	strb	r3, [r7, #26]
 8005612:	7eba      	ldrb	r2, [r7, #26]
 8005614:	7e7b      	ldrb	r3, [r7, #25]
 8005616:	429a      	cmp	r2, r3
 8005618:	f4ff af6f 	bcc.w	80054fa <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x32>
			}
		}
	}

	if (bestIndex != 0xFF) {
 800561c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005620:	2bff      	cmp	r3, #255	; 0xff
 8005622:	d053      	beq.n	80056cc <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x204>
		printf("Found desired capability at index  %d, %d mV, %d mA\r\n",
 8005624:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	6a3a      	ldr	r2, [r7, #32]
 8005634:	4839      	ldr	r0, [pc, #228]	; (800571c <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x254>)
 8005636:	f001 fde3 	bl	8007200 <iprintf>
				(int) bestIndex, bestIndexVoltage, bestIndexCurrent * 10);

		/* We got what we wanted, so build a request for that */
		request->hdr = PD_MSGTYPE_REQUEST | PD_NUMOBJ(1);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2200      	movs	r2, #0
 800563e:	f042 0202 	orr.w	r2, r2, #2
 8005642:	709a      	strb	r2, [r3, #2]
 8005644:	2200      	movs	r2, #0
 8005646:	f042 0210 	orr.w	r2, r2, #16
 800564a:	70da      	strb	r2, [r3, #3]
		if (bestIsPPS) {
 800564c:	7efb      	ldrb	r3, [r7, #27]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d021      	beq.n	8005696 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x1ce>
			request->obj[0] =
					PD_RDO_PROG_CURRENT_SET(
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	3304      	adds	r3, #4
 8005656:	4a32      	ldr	r2, [pc, #200]	; (8005720 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x258>)
 8005658:	fb82 1203 	smull	r1, r2, r2, r3
 800565c:	1052      	asrs	r2, r2, #1
 800565e:	17db      	asrs	r3, r3, #31
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
							PD_CA2PAI(bestIndexCurrent)) | PD_RDO_PROG_VOLTAGE_SET(PD_MV2PRV(bestIndexVoltage)) | PD_RDO_NO_USB_SUSPEND | PD_RDO_OBJPOS_SET(bestIndex + 1);
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	492d      	ldr	r1, [pc, #180]	; (8005720 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x258>)
 800566a:	fb81 0103 	smull	r0, r1, r1, r3
 800566e:	10c9      	asrs	r1, r1, #3
 8005670:	17db      	asrs	r3, r3, #31
 8005672:	1acb      	subs	r3, r1, r3
 8005674:	0259      	lsls	r1, r3, #9
 8005676:	4b2b      	ldr	r3, [pc, #172]	; (8005724 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x25c>)
 8005678:	400b      	ands	r3, r1
 800567a:	4313      	orrs	r3, r2
 800567c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005684:	3301      	adds	r3, #1
 8005686:	071b      	lsls	r3, r3, #28
 8005688:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800568c:	4313      	orrs	r3, r2
 800568e:	461a      	mov	r2, r3
			request->obj[0] =
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	605a      	str	r2, [r3, #4]
 8005694:	e013      	b.n	80056be <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x1f6>
		} else {
			request->obj[0] =
					PD_RDO_FV_MAX_CURRENT_SET(
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f3c3 0209 	ubfx	r2, r3, #0, #10
							bestIndexCurrent) | PD_RDO_FV_CURRENT_SET(bestIndexCurrent) | PD_RDO_NO_USB_SUSPEND | PD_RDO_OBJPOS_SET(bestIndex + 1);
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	0299      	lsls	r1, r3, #10
 80056a0:	4b21      	ldr	r3, [pc, #132]	; (8005728 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x260>)
 80056a2:	400b      	ands	r3, r1
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80056aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056ae:	3301      	adds	r3, #1
 80056b0:	071b      	lsls	r3, r3, #28
 80056b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80056b6:	4313      	orrs	r3, r2
 80056b8:	461a      	mov	r2, r3
			request->obj[0] =
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	605a      	str	r2, [r3, #4]
		}
		// USB Data
		request->obj[0] |= PD_RDO_USB_COMMS;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	605a      	str	r2, [r3, #4]
 80056ca:	e01d      	b.n	8005708 <_Z28pdbs_dpm_evaluate_capabilityPK6pd_msgPS_+0x240>
	} else {
		/* Nothing matched (or no configuration), so get 5 V at low current */
		request->hdr = PD_MSGTYPE_REQUEST | PD_NUMOBJ(1);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f042 0202 	orr.w	r2, r2, #2
 80056d4:	709a      	strb	r2, [r3, #2]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f042 0210 	orr.w	r2, r2, #16
 80056dc:	70da      	strb	r2, [r3, #3]
		request->obj[0] =
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f042 020a 	orr.w	r2, r2, #10
 80056e6:	711a      	strb	r2, [r3, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80056ee:	715a      	strb	r2, [r3, #5]
 80056f0:	2200      	movs	r2, #0
 80056f2:	719a      	strb	r2, [r3, #6]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f042 0211 	orr.w	r2, r2, #17
 80056fa:	71da      	strb	r2, [r3, #7]
		 * mismatch. */
		if (false /*TODO: Check if you have already negotiated*/) {
			request->obj[0] |= PD_RDO_CAP_MISMATCH;
		}
		// USB Data
		request->obj[0] |= PD_RDO_USB_COMMS;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	605a      	str	r2, [r3, #4]
	}
	// Even if we didnt match, we return true as we would still like to handshake
	// on 5V at the minimum
	return true;
 8005708:	2301      	movs	r3, #1
}
 800570a:	4618      	mov	r0, r3
 800570c:	3728      	adds	r7, #40	; 0x28
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	08008040 	.word	0x08008040
 8005718:	08008060 	.word	0x08008060
 800571c:	08008084 	.word	0x08008084
 8005720:	66666667 	.word	0x66666667
 8005724:	000ffe00 	.word	0x000ffe00
 8005728:	000ffc00 	.word	0x000ffc00

0800572c <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb>:

void pdbs_dpm_get_sink_capability(pd_msg *cap, const bool isPD3) {
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
	/* Keep track of how many PDOs we've added */
	int numobj = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]

	// Must always have a PDO object for vSafe5V, indicate the bare minimum power required
	/* Minimum current, 5 V, and higher capability. */
	cap->obj[numobj++] =
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	60fa      	str	r2, [r7, #12]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	2200      	movs	r2, #0
 800574a:	f042 020a 	orr.w	r2, r2, #10
 800574e:	711a      	strb	r2, [r3, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f062 026f 	orn	r2, r2, #111	; 0x6f
 8005756:	715a      	strb	r2, [r3, #5]
 8005758:	2200      	movs	r2, #0
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	719a      	strb	r2, [r3, #6]
 8005760:	2200      	movs	r2, #0
 8005762:	71da      	strb	r2, [r3, #7]
					| PD_PDO_SNK_FIXED_VOLTAGE_SET(
							PD_MV2PDV(5000)) | PD_PDO_SNK_FIXED_CURRENT_SET(DPM_MIN_CURRENT);

	if (true) { // If requesting more than 5V
		/* Get the current we want */
		uint16_t voltage = 20 * 1000; // in mv => 20V
 8005764:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005768:	817b      	strh	r3, [r7, #10]
		uint16_t current = 2 * 100;   // In centi-amps => 2A
 800576a:	23c8      	movs	r3, #200	; 0xc8
 800576c:	813b      	strh	r3, [r7, #8]

		/* Add a PDO for the desired power. */
		cap->obj[numobj++] =
				PD_PDO_TYPE_FIXED
						| PD_PDO_SNK_FIXED_VOLTAGE_SET(
 800576e:	897b      	ldrh	r3, [r7, #10]
 8005770:	4a33      	ldr	r2, [pc, #204]	; (8005840 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x114>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	091b      	lsrs	r3, r3, #4
 8005778:	b29b      	uxth	r3, r3
 800577a:	029b      	lsls	r3, r3, #10
 800577c:	461a      	mov	r2, r3
 800577e:	4b31      	ldr	r3, [pc, #196]	; (8005844 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x118>)
 8005780:	4013      	ands	r3, r2
								PD_MV2PDV(voltage)) | PD_PDO_SNK_FIXED_CURRENT_SET(current);
 8005782:	893a      	ldrh	r2, [r7, #8]
 8005784:	f3c2 0109 	ubfx	r1, r2, #0, #10
		cap->obj[numobj++] =
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	1c50      	adds	r0, r2, #1
 800578c:	60f8      	str	r0, [r7, #12]
								PD_MV2PDV(voltage)) | PD_PDO_SNK_FIXED_CURRENT_SET(current);
 800578e:	4319      	orrs	r1, r3
		cap->obj[numobj++] =
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	0093      	lsls	r3, r2, #2
 8005794:	4403      	add	r3, r0
 8005796:	6059      	str	r1, [r3, #4]

		/* If we want more than 5 V, set the Higher Capability flag */
		if (PD_MV2PDV(voltage) != PD_MV2PDV(5000)) {
 8005798:	897b      	ldrh	r3, [r7, #10]
 800579a:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 800579e:	3b08      	subs	r3, #8
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b31      	cmp	r3, #49	; 0x31
 80057a4:	d905      	bls.n	80057b2 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x86>
			cap->obj[0] |= PD_PDO_SNK_FIXED_HIGHER_CAP;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	605a      	str	r2, [r3, #4]
		}
		/* If we're using PD 3.0, add a PPS APDO for our desired voltage */
		if (isPD3) {
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d025      	beq.n	8005804 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0xd8>
			cap->obj[numobj++] =
					PD_PDO_TYPE_AUGMENTED | PD_APDO_TYPE_PPS
							| PD_APDO_PPS_MAX_VOLTAGE_SET(
 80057b8:	897b      	ldrh	r3, [r7, #10]
 80057ba:	4a21      	ldr	r2, [pc, #132]	; (8005840 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x114>)
 80057bc:	fba2 2303 	umull	r2, r3, r2, r3
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	045b      	lsls	r3, r3, #17
 80057c6:	f003 72ff 	and.w	r2, r3, #33423360	; 0x1fe0000
									PD_MV2PAV(voltage)) | PD_APDO_PPS_MIN_VOLTAGE_SET(PD_MV2PAV(voltage)) | PD_APDO_PPS_CURRENT_SET(PD_CA2PAI(current));
 80057ca:	897b      	ldrh	r3, [r7, #10]
 80057cc:	491c      	ldr	r1, [pc, #112]	; (8005840 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x114>)
 80057ce:	fba1 1303 	umull	r1, r3, r1, r3
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	b29b      	uxth	r3, r3
 80057da:	431a      	orrs	r2, r3
 80057dc:	893b      	ldrh	r3, [r7, #8]
 80057de:	3304      	adds	r3, #4
 80057e0:	4919      	ldr	r1, [pc, #100]	; (8005848 <_Z28pdbs_dpm_get_sink_capabilityP6pd_msgb+0x11c>)
 80057e2:	fb81 0103 	smull	r0, r1, r1, r3
 80057e6:	1049      	asrs	r1, r1, #1
 80057e8:	17db      	asrs	r3, r3, #31
 80057ea:	1acb      	subs	r3, r1, r3
 80057ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f0:	431a      	orrs	r2, r3
			cap->obj[numobj++] =
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1c59      	adds	r1, r3, #1
 80057f6:	60f9      	str	r1, [r7, #12]
									PD_MV2PAV(voltage)) | PD_APDO_PPS_MIN_VOLTAGE_SET(PD_MV2PAV(voltage)) | PD_APDO_PPS_CURRENT_SET(PD_CA2PAI(current));
 80057f8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
			cap->obj[numobj++] =
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	605a      	str	r2, [r3, #4]
		}
	}
	/* Set the USB communications capable flag. */
	cap->obj[0] |= PD_PDO_SNK_FIXED_USB_COMMS;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	605a      	str	r2, [r3, #4]
	// if this device is unconstrained, set the flag
	cap->obj[0] |= PD_PDO_SNK_FIXED_UNCONSTRAINED;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	605a      	str	r2, [r3, #4]

	/* Set the Sink_Capabilities message header */
	cap->hdr = PD_MSGTYPE_SINK_CAPABILITIES | PD_NUMOBJ(numobj);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	031b      	lsls	r3, r3, #12
 8005820:	b21b      	sxth	r3, r3
 8005822:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005826:	b21b      	sxth	r3, r3
 8005828:	f043 0304 	orr.w	r3, r3, #4
 800582c:	b21b      	sxth	r3, r3
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	805a      	strh	r2, [r3, #2]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	51eb851f 	.word	0x51eb851f
 8005844:	000ffc00 	.word	0x000ffc00
 8005848:	66666667 	.word	0x66666667

0800584c <_ZN10ringbufferI6pd_msgLj4EEC1Ev>:
/*
 * create a trivial ringbuffer with space for up to size elements.
 */
template <typename T, size_t size> class ringbuffer {
public:
  explicit ringbuffer() : begin(0), end(0), wrap(false) {}
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <_Z41__static_initialization_and_destruction_0ii>:
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af06      	add	r7, sp, #24
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d11b      	bne.n	80058c0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800588e:	4293      	cmp	r3, r2
 8005890:	d116      	bne.n	80058c0 <_Z41__static_initialization_and_destruction_0ii+0x48>
FUSB302 fusb(FUSB302B_ADDR, irc_read, irc_write, HAL_Delay); // Create FUSB driver
 8005892:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8005898:	4a0d      	ldr	r2, [pc, #52]	; (80058d0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800589a:	2144      	movs	r1, #68	; 0x44
 800589c:	480d      	ldr	r0, [pc, #52]	; (80058d4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800589e:	f7ff fcf5 	bl	800528c <_ZN7FUSB302C1EhPFbhhhPhES2_PFvmE>
		pdbs_dpm_evaluate_capability);
 80058a2:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80058a4:	4a0c      	ldr	r2, [pc, #48]	; (80058d8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80058a6:	9204      	str	r2, [sp, #16]
 80058a8:	4a0c      	ldr	r2, [pc, #48]	; (80058dc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80058aa:	9203      	str	r2, [sp, #12]
 80058ac:	4a06      	ldr	r2, [pc, #24]	; (80058c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80058ae:	9202      	str	r2, [sp, #8]
 80058b0:	4a0b      	ldr	r2, [pc, #44]	; (80058e0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80058b2:	9201      	str	r2, [sp, #4]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	9200      	str	r2, [sp, #0]
 80058b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058ba:	480a      	ldr	r0, [pc, #40]	; (80058e4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80058bc:	f7ff fd00 	bl	80052c0 <_ZN12PolicyEngineC1E7FUSB302PFmvEPFvmEPFvP6pd_msgbEPFbPKS5_S6_E>
}
 80058c0:	bf00      	nop
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	08000965 	.word	0x08000965
 80058cc:	08005361 	.word	0x08005361
 80058d0:	080053ad 	.word	0x080053ad
 80058d4:	200001b8 	.word	0x200001b8
 80058d8:	080054c9 	.word	0x080054c9
 80058dc:	0800572d 	.word	0x0800572d
 80058e0:	08000951 	.word	0x08000951
 80058e4:	200001c8 	.word	0x200001c8

080058e8 <_GLOBAL__sub_I__Z9irc_writehhhPh>:
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058f0:	2001      	movs	r0, #1
 80058f2:	f7ff ffc1 	bl	8005878 <_Z41__static_initialization_and_destruction_0ii>
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg>:
#include "stdio.h"
#endif

uint8_t fusb_read_byte(uint8_t addr);
bool fusb_write_byte(uint8_t addr, uint8_t byte);
void FUSB302::fusb_send_message(const pd_msg *msg) const {
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
	static const uint8_t eop_seq[4] = { FUSB_FIFO_TX_JAM_CRC, FUSB_FIFO_TX_EOP,
	FUSB_FIFO_TX_TXOFF, FUSB_FIFO_TX_TXON };

	/* Get the length of the message: a two-octet header plus NUMOBJ four-octet
	 * data objects */
	uint8_t msg_len = 2 + 4 * PD_NUMOBJ_GET(msg);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	885b      	ldrh	r3, [r3, #2]
 8005906:	b29b      	uxth	r3, r3
 8005908:	131b      	asrs	r3, r3, #12
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	b2db      	uxtb	r3, r3
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	b2db      	uxtb	r3, r3
 8005916:	3302      	adds	r3, #2
 8005918:	73fb      	strb	r3, [r7, #15]

	/* Set the number of bytes to be transmitted in the packet */
	sop_seq[4] = FUSB_FIFO_TX_PACKSYM | msg_len;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005920:	b2da      	uxtb	r2, r3
 8005922:	4b20      	ldr	r3, [pc, #128]	; (80059a4 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0xac>)
 8005924:	711a      	strb	r2, [r3, #4]

	/* Write all three parts of the message to the TX FIFO */
	bool result = I2CWrite(DeviceAddress, FUSB_FIFOS, 5, sop_seq);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689c      	ldr	r4, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	7818      	ldrb	r0, [r3, #0]
 800592e:	4b1d      	ldr	r3, [pc, #116]	; (80059a4 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0xac>)
 8005930:	2205      	movs	r2, #5
 8005932:	2143      	movs	r1, #67	; 0x43
 8005934:	47a0      	blx	r4
 8005936:	4603      	mov	r3, r0
 8005938:	73bb      	strb	r3, [r7, #14]
	if (!result) {
 800593a:	7bbb      	ldrb	r3, [r7, #14]
 800593c:	f083 0301 	eor.w	r3, r3, #1
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0x54>
#ifdef PD_DEBUG_OUTPUT
		printf("I2CWrite failed 1\r\n");
 8005946:	4818      	ldr	r0, [pc, #96]	; (80059a8 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0xb0>)
 8005948:	f001 fcc0 	bl	80072cc <puts>
#endif
	}
	result = I2CWrite(DeviceAddress, FUSB_FIFOS, msg_len,
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689c      	ldr	r4, [r3, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	7818      	ldrb	r0, [r3, #0]
			(uint8_t*) msg->bytes);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	3302      	adds	r3, #2
	result = I2CWrite(DeviceAddress, FUSB_FIFOS, msg_len,
 8005958:	7bfa      	ldrb	r2, [r7, #15]
 800595a:	2143      	movs	r1, #67	; 0x43
 800595c:	47a0      	blx	r4
 800595e:	4603      	mov	r3, r0
 8005960:	73bb      	strb	r3, [r7, #14]
	if (!result) {
 8005962:	7bbb      	ldrb	r3, [r7, #14]
 8005964:	f083 0301 	eor.w	r3, r3, #1
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0x7c>
#ifdef PD_DEBUG_OUTPUT
		printf("I2CWrite failed 2\r\n");
 800596e:	480f      	ldr	r0, [pc, #60]	; (80059ac <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0xb4>)
 8005970:	f001 fcac 	bl	80072cc <puts>
#endif
	}

	result = I2CWrite(DeviceAddress, FUSB_FIFOS, 4, (uint8_t*) eop_seq);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689c      	ldr	r4, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	7818      	ldrb	r0, [r3, #0]
 800597c:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0xb8>)
 800597e:	2204      	movs	r2, #4
 8005980:	2143      	movs	r1, #67	; 0x43
 8005982:	47a0      	blx	r4
 8005984:	4603      	mov	r3, r0
 8005986:	73bb      	strb	r3, [r7, #14]
	if (!result) {
 8005988:	7bbb      	ldrb	r3, [r7, #14]
 800598a:	f083 0301 	eor.w	r3, r3, #1
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0xa2>
#ifdef PD_DEBUG_OUTPUT
		printf("I2CWrite failed 3\r\n");
 8005994:	4807      	ldr	r0, [pc, #28]	; (80059b4 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg+0xbc>)
 8005996:	f001 fc99 	bl	80072cc <puts>
#endif
	}

}
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd90      	pop	{r4, r7, pc}
 80059a2:	bf00      	nop
 80059a4:	2000000c 	.word	0x2000000c
 80059a8:	080080bc 	.word	0x080080bc
 80059ac:	080080d0 	.word	0x080080d0
 80059b0:	080084c0 	.word	0x080084c0
 80059b4:	080080e4 	.word	0x080080e4

080059b8 <_ZNK7FUSB30215fusb_rx_pendingEv>:

bool FUSB302::fusb_rx_pending() const {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	return (fusb_read_byte(FUSB_STATUS1) & FUSB_STATUS1_RX_EMPTY)
 80059c0:	2141      	movs	r1, #65	; 0x41
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f9dd 	bl	8005d82 <_ZNK7FUSB30214fusb_read_byteEh>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f003 0320 	and.w	r3, r3, #32
			!= FUSB_STATUS1_RX_EMPTY;
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	bf14      	ite	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	2300      	moveq	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <_ZNK7FUSB30217fusb_read_messageEP6pd_msg>:

uint8_t FUSB302::fusb_read_message(pd_msg *msg) const {
 80059e0:	b590      	push	{r4, r7, lr}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]

	// Read the header. If its not a SOP we dont actually want it at all
	// But on some revisions of the fusb if you dont both pick them up and read
	// them out of the fifo, it gets stuck
	// TODO this might need a tad more testing about how many bites we throw out, but believe it is correct
	uint8_t returnValue = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]
	if ((fusb_read_byte(FUSB_FIFOS) & FUSB_FIFO_RX_TOKEN_BITS)
 80059ee:	2143      	movs	r1, #67	; 0x43
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f9c6 	bl	8005d82 <_ZNK7FUSB30214fusb_read_byteEh>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
			!= FUSB_FIFO_RX_SOP) {
 80059fc:	2be0      	cmp	r3, #224	; 0xe0
 80059fe:	bf14      	ite	ne
 8005a00:	2301      	movne	r3, #1
 8005a02:	2300      	moveq	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
	if ((fusb_read_byte(FUSB_FIFOS) & FUSB_FIFO_RX_TOKEN_BITS)
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <_ZNK7FUSB30217fusb_read_messageEP6pd_msg+0x2e>
		returnValue = 1;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	73fb      	strb	r3, [r7, #15]
	}

	/* Read the message header into msg */
	I2CRead(DeviceAddress, FUSB_FIFOS, 2, msg->bytes);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685c      	ldr	r4, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	7818      	ldrb	r0, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	3302      	adds	r3, #2
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	2143      	movs	r1, #67	; 0x43
 8005a1e:	47a0      	blx	r4
	/* Get the number of data objects */
	numobj = PD_NUMOBJ_GET(msg);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	885b      	ldrh	r3, [r3, #2]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	131b      	asrs	r3, r3, #12
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	73bb      	strb	r3, [r7, #14]
	/* If there is at least one data object, read the data objects */
	if (numobj > 0) {
 8005a30:	7bbb      	ldrb	r3, [r7, #14]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00b      	beq.n	8005a4e <_ZNK7FUSB30217fusb_read_messageEP6pd_msg+0x6e>
		I2CRead(DeviceAddress, FUSB_FIFOS, numobj * 4, msg->bytes + 2);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685c      	ldr	r4, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	7818      	ldrb	r0, [r3, #0]
 8005a3e:	7bbb      	ldrb	r3, [r7, #14]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	3302      	adds	r3, #2
 8005a48:	3302      	adds	r3, #2
 8005a4a:	2143      	movs	r1, #67	; 0x43
 8005a4c:	47a0      	blx	r4
	}
	/* Throw the CRC32 in the garbage, since the PHY already checked it. */
	I2CRead(DeviceAddress, FUSB_FIFOS, 4, garbage);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685c      	ldr	r4, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	7818      	ldrb	r0, [r3, #0]
 8005a56:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <_ZNK7FUSB30217fusb_read_messageEP6pd_msg+0x88>)
 8005a58:	2204      	movs	r2, #4
 8005a5a:	2143      	movs	r1, #67	; 0x43
 8005a5c:	47a0      	blx	r4

	return returnValue;
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd90      	pop	{r4, r7, pc}
 8005a68:	20000304 	.word	0x20000304

08005a6c <_ZNK7FUSB30210fusb_setupEv>:

	/* Send a hard reset */
	fusb_write_byte(FUSB_CONTROL3, 0x07 | FUSB_CONTROL3_SEND_HARD_RESET);
}

bool FUSB302::fusb_setup() const {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
	/* Fully reset the FUSB302B */
	if (!fusb_write_byte(FUSB_RESET, FUSB_RESET_SW_RES)) {
 8005a74:	2201      	movs	r2, #1
 8005a76:	210c      	movs	r1, #12
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f99e 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	f083 0301 	eor.w	r3, r3, #1
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <_ZNK7FUSB30210fusb_setupEv+0x22>
		return false;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e09a      	b.n	8005bc4 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	osDelay(10);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	200a      	movs	r0, #10
 8005a94:	4798      	blx	r3
	uint8_t tries = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
	while (!fusb_read_id()) {
 8005a9a:	e00b      	b.n	8005ab4 <_ZNK7FUSB30210fusb_setupEv+0x48>
		osDelay(10);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	200a      	movs	r0, #10
 8005aa2:	4798      	blx	r3
		tries++;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	73fb      	strb	r3, [r7, #15]
		if (tries > 5) {
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	2b05      	cmp	r3, #5
 8005aae:	d901      	bls.n	8005ab4 <_ZNK7FUSB30210fusb_setupEv+0x48>
			return false; // Welp :(
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e087      	b.n	8005bc4 <_ZNK7FUSB30210fusb_setupEv+0x158>
	while (!fusb_read_id()) {
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f93e 	bl	8005d36 <_ZNK7FUSB30212fusb_read_idEv>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f083 0301 	eor.w	r3, r3, #1
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1ea      	bne.n	8005a9c <_ZNK7FUSB30210fusb_setupEv+0x30>
		}
	}

	/* Turn on all power */
	if (!fusb_write_byte(FUSB_POWER, 0x0F)) {
 8005ac6:	220f      	movs	r2, #15
 8005ac8:	210b      	movs	r1, #11
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f975 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f083 0301 	eor.w	r3, r3, #1
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <_ZNK7FUSB30210fusb_setupEv+0x74>
		return false;
 8005adc:	2300      	movs	r3, #0
 8005ade:	e071      	b.n	8005bc4 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}

	/* Set interrupt masks */
	// Setting to 0 so interrupts are allowed
	if (!fusb_write_byte(FUSB_MASK1, 0x00)) {
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	210a      	movs	r1, #10
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f968 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f083 0301 	eor.w	r3, r3, #1
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <_ZNK7FUSB30210fusb_setupEv+0x8e>
		return false;
 8005af6:	2300      	movs	r3, #0
 8005af8:	e064      	b.n	8005bc4 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	if (!fusb_write_byte(FUSB_MASKA, 0x00)) {
 8005afa:	2200      	movs	r2, #0
 8005afc:	210e      	movs	r1, #14
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f95b 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f083 0301 	eor.w	r3, r3, #1
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <_ZNK7FUSB30210fusb_setupEv+0xa8>
		return false;
 8005b10:	2300      	movs	r3, #0
 8005b12:	e057      	b.n	8005bc4 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	if (!fusb_write_byte(FUSB_MASKB, 0x00)) {
 8005b14:	2200      	movs	r2, #0
 8005b16:	210f      	movs	r1, #15
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f94e 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f083 0301 	eor.w	r3, r3, #1
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <_ZNK7FUSB30210fusb_setupEv+0xc2>
		return false;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e04a      	b.n	8005bc4 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	if (!fusb_write_byte(FUSB_CONTROL0, 0b11 << 2)) {
 8005b2e:	220c      	movs	r2, #12
 8005b30:	2106      	movs	r1, #6
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f941 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f083 0301 	eor.w	r3, r3, #1
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <_ZNK7FUSB30210fusb_setupEv+0xdc>
		return false;
 8005b44:	2300      	movs	r3, #0
 8005b46:	e03d      	b.n	8005bc4 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}

	/* Enable automatic retransmission */
	if (!fusb_write_byte(FUSB_CONTROL3, 0x07)) {
 8005b48:	2207      	movs	r2, #7
 8005b4a:	2109      	movs	r1, #9
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f934 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f083 0301 	eor.w	r3, r3, #1
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <_ZNK7FUSB30210fusb_setupEv+0xf6>
		return false;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e030      	b.n	8005bc4 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	// set defaults
	if (!fusb_write_byte(FUSB_CONTROL2, 0x00)) {
 8005b62:	2200      	movs	r2, #0
 8005b64:	2108      	movs	r1, #8
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f927 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f083 0301 	eor.w	r3, r3, #1
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <_ZNK7FUSB30210fusb_setupEv+0x110>
		return false;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e023      	b.n	8005bc4 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	/* Flush the RX buffer */
	if (!fusb_write_byte(FUSB_CONTROL1, FUSB_CONTROL1_RX_FLUSH)) {
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	2107      	movs	r1, #7
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f91a 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f083 0301 	eor.w	r3, r3, #1
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <_ZNK7FUSB30210fusb_setupEv+0x12a>
		return false;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e016      	b.n	8005bc4 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}

	if (!runCCLineSelection()) {
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f818 	bl	8005bcc <_ZNK7FUSB30218runCCLineSelectionEv>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f083 0301 	eor.w	r3, r3, #1
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <_ZNK7FUSB30210fusb_setupEv+0x140>
		return false;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e00b      	b.n	8005bc4 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}
	if (!fusb_reset()) {
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f892 	bl	8005cd6 <_ZNK7FUSB30210fusb_resetEv>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f083 0301 	eor.w	r3, r3, #1
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <_ZNK7FUSB30210fusb_setupEv+0x156>
		return false;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e000      	b.n	8005bc4 <_ZNK7FUSB30210fusb_setupEv+0x158>
	}

	return true;
 8005bc2:	2301      	movs	r3, #1
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <_ZNK7FUSB30218runCCLineSelectionEv>:

bool FUSB302::runCCLineSelection() const {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]

	/* Measure CC1 */
	if (!fusb_write_byte(FUSB_SWITCHES0, 0x07)) {
 8005bd4:	2207      	movs	r2, #7
 8005bd6:	2102      	movs	r1, #2
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f8ee 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f083 0301 	eor.w	r3, r3, #1
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <_ZNK7FUSB30218runCCLineSelectionEv+0x22>
		return false;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e05d      	b.n	8005caa <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
	}
	osDelay(10);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	200a      	movs	r0, #10
 8005bf4:	4798      	blx	r3
	uint8_t cc1 = fusb_read_byte(FUSB_STATUS0) & FUSB_STATUS0_BC_LVL;
 8005bf6:	2140      	movs	r1, #64	; 0x40
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f8c2 	bl	8005d82 <_ZNK7FUSB30214fusb_read_byteEh>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	73fb      	strb	r3, [r7, #15]

	/* Measure CC2 */
	if (!fusb_write_byte(FUSB_SWITCHES0, 0x0B)) {
 8005c06:	220b      	movs	r2, #11
 8005c08:	2102      	movs	r1, #2
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f8d5 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f083 0301 	eor.w	r3, r3, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <_ZNK7FUSB30218runCCLineSelectionEv+0x54>
		return false;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e044      	b.n	8005caa <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
	}
	osDelay(10);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	200a      	movs	r0, #10
 8005c26:	4798      	blx	r3
	uint8_t cc2 = fusb_read_byte(FUSB_STATUS0) & FUSB_STATUS0_BC_LVL;
 8005c28:	2140      	movs	r1, #64	; 0x40
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f8a9 	bl	8005d82 <_ZNK7FUSB30214fusb_read_byteEh>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	73bb      	strb	r3, [r7, #14]

	/* Select the correct CC line for BMC signaling; also enable AUTO_CRC */
	if (cc1 > cc2) {
 8005c38:	7bfa      	ldrb	r2, [r7, #15]
 8005c3a:	7bbb      	ldrb	r3, [r7, #14]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d919      	bls.n	8005c74 <_ZNK7FUSB30218runCCLineSelectionEv+0xa8>
		// TX_CC1|AUTO_CRC|SPECREV0
		if (!fusb_write_byte(FUSB_SWITCHES1, 0x25)) {
 8005c40:	2225      	movs	r2, #37	; 0x25
 8005c42:	2103      	movs	r1, #3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f8b8 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f083 0301 	eor.w	r3, r3, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <_ZNK7FUSB30218runCCLineSelectionEv+0x8e>
			return false;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e027      	b.n	8005caa <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
		}
		// PWDN1|PWDN2|MEAS_CC1
		if (!fusb_write_byte(FUSB_SWITCHES0, 0x07)) {
 8005c5a:	2207      	movs	r2, #7
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f8ab 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f083 0301 	eor.w	r3, r3, #1
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01b      	beq.n	8005ca8 <_ZNK7FUSB30218runCCLineSelectionEv+0xdc>
			return false;
 8005c70:	2300      	movs	r3, #0
 8005c72:	e01a      	b.n	8005caa <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
		}
	} else {
		// TX_CC2|AUTO_CRC|SPECREV0
		if (!fusb_write_byte(FUSB_SWITCHES1, 0x26)) {
 8005c74:	2226      	movs	r2, #38	; 0x26
 8005c76:	2103      	movs	r1, #3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f89e 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f083 0301 	eor.w	r3, r3, #1
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <_ZNK7FUSB30218runCCLineSelectionEv+0xc2>
			return false;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e00d      	b.n	8005caa <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
		}
		// PWDN1|PWDN2|MEAS_CC2
		if (!fusb_write_byte(FUSB_SWITCHES0, 0x0B)) {
 8005c8e:	220b      	movs	r2, #11
 8005c90:	2102      	movs	r1, #2
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f891 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f083 0301 	eor.w	r3, r3, #1
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <_ZNK7FUSB30218runCCLineSelectionEv+0xdc>
			return false;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e000      	b.n	8005caa <_ZNK7FUSB30218runCCLineSelectionEv+0xde>
		}
	}
	return true;
 8005ca8:	2301      	movs	r3, #1
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <_ZNK7FUSB30215fusb_get_statusEP11fusb_status>:
bool FUSB302::fusb_get_status(fusb_status *status) const {
 8005cb2:	b590      	push	{r4, r7, lr}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]

	/* Read the interrupt and status flags into status */
	return I2CRead(DeviceAddress, FUSB_STATUS0A, 7, status->bytes);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685c      	ldr	r4, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	7818      	ldrb	r0, [r3, #0]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2207      	movs	r2, #7
 8005cc8:	213c      	movs	r1, #60	; 0x3c
 8005cca:	47a0      	blx	r4
 8005ccc:	4603      	mov	r3, r0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd90      	pop	{r4, r7, pc}

08005cd6 <_ZNK7FUSB30210fusb_resetEv>:
	FUSB_STATUS0) & FUSB_STATUS0_BC_LVL);

	return bc_lvl;
}

bool FUSB302::fusb_reset() const {
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]

	/* Flush the TX buffer */
	if (!fusb_write_byte(FUSB_CONTROL0, 0x44)) {
 8005cde:	2244      	movs	r2, #68	; 0x44
 8005ce0:	2106      	movs	r1, #6
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f869 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f083 0301 	eor.w	r3, r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <_ZNK7FUSB30210fusb_resetEv+0x22>
		return false;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e01a      	b.n	8005d2e <_ZNK7FUSB30210fusb_resetEv+0x58>
	}
	/* Flush the RX buffer */
	if (!fusb_write_byte(FUSB_CONTROL1, FUSB_CONTROL1_RX_FLUSH)) {
 8005cf8:	2204      	movs	r2, #4
 8005cfa:	2107      	movs	r1, #7
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f85c 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005d02:	4603      	mov	r3, r0
 8005d04:	f083 0301 	eor.w	r3, r3, #1
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <_ZNK7FUSB30210fusb_resetEv+0x3c>
		return false;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e00d      	b.n	8005d2e <_ZNK7FUSB30210fusb_resetEv+0x58>
	}
	/* Reset the PD logic */
	if (!fusb_write_byte(FUSB_RESET, FUSB_RESET_PD_RESET)) {
 8005d12:	2202      	movs	r2, #2
 8005d14:	210c      	movs	r1, #12
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f84f 	bl	8005dba <_ZNK7FUSB30215fusb_write_byteEhh>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f083 0301 	eor.w	r3, r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <_ZNK7FUSB30210fusb_resetEv+0x56>
		return false;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e000      	b.n	8005d2e <_ZNK7FUSB30210fusb_resetEv+0x58>
	}
	return true;
 8005d2c:	2301      	movs	r3, #1
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <_ZNK7FUSB30212fusb_read_idEv>:

bool FUSB302::fusb_read_id() const {
 8005d36:	b590      	push	{r4, r7, lr}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
// Return true if read of the revision ID is sane
	uint8_t version = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	73bb      	strb	r3, [r7, #14]

	bool res = I2CRead(DeviceAddress, FUSB_DEVICE_ID, 1, &version);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685c      	ldr	r4, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	7818      	ldrb	r0, [r3, #0]
 8005d4a:	f107 030e 	add.w	r3, r7, #14
 8005d4e:	2201      	movs	r2, #1
 8005d50:	2101      	movs	r1, #1
 8005d52:	47a0      	blx	r4
 8005d54:	4603      	mov	r3, r0
 8005d56:	73fb      	strb	r3, [r7, #15]
	if (!res)
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	f083 0301 	eor.w	r3, r3, #1
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <_ZNK7FUSB30212fusb_read_idEv+0x32>
		return res;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	e008      	b.n	8005d7a <_ZNK7FUSB30212fusb_read_idEv+0x44>
	if (version == 0 || version == 0xFF)
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <_ZNK7FUSB30212fusb_read_idEv+0x3e>
 8005d6e:	7bbb      	ldrb	r3, [r7, #14]
 8005d70:	2bff      	cmp	r3, #255	; 0xff
 8005d72:	d101      	bne.n	8005d78 <_ZNK7FUSB30212fusb_read_idEv+0x42>
		return false;
 8005d74:	2300      	movs	r3, #0
 8005d76:	e000      	b.n	8005d7a <_ZNK7FUSB30212fusb_read_idEv+0x44>
	return true;
 8005d78:	2301      	movs	r3, #1
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd90      	pop	{r4, r7, pc}

08005d82 <_ZNK7FUSB30214fusb_read_byteEh>:
 * cfg: The FUSB302B to communicate with
 * addr: The memory address from which to read
 *
 * Returns the value read from addr.
 */
uint8_t FUSB302::fusb_read_byte(const uint8_t addr) const {
 8005d82:	b590      	push	{r4, r7, lr}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1];
	if (!I2CRead(DeviceAddress, addr, 1, (uint8_t*) data)) {
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685c      	ldr	r4, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	7818      	ldrb	r0, [r3, #0]
 8005d96:	f107 030c 	add.w	r3, r7, #12
 8005d9a:	78f9      	ldrb	r1, [r7, #3]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	47a0      	blx	r4
 8005da0:	4603      	mov	r3, r0
 8005da2:	f083 0301 	eor.w	r3, r3, #1
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <_ZNK7FUSB30214fusb_read_byteEh+0x2e>
		return 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e000      	b.n	8005db2 <_ZNK7FUSB30214fusb_read_byteEh+0x30>
	}
	return data[0];
 8005db0:	7b3b      	ldrb	r3, [r7, #12]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd90      	pop	{r4, r7, pc}

08005dba <_ZNK7FUSB30215fusb_write_byteEhh>:
 *
 * cfg: The FUSB302B to communicate with
 * addr: The memory address to which we will write
 * byte: The value to write
 */
bool FUSB302::fusb_write_byte(const uint8_t addr, const uint8_t byte) const {
 8005dba:	b590      	push	{r4, r7, lr}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	70fb      	strb	r3, [r7, #3]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	70bb      	strb	r3, [r7, #2]
	return I2CWrite(DeviceAddress, addr, 1, (uint8_t*) &byte);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689c      	ldr	r4, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	7818      	ldrb	r0, [r3, #0]
 8005dd2:	1cbb      	adds	r3, r7, #2
 8005dd4:	78f9      	ldrb	r1, [r7, #3]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	47a0      	blx	r4
 8005dda:	4603      	mov	r3, r0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd90      	pop	{r4, r7, pc}

08005de4 <_ZN12PolicyEngine18readPendingMessageEv>:
 */

#include "policy_engine.h"
#include <pd.h>
#include <string.h>
void PolicyEngine::readPendingMessage() {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  while (fusb.fusb_rx_pending()) {
 8005dec:	e03a      	b.n	8005e64 <_ZN12PolicyEngine18readPendingMessageEv+0x80>
    /* Read the message */
    if (fusb.fusb_read_message(&irqMessage) == 0) {
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	33f0      	adds	r3, #240	; 0xf0
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f7ff fdf2 	bl	80059e0 <_ZNK7FUSB30217fusb_read_messageEP6pd_msg>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	bf0c      	ite	eq
 8005e02:	2301      	moveq	r3, #1
 8005e04:	2300      	movne	r3, #0
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d026      	beq.n	8005e5a <_ZN12PolicyEngine18readPendingMessageEv+0x76>
      /* If it's a Soft_Reset, go to the soft reset state */
      if (PD_MSGTYPE_GET(&irqMessage) == PD_MSGTYPE_SOFT_RESET && PD_NUMOBJ_GET(&irqMessage) == 0) {
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	2b0d      	cmp	r3, #13
 8005e18:	d10c      	bne.n	8005e34 <_ZN12PolicyEngine18readPendingMessageEv+0x50>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8005e20:	131b      	asrs	r3, r3, #12
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d104      	bne.n	8005e34 <_ZN12PolicyEngine18readPendingMessageEv+0x50>
        /* PE transitions to its reset state */
        notify(Notifications::RESET);
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f8ab 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
 8005e32:	e017      	b.n	8005e64 <_ZN12PolicyEngine18readPendingMessageEv+0x80>
      } else {
        /* Tell PolicyEngine to discard the message being transmitted */
        notify(Notifications::DISCARD);
 8005e34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8a5 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
        /* Pass the message to the policy engine. */
        incomingMessages.push(&irqMessage);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	33f0      	adds	r3, #240	; 0xf0
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f000 f85c 	bl	8005f08 <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_>

        notify(PolicyEngine::Notifications::MSG_RX);
 8005e50:	2102      	movs	r1, #2
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f898 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
 8005e58:	e004      	b.n	8005e64 <_ZN12PolicyEngine18readPendingMessageEv+0x80>
      }
    } else {
      // Invalid message or SOP', still discard tx message
      /* Tell PolicyEngine to discard the message being transmitted */
      notify(Notifications::DISCARD);
 8005e5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f892 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
  while (fusb.fusb_rx_pending()) {
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff fda6 	bl	80059b8 <_ZNK7FUSB30215fusb_rx_pendingEv>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1bd      	bne.n	8005dee <_ZN12PolicyEngine18readPendingMessageEv+0xa>
    }
  }
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <_ZN12PolicyEngine10IRQOccuredEv>:

bool PolicyEngine::IRQOccured() {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  fusb_status status;
  bool        returnValue = false;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]
  /* Read the FUSB302B status and interrupt registers */
  if (fusb.fusb_get_status(&status)) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f107 0208 	add.w	r2, r7, #8
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff ff0e 	bl	8005cb2 <_ZNK7FUSB30215fusb_get_statusEP11fusb_status>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d030      	beq.n	8005efe <_ZN12PolicyEngine10IRQOccuredEv+0x82>

    /* If the I_GCRCSENT flag is set, tell the Protocol RX thread */
    // This means a message was received with a good CRC
    if (status.interruptb & FUSB_INTERRUPTB_I_GCRCSENT) {
 8005e9c:	7afb      	ldrb	r3, [r7, #11]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d004      	beq.n	8005eb0 <_ZN12PolicyEngine10IRQOccuredEv+0x34>
      readPendingMessage();
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff ff9c 	bl	8005de4 <_ZN12PolicyEngine18readPendingMessageEv>
      returnValue = true;
 8005eac:	2301      	movs	r3, #1
 8005eae:	73fb      	strb	r3, [r7, #15]
    }

    /* If the I_TXSENT or I_RETRYFAIL flag is set, tell the Protocol TX
     * thread */
    if (status.interrupta & FUSB_INTERRUPTA_I_TXSENT) {
 8005eb0:	7abb      	ldrb	r3, [r7, #10]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d006      	beq.n	8005ec8 <_ZN12PolicyEngine10IRQOccuredEv+0x4c>
      notify(Notifications::I_TXSENT);
 8005eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f862 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
      returnValue = true;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	73fb      	strb	r3, [r7, #15]
    }
    if (status.interrupta & FUSB_INTERRUPTA_I_RETRYFAIL) {
 8005ec8:	7abb      	ldrb	r3, [r7, #10]
 8005eca:	f003 0310 	and.w	r3, r3, #16
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d006      	beq.n	8005ee0 <_ZN12PolicyEngine10IRQOccuredEv+0x64>
      notify(Notifications::I_RETRYFAIL);
 8005ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f856 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
      returnValue = true;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
    }

    /* If the I_OCP_TEMP and OVRTEMP flags are set, tell the Policy
     * Engine thread */
    if ((status.interrupta & FUSB_INTERRUPTA_I_OCP_TEMP) && (status.status1 & FUSB_STATUS1_OVRTEMP)) {
 8005ee0:	7abb      	ldrb	r3, [r7, #10]
 8005ee2:	b25b      	sxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	da0a      	bge.n	8005efe <_ZN12PolicyEngine10IRQOccuredEv+0x82>
 8005ee8:	7b7b      	ldrb	r3, [r7, #13]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <_ZN12PolicyEngine10IRQOccuredEv+0x82>
      notify(Notifications::I_OVRTEMP);
 8005ef2:	2120      	movs	r1, #32
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f847 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
      returnValue = true;
 8005efa:	2301      	movs	r3, #1
 8005efc:	73fb      	strb	r3, [r7, #15]
    }
  }
  return returnValue;
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_>:

  void push(const T *data) {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]

    memcpy(buffer + end, data, sizeof(T));
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f1a:	015b      	lsls	r3, r3, #5
 8005f1c:	4413      	add	r3, r2
 8005f1e:	2220      	movs	r2, #32
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f001 fb2d 	bl	8007582 <memcpy>
    // If going to wrap, push start along to maintain order
    if (begin == end && wrap) {
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d10d      	bne.n	8005f54 <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_+0x4c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_+0x4c>
      begin = (begin + 1) % size;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f48:	3301      	adds	r3, #1
 8005f4a:	f003 0203 	and.w	r2, r3, #3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
    end = (end + 1) % size;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	f003 0203 	and.w	r2, r3, #3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (begin == end) {
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d103      	bne.n	8005f7e <_ZN10ringbufferI6pd_msgLj4EE4pushEPKS0_+0x76>
      wrap = true;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    }
  }
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>:
#define PD_DEBUG_OUTPUT
#ifdef PD_DEBUG_OUTPUT
#include "stdio.h"
#endif

void PolicyEngine::notify(PolicyEngine::Notifications notification) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
	uint32_t val = (uint32_t) notification;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	60fb      	str	r3, [r7, #12]
	currentEvents |= val;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
#ifdef PD_DEBUG_OUTPUT
	printf("Notification received  %04X\r\n", (int) notification);
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	4803      	ldr	r0, [pc, #12]	; (8005fb4 <_ZN12PolicyEngine6notifyENS_13NotificationsE+0x2c>)
 8005fa6:	f001 f92b 	bl	8007200 <iprintf>
#endif

}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	080080f8 	.word	0x080080f8

08005fb8 <_ZN12PolicyEngine14printStateNameEv>:
void PolicyEngine::printStateName() {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b09c      	sub	sp, #112	; 0x70
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
#ifdef PD_DEBUG_OUTPUT
	const char *names[] = { "PEWaitingEvent", "PEWaitingMessageTx",
 8005fc0:	4a0b      	ldr	r2, [pc, #44]	; (8005ff0 <_ZN12PolicyEngine14printStateNameEv+0x38>)
 8005fc2:	f107 030c 	add.w	r3, r7, #12
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	2264      	movs	r2, #100	; 0x64
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 fad9 	bl	8007582 <memcpy>
			"PESinkGiveSinkCap", "PESinkHardReset", "PESinkTransitionDefault",
			"PESinkSoftReset", "PESinkSendSoftReset", "PESinkSendSoftResetTxOK",
			"PESinkSendSoftResetResp", "PESinkSendNotSupported",
			"PESinkChunkReceived", "PESinkNotSupportedReceived",
			"PESinkSourceUnresponsive", };
	printf("Current state - %s\r\n", names[(int) state]);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	3370      	adds	r3, #112	; 0x70
 8005fda:	443b      	add	r3, r7
 8005fdc:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4804      	ldr	r0, [pc, #16]	; (8005ff4 <_ZN12PolicyEngine14printStateNameEv+0x3c>)
 8005fe4:	f001 f90c 	bl	8007200 <iprintf>
#endif
}
 8005fe8:	bf00      	nop
 8005fea:	3770      	adds	r7, #112	; 0x70
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	08008324 	.word	0x08008324
 8005ff4:	08008118 	.word	0x08008118

08005ff8 <_ZN12PolicyEngine6threadEv>:
bool PolicyEngine::thread() {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	switch (state) {
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006006:	2b18      	cmp	r3, #24
 8006008:	f200 8117 	bhi.w	800623a <_ZN12PolicyEngine6threadEv+0x242>
 800600c:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <_ZN12PolicyEngine6threadEv+0x1c>)
 800600e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006012:	bf00      	nop
 8006014:	08006205 	.word	0x08006205
 8006018:	08006217 	.word	0x08006217
 800601c:	08006229 	.word	0x08006229
 8006020:	08006079 	.word	0x08006079
 8006024:	0800608b 	.word	0x0800608b
 8006028:	0800609d 	.word	0x0800609d
 800602c:	080060af 	.word	0x080060af
 8006030:	080060c1 	.word	0x080060c1
 8006034:	080060d3 	.word	0x080060d3
 8006038:	080060e5 	.word	0x080060e5
 800603c:	080060f7 	.word	0x080060f7
 8006040:	08006109 	.word	0x08006109
 8006044:	0800611b 	.word	0x0800611b
 8006048:	0800612d 	.word	0x0800612d
 800604c:	0800613f 	.word	0x0800613f
 8006050:	08006151 	.word	0x08006151
 8006054:	08006163 	.word	0x08006163
 8006058:	08006175 	.word	0x08006175
 800605c:	08006187 	.word	0x08006187
 8006060:	08006199 	.word	0x08006199
 8006064:	080061ab 	.word	0x080061ab
 8006068:	080061bd 	.word	0x080061bd
 800606c:	080061cf 	.word	0x080061cf
 8006070:	080061f3 	.word	0x080061f3
 8006074:	080061e1 	.word	0x080061e1

	case PESinkStartup:
		state = pe_sink_startup();
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fa03 	bl	8006484 <_ZN12PolicyEngine15pe_sink_startupEv>
 800607e:	4603      	mov	r3, r0
 8006080:	461a      	mov	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8006088:	e0dc      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkDiscovery:
		state = pe_sink_discovery();
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fa0f 	bl	80064ae <_ZN12PolicyEngine17pe_sink_discoveryEv>
 8006090:	4603      	mov	r3, r0
 8006092:	461a      	mov	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 800609a:	e0d3      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSetupWaitCap:
		state = pe_sink_setup_wait_cap();
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fa10 	bl	80064c2 <_ZN12PolicyEngine22pe_sink_setup_wait_capEv>
 80060a2:	4603      	mov	r3, r0
 80060a4:	461a      	mov	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80060ac:	e0ca      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkWaitCap:
		state = pe_sink_wait_cap();
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa18 	bl	80064e4 <_ZN12PolicyEngine16pe_sink_wait_capEv>
 80060b4:	4603      	mov	r3, r0
 80060b6:	461a      	mov	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80060be:	e0c1      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkEvalCap:
		state = pe_sink_eval_cap();
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fa85 	bl	80065d0 <_ZN12PolicyEngine16pe_sink_eval_capEv>
 80060c6:	4603      	mov	r3, r0
 80060c8:	461a      	mov	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80060d0:	e0b8      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSelectCapTx:
		state = pe_sink_select_cap_tx();
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 faf4 	bl	80066c0 <_ZN12PolicyEngine21pe_sink_select_cap_txEv>
 80060d8:	4603      	mov	r3, r0
 80060da:	461a      	mov	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80060e2:	e0af      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSelectCap:
		state = pe_sink_select_cap();
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fb07 	bl	80066f8 <_ZN12PolicyEngine18pe_sink_select_capEv>
 80060ea:	4603      	mov	r3, r0
 80060ec:	461a      	mov	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80060f4:	e0a6      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkWaitCapResp:
		state = pe_sink_wait_cap_resp();
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fb14 	bl	8006724 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv>
 80060fc:	4603      	mov	r3, r0
 80060fe:	461a      	mov	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8006106:	e09d      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkTransitionSink:
		state = pe_sink_transition_sink();
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fb91 	bl	8006830 <_ZN12PolicyEngine23pe_sink_transition_sinkEv>
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8006118:	e094      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkReady:
		state = pe_sink_ready();
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fbc2 	bl	80068a4 <_ZN12PolicyEngine13pe_sink_readyEv>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 800612a:	e08b      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkGetSourceCap:
		state = pe_sink_get_source_cap();
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fd10 	bl	8006b52 <_ZN12PolicyEngine22pe_sink_get_source_capEv>
 8006132:	4603      	mov	r3, r0
 8006134:	461a      	mov	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 800613c:	e082      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkGiveSinkCap:
		state = pe_sink_give_sink_cap();
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fd20 	bl	8006b84 <_ZN12PolicyEngine21pe_sink_give_sink_capEv>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 800614e:	e079      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkHardReset:
		state = pe_sink_hard_reset();
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fd37 	bl	8006bc4 <_ZN12PolicyEngine18pe_sink_hard_resetEv>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8006160:	e070      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkTransitionDefault:
		state = pe_sink_transition_default();
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fd4e 	bl	8006c04 <_ZN12PolicyEngine26pe_sink_transition_defaultEv>
 8006168:	4603      	mov	r3, r0
 800616a:	461a      	mov	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8006172:	e067      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkHandleSoftReset:
		state = pe_sink_soft_reset();
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fd53 	bl	8006c20 <_ZN12PolicyEngine18pe_sink_soft_resetEv>
 800617a:	4603      	mov	r3, r0
 800617c:	461a      	mov	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8006184:	e05e      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSendSoftReset:
		state = pe_sink_send_soft_reset();
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fd60 	bl	8006c4c <_ZN12PolicyEngine23pe_sink_send_soft_resetEv>
 800618c:	4603      	mov	r3, r0
 800618e:	461a      	mov	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8006196:	e055      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSendSoftResetTxOK:
		state = pe_sink_send_soft_reset_tx_ok();
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fd75 	bl	8006c88 <_ZN12PolicyEngine29pe_sink_send_soft_reset_tx_okEv>
 800619e:	4603      	mov	r3, r0
 80061a0:	461a      	mov	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80061a8:	e04c      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSendSoftResetResp:
		state = pe_sink_send_soft_reset_resp();
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fd7d 	bl	8006caa <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv>
 80061b0:	4603      	mov	r3, r0
 80061b2:	461a      	mov	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80061ba:	e043      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSendNotSupported:
		state = pe_sink_send_not_supported();
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fdbd 	bl	8006d3c <_ZN12PolicyEngine26pe_sink_send_not_supportedEv>
 80061c2:	4603      	mov	r3, r0
 80061c4:	461a      	mov	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80061cc:	e03a      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkChunkReceived:
		state = pe_sink_chunk_received();
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fde6 	bl	8006da0 <_ZN12PolicyEngine22pe_sink_chunk_receivedEv>
 80061d4:	4603      	mov	r3, r0
 80061d6:	461a      	mov	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80061de:	e031      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkSourceUnresponsive:
		state = pe_sink_source_unresponsive();
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fdfc 	bl	8006dde <_ZN12PolicyEngine27pe_sink_source_unresponsiveEv>
 80061e6:	4603      	mov	r3, r0
 80061e8:	461a      	mov	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 80061f0:	e028      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PESinkNotSupportedReceived:
		state = pe_sink_not_supported_received();
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fde2 	bl	8006dbc <_ZN12PolicyEngine30pe_sink_not_supported_receivedEv>
 80061f8:	4603      	mov	r3, r0
 80061fa:	461a      	mov	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8006202:	e01f      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PEWaitingEvent:
		state = pe_sink_wait_event();
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fdf8 	bl	8006dfa <_ZN12PolicyEngine18pe_sink_wait_eventEv>
 800620a:	4603      	mov	r3, r0
 800620c:	461a      	mov	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8006214:	e016      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PEWaitingMessageTx:
		state = pe_sink_wait_send_done();
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fe92 	bl	8006f40 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv>
 800621c:	4603      	mov	r3, r0
 800621e:	461a      	mov	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8006226:	e00d      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	case PEWaitingMessageGoodCRC:
		state = pe_sink_wait_good_crc();
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fe2d 	bl	8006e88 <_ZN12PolicyEngine21pe_sink_wait_good_crcEv>
 800622e:	4603      	mov	r3, r0
 8006230:	461a      	mov	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8006238:	e004      	b.n	8006244 <_ZN12PolicyEngine6threadEv+0x24c>
	default:
		state = PESinkStartup;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2203      	movs	r2, #3
 800623e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		break;
 8006242:	bf00      	nop
	}
	if (state != PEWaitingEvent) {
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <_ZN12PolicyEngine6threadEv+0x25c>
		printStateName();
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7ff feb2 	bl	8005fb8 <_ZN12PolicyEngine14printStateNameEv>
	}
	return state != PEWaitingEvent;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800625a:	2b00      	cmp	r3, #0
 800625c:	bf14      	ite	ne
 800625e:	2301      	movne	r3, #1
 8006260:	2300      	moveq	r3, #0
 8006262:	b2db      	uxtb	r3, r3
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <_ZN12PolicyEngine7isPD3_0Ev>:

bool PolicyEngine::isPD3_0() {
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
	return (hdr_template & PD_HDR_SPECREV) == PD_SPECREV_3_0;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006278:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800627c:	2b80      	cmp	r3, #128	; 0x80
 800627e:	bf0c      	ite	eq
 8006280:	2301      	moveq	r3, #1
 8006282:	2300      	movne	r3, #0
 8006284:	b2db      	uxtb	r3, r3
}
 8006286:	4618      	mov	r0, r3
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr

08006290 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>:
		}
	}
}
PolicyEngine::policy_engine_state PolicyEngine::pe_start_message_tx(
		PolicyEngine::policy_engine_state postTxState,
		PolicyEngine::policy_engine_state txFailState, pd_msg *msg) {
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	607b      	str	r3, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	72fb      	strb	r3, [r7, #11]
 800629e:	4613      	mov	r3, r2
 80062a0:	72bb      	strb	r3, [r7, #10]
#ifdef PD_DEBUG_OUTPUT
	printf("Starting message Tx - %02X\r\n", PD_MSGTYPE_GET(msg));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	885b      	ldrh	r3, [r3, #2]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	4619      	mov	r1, r3
 80062ae:	4829      	ldr	r0, [pc, #164]	; (8006354 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg+0xc4>)
 80062b0:	f000 ffa6 	bl	8007200 <iprintf>
#endif
	if (PD_MSGTYPE_GET(msg) == PD_MSGTYPE_SOFT_RESET
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	885b      	ldrh	r3, [r3, #2]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	2b0d      	cmp	r3, #13
 80062c0:	d10d      	bne.n	80062de <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg+0x4e>
			&& PD_NUMOBJ_GET(msg) == 0) {
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	885b      	ldrh	r3, [r3, #2]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	131b      	asrs	r3, r3, #12
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d105      	bne.n	80062de <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg+0x4e>
		/* Clear MessageIDCounter */
		_tx_messageidcounter = 0;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		return postTxState; // Message is "done"
 80062da:	7afb      	ldrb	r3, [r7, #11]
 80062dc:	e035      	b.n	800634a <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg+0xba>
	}
	postSendFailedState = txFailState;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	7aba      	ldrb	r2, [r7, #10]
 80062e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	postSendState = postTxState;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	7afa      	ldrb	r2, [r7, #11]
 80062ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	msg->hdr &= ~PD_HDR_MESSAGEID;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	885b      	ldrh	r3, [r3, #2]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	805a      	strh	r2, [r3, #2]
	msg->hdr |= (_tx_messageidcounter % 8) << PD_HDR_MESSAGEID_SHIFT;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	885b      	ldrh	r3, [r3, #2]
 8006302:	b29b      	uxth	r3, r3
 8006304:	b21a      	sxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800630c:	025b      	lsls	r3, r3, #9
 800630e:	b21b      	sxth	r3, r3
 8006310:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006314:	b21b      	sxth	r3, r3
 8006316:	4313      	orrs	r3, r2
 8006318:	b21b      	sxth	r3, r3
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	805a      	strh	r2, [r3, #2]

	/* PD 3.0 collision avoidance */
	if (PolicyEngine::isPD3_0()) {
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff ffa3 	bl	800626c <_ZN12PolicyEngine7isPD3_0Ev>
		//    while (fusb_get_typec_current() != fusb_sink_tx_ok) {
		//      vTaskDelay(TICKS_10MS);
		//    }
	}
	/* Send the message to the PHY */
	fusb.fusb_send_message(msg);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff fae4 	bl	80058f8 <_ZNK7FUSB30217fusb_send_messageEPK6pd_msg>
#ifdef PD_DEBUG_OUTPUT
	printf("Message queued to send\r\n");
 8006330:	4809      	ldr	r0, [pc, #36]	; (8006358 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg+0xc8>)
 8006332:	f000 ffcb 	bl	80072cc <puts>
#endif

	// Setup waiting for notification
	return waitForEvent(PEWaitingMessageTx,
 8006336:	f04f 33ff 	mov.w	r3, #4294967295
 800633a:	f640 6201 	movw	r2, #3585	; 0xe01
 800633e:	2101      	movs	r1, #1
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 f81d 	bl	8006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8006346:	4603      	mov	r3, r0
			(uint32_t) Notifications::RESET | (uint32_t) Notifications::DISCARD
					| (uint32_t) Notifications::I_TXSENT
					| (uint32_t) Notifications::I_RETRYFAIL, 0xFFFFFFFF);
 8006348:	bf00      	nop
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	08008388 	.word	0x08008388
 8006358:	080083a8 	.word	0x080083a8

0800635c <_ZN12PolicyEngine11clearEventsEm>:

void PolicyEngine::clearEvents(uint32_t notification) {
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
	currentEvents &= ~notification;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	43db      	mvns	r3, r3
 800636e:	401a      	ands	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr
	...

08006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>:

PolicyEngine::policy_engine_state PolicyEngine::waitForEvent(
		PolicyEngine::policy_engine_state evalState, uint32_t notification,
		uint32_t timeout) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	607a      	str	r2, [r7, #4]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	460b      	mov	r3, r1
 800638e:	72fb      	strb	r3, [r7, #11]
	// Record the new state, and the desired notifications mask, then schedule the waiter state
	waitingEventsMask = notification;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef PD_DEBUG_OUTPUT
	printf("Waiting for events %04X\r\n", (int) notification);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4619      	mov	r1, r3
 800639a:	4820      	ldr	r0, [pc, #128]	; (800641c <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x9c>)
 800639c:	f000 ff30 	bl	8007200 <iprintf>
#endif

	// If notification is already present, we can continue straight to eval state
	if (currentEvents & waitingEventsMask) {
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x32>
		return evalState;
 80063ae:	7afb      	ldrb	r3, [r7, #11]
 80063b0:	e030      	b.n	8006414 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x94>
	}
	//If waiting for message rx, but one is in the buffer, jump to eval
	if ((waitingEventsMask & (uint32_t) Notifications::MSG_RX)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d014      	beq.n	80063e8 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x68>
			== (uint32_t) Notifications::MSG_RX) {
		if (incomingMessages.getOccupied() > 0) {
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3364      	adds	r3, #100	; 0x64
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 f82c 	bl	8006420 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bf14      	ite	ne
 80063ce:	2301      	movne	r3, #1
 80063d0:	2300      	moveq	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x68>
			currentEvents|=(uint32_t) Notifications::MSG_RX;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	f043 0202 	orr.w	r2, r3, #2
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40
			return evalState;
 80063e4:	7afb      	ldrb	r3, [r7, #11]
 80063e6:	e015      	b.n	8006414 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x94>
		}
	}
	postNotifcationEvalState = evalState;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	7afa      	ldrb	r2, [r7, #11]
 80063ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	if (timeout == 0xFFFFFFFF) {
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f6:	d104      	bne.n	8006402 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x82>
		waitingEventsTimeout = 0xFFFFFFFF;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f04f 32ff 	mov.w	r2, #4294967295
 80063fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8006400:	e007      	b.n	8006412 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm+0x92>
	} else {
		waitingEventsTimeout = getTimeStamp() + timeout;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	4798      	blx	r3
 8006408:	4602      	mov	r2, r0
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	441a      	add	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	return policy_engine_state::PEWaitingEvent;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	080083c0 	.word	0x080083c0

08006420 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>:
    if (wrap && (begin == 0)) {
      wrap = false;
    }
  }
  // Returns number of objects queued in the buffer
  size_t getOccupied() const {
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
    if (end == begin) {
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006434:	429a      	cmp	r2, r3
 8006436:	d108      	bne.n	800644a <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x2a>
      return wrap ? size : 0;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x26>
 8006442:	2304      	movs	r3, #4
 8006444:	e019      	b.n	800647a <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x5a>
 8006446:	2300      	movs	r3, #0
 8006448:	e017      	b.n	800647a <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x5a>
    } else if (end > begin) {
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006456:	429a      	cmp	r2, r3
 8006458:	d907      	bls.n	800646a <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x4a>
      return end - begin;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	e007      	b.n	800647a <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv+0x5a>
    } else {
      return size + end - begin;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	3304      	adds	r3, #4
    }
  }
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	bc80      	pop	{r7}
 8006482:	4770      	bx	lr

08006484 <_ZN12PolicyEngine15pe_sink_startupEv>:
int __io_putchar(int ch){
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
	return ch;
}

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_startup() {
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
	/* We don't have an explicit contract currently */
	_explicit_contract = false;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	PPSTimerEnabled = false;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
	currentEvents = 0;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40
	 * state: startup and exiting hard reset.  On startup, the protocol layer
	 * is reset by the startup procedure.  When exiting hard reset, the
	 * protocol layer is reset by the hard reset state machine.  Since it's
	 * already done somewhere else, there's no need to do it again here. */

	return PESinkDiscovery;
 80064a2:	2304      	movs	r3, #4
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr

080064ae <_ZN12PolicyEngine17pe_sink_discoveryEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_discovery() {
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]

	fusb.runCCLineSelection();

	*/

	return PESinkSetupWaitCap;
 80064b6:	2305      	movs	r3, #5
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr

080064c2 <_ZN12PolicyEngine22pe_sink_setup_wait_capEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_setup_wait_cap() { //
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]

	return waitForEvent(policy_engine_state::PESinkWaitCap,
 80064ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80064ce:	2223      	movs	r2, #35	; 0x23
 80064d0:	2106      	movs	r1, #6
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff ff54 	bl	8006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 80064d8:	4603      	mov	r3, r0
			(uint32_t) Notifications::MSG_RX
					| (uint32_t) Notifications::I_OVRTEMP
					| (uint32_t) Notifications::RESET,
			// Wait for cap timeout
			PD_T_TYPEC_SINK_WAIT_CAP);
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <_ZN12PolicyEngine16pe_sink_wait_capEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_cap() {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
	/* Fetch a message from the protocol layer */
	uint32_t evt = currentEvents;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	60fb      	str	r3, [r7, #12]
	clearEvents();
 80064f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff ff30 	bl	800635c <_ZN12PolicyEngine11clearEventsEm>
#ifdef PD_DEBUG_OUTPUT
	printf("Wait Cap Event %04X\r\n", (int) evt);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4619      	mov	r1, r3
 8006500:	4831      	ldr	r0, [pc, #196]	; (80065c8 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xe4>)
 8006502:	f000 fe7d 	bl	8007200 <iprintf>
#endif

	/* If we're too hot, we shouldn't negotiate power yet */
	if (evt & (uint32_t) Notifications::I_OVRTEMP) {
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <_ZN12PolicyEngine16pe_sink_wait_capEv+0x30>
		return PESinkSetupWaitCap;
 8006510:	2305      	movs	r3, #5
 8006512:	e054      	b.n	80065be <_ZN12PolicyEngine16pe_sink_wait_capEv+0xda>
	}

	/* If we got a message */
	if (incomingMessages.getOccupied() > 0) {
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3364      	adds	r3, #100	; 0x64
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff ff81 	bl	8006420 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	bf14      	ite	ne
 8006524:	2301      	movne	r3, #1
 8006526:	2300      	moveq	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d046      	beq.n	80065bc <_ZN12PolicyEngine16pe_sink_wait_capEv+0xd8>
		/* Get the message */
		while (incomingMessages.getOccupied()) {
 800652e:	e038      	b.n	80065a2 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xbe>
			incomingMessages.pop(&tempMessage);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3344      	adds	r3, #68	; 0x44
 800653a:	4619      	mov	r1, r3
 800653c:	4610      	mov	r0, r2
 800653e:	f000 fd63 	bl	8007008 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>
			/* If we got a Source_Capabilities message, read it. */
			if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_SOURCE_CAPABILITIES
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	2b01      	cmp	r3, #1
 800654e:	d128      	bne.n	80065a2 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xbe>
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006556:	131b      	asrs	r3, r3, #12
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	2b00      	cmp	r3, #0
 800655e:	dd20      	ble.n	80065a2 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xbe>
#ifdef PD_DEBUG_OUTPUT
				printf("Source Capabilities message RX\r\n");
 8006560:	481a      	ldr	r0, [pc, #104]	; (80065cc <_ZN12PolicyEngine16pe_sink_wait_capEv+0xe8>)
 8006562:	f000 feb3 	bl	80072cc <puts>
#endif

				/* First, determine what PD revision we're using */
				if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_1_0) {
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800656a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d115      	bne.n	800659e <_ZN12PolicyEngine16pe_sink_wait_capEv+0xba>
					/* If the other end is using at least version 3.0, we'll
					 * use version 3.0. */
					if ((tempMessage.hdr & PD_HDR_SPECREV) >= PD_SPECREV_3_0) {
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006578:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800657c:	2b7f      	cmp	r3, #127	; 0x7f
 800657e:	dd07      	ble.n	8006590 <_ZN12PolicyEngine16pe_sink_wait_capEv+0xac>
						hdr_template |= PD_SPECREV_3_0;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006588:	b29a      	uxth	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800658e:	e006      	b.n	800659e <_ZN12PolicyEngine16pe_sink_wait_capEv+0xba>
						/* Otherwise, use 2.0.  Don't worry about the 1.0 case
						 * because we don't have hardware for PD 1.0 signaling. */
					} else {
						hdr_template |= PD_SPECREV_2_0;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006598:	b29a      	uxth	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	85da      	strh	r2, [r3, #46]	; 0x2e
					}
				}
				return PESinkEvalCap;
 800659e:	2307      	movs	r3, #7
 80065a0:	e00d      	b.n	80065be <_ZN12PolicyEngine16pe_sink_wait_capEv+0xda>
		while (incomingMessages.getOccupied()) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3364      	adds	r3, #100	; 0x64
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff ff3a 	bl	8006420 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bf14      	ite	ne
 80065b2:	2301      	movne	r3, #1
 80065b4:	2300      	moveq	r3, #0
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1b9      	bne.n	8006530 <_ZN12PolicyEngine16pe_sink_wait_capEv+0x4c>
			}
		}
	}

	/* If we failed to get a message, wait longer */
	return PESinkSetupWaitCap;
 80065bc:	2305      	movs	r3, #5
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	080083dc 	.word	0x080083dc
 80065cc:	080083f4 	.word	0x080083f4

080065d0 <_ZN12PolicyEngine16pe_sink_eval_capEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_eval_cap() {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	/* If we have a Source_Capabilities message, remember the index of the
	 * first PPS APDO so we can check if the request is for a PPS APDO in
	 * PE_SNK_Select_Cap. */
	/* Start by assuming we won't find a PPS APDO (set the index greater
	 * than the maximum possible) */
	_pps_index = 0xFF;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	22ff      	movs	r2, #255	; 0xff
 80065dc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	/* New capabilities also means we can't be making a request from the
	 * same PPS APDO */
	/* Search for the first PPS APDO */
	for (int i = 0; i < PD_NUMOBJ_GET(&tempMessage); i++) {
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	e01f      	b.n	8006626 <_ZN12PolicyEngine16pe_sink_eval_capEv+0x56>
		if ((tempMessage.obj[i] & PD_PDO_TYPE) == PD_PDO_TYPE_AUGMENTED
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3310      	adds	r3, #16
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80065f6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80065fa:	d111      	bne.n	8006620 <_ZN12PolicyEngine16pe_sink_eval_capEv+0x50>
				&& (tempMessage.obj[i] & PD_APDO_TYPE) == PD_APDO_TYPE_PPS) {
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3310      	adds	r3, #16
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d107      	bne.n	8006620 <_ZN12PolicyEngine16pe_sink_eval_capEv+0x50>
			_pps_index = i + 1;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	3301      	adds	r3, #1
 8006616:	b2da      	uxtb	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			break;
 800661e:	e00b      	b.n	8006638 <_ZN12PolicyEngine16pe_sink_eval_capEv+0x68>
	for (int i = 0; i < PD_NUMOBJ_GET(&tempMessage); i++) {
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3301      	adds	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800662c:	131b      	asrs	r3, r3, #12
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	429a      	cmp	r2, r3
 8006636:	dbd6      	blt.n	80065e6 <_ZN12PolicyEngine16pe_sink_eval_capEv+0x16>
		}
	}
	_unconstrained_power = tempMessage.obj[0] & PD_PDO_SRC_FIXED_UNCONSTRAINED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006640:	2b00      	cmp	r3, #0
 8006642:	bf14      	ite	ne
 8006644:	2301      	movne	r3, #1
 8006646:	2300      	moveq	r3, #0
 8006648:	b2da      	uxtb	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Ask the DPM what to request */
	if (pdbs_dpm_evaluate_capability(&tempMessage, &_last_dpm_request)) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	f102 0044 	add.w	r0, r2, #68	; 0x44
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8006660:	4611      	mov	r1, r2
 8006662:	4798      	blx	r3
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d025      	beq.n	80066b6 <_ZN12PolicyEngine16pe_sink_eval_capEv+0xe6>
		_last_dpm_request.hdr |= hdr_template;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006674:	4313      	orrs	r3, r2
 8006676:	b29a      	uxth	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
		/* If we're using PD 3.0 */
		if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_3_0) {
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006682:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006686:	2b80      	cmp	r3, #128	; 0x80
 8006688:	d113      	bne.n	80066b2 <_ZN12PolicyEngine16pe_sink_eval_capEv+0xe2>
			/* If the request was for a PPS APDO, start time callbacks if not started
			 */
			if (PD_RDO_OBJPOS_GET(&_last_dpm_request) >= _pps_index) {
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006690:	0f1b      	lsrs	r3, r3, #28
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800669c:	4293      	cmp	r3, r2
 800669e:	d304      	bcc.n	80066aa <_ZN12PolicyEngine16pe_sink_eval_capEv+0xda>
				PPSTimerEnabled = true;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
 80066a8:	e003      	b.n	80066b2 <_ZN12PolicyEngine16pe_sink_eval_capEv+0xe2>
			} else {
				PPSTimerEnabled = false;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
			}
		}
		return PESinkSelectCapTx;
 80066b2:	2308      	movs	r3, #8
 80066b4:	e000      	b.n	80066b8 <_ZN12PolicyEngine16pe_sink_eval_capEv+0xe8>
	}

	return PESinkWaitCap;
 80066b6:	2306      	movs	r3, #6
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <_ZN12PolicyEngine21pe_sink_select_cap_txEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_select_cap_tx() {
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]

	/* Transmit the request */
	clearEvents(); // clear all pending incase of an rx while prepping
 80066c8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff fe45 	bl	800635c <_ZN12PolicyEngine11clearEventsEm>

#ifdef PD_DEBUG_OUTPUT
	printf("Sending desired capability\r\n");
 80066d2:	4808      	ldr	r0, [pc, #32]	; (80066f4 <_ZN12PolicyEngine21pe_sink_select_cap_txEv+0x34>)
 80066d4:	f000 fdfa 	bl	80072cc <puts>
#endif
	return pe_start_message_tx(policy_engine_state::PESinkSelectCap,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80066de:	220f      	movs	r2, #15
 80066e0:	2109      	movs	r1, #9
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff fdd4 	bl	8006290 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 80066e8:	4603      	mov	r3, r0
			PESinkHardReset, &_last_dpm_request);
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	08008414 	.word	0x08008414

080066f8 <_ZN12PolicyEngine18pe_sink_select_capEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_select_cap() {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
	// Have transmitted the selected cap, transition to waiting for the response
	clearEvents();
 8006700:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff fe29 	bl	800635c <_ZN12PolicyEngine11clearEventsEm>
	// wait for a response
	return waitForEvent(PESinkWaitCapResp,
 800670a:	f640 238c 	movw	r3, #2700	; 0xa8c
 800670e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006712:	210a      	movs	r1, #10
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff fe33 	bl	8006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 800671a:	4603      	mov	r3, r0
			(uint32_t) Notifications::MSG_RX | (uint32_t) Notifications::RESET
					| (uint32_t) Notifications::TIMEOUT, PD_T_SENDER_RESPONSE);
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_cap_resp() {
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	/* Wait for a response */
	clearEvents();
 800672c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff fe13 	bl	800635c <_ZN12PolicyEngine11clearEventsEm>

	/* Get the response message */
	while (incomingMessages.getOccupied()) {
 8006736:	e05e      	b.n	80067f6 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xd2>
		incomingMessages.pop(&tempMessage);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3344      	adds	r3, #68	; 0x44
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f000 fc5f 	bl	8007008 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>
		/* If the source accepted our request, wait for the new power message*/
		if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_ACCEPT
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006750:	f003 031f 	and.w	r3, r3, #31
 8006754:	2b03      	cmp	r3, #3
 8006756:	d110      	bne.n	800677a <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x56>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800675e:	131b      	asrs	r3, r3, #12
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	2b00      	cmp	r3, #0
 8006766:	d108      	bne.n	800677a <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x56>
			return waitForEvent(PESinkTransitionSink,
 8006768:	f241 3388 	movw	r3, #5000	; 0x1388
 800676c:	2203      	movs	r2, #3
 800676e:	210b      	movs	r1, #11
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff fe05 	bl	8006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8006776:	4603      	mov	r3, r0
					(uint32_t) Notifications::MSG_RX
							| (uint32_t) Notifications::RESET,
					PD_T_PS_TRANSITION);
 8006778:	e054      	b.n	8006824 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x100>
			/* If the message was a Soft_Reset, do the soft reset procedure */
		} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_SOFT_RESET
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006780:	f003 031f 	and.w	r3, r3, #31
 8006784:	2b0d      	cmp	r3, #13
 8006786:	d109      	bne.n	800679c <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x78>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800678e:	131b      	asrs	r3, r3, #12
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x78>
			return PESinkHandleSoftReset;
 8006798:	2311      	movs	r3, #17
 800679a:	e043      	b.n	8006824 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x100>
			/* If the message was Wait or Reject */
		} else if ((PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_REJECT
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067a2:	f003 031f 	and.w	r3, r3, #31
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d006      	beq.n	80067b8 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x94>
				|| PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_WAIT)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067b0:	f003 031f 	and.w	r3, r3, #31
 80067b4:	2b0c      	cmp	r3, #12
 80067b6:	d11e      	bne.n	80067f6 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xd2>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067be:	131b      	asrs	r3, r3, #12
 80067c0:	f003 0307 	and.w	r3, r3, #7
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d116      	bne.n	80067f6 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xd2>
#ifdef PD_DEBUG_OUTPUT
			printf("Requested Capabilities Rejected\r\n");
 80067c8:	4818      	ldr	r0, [pc, #96]	; (800682c <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x108>)
 80067ca:	f000 fd7f 	bl	80072cc <puts>
#endif
			/* If we don't have an explicit contract, wait for capabilities */
			if (!_explicit_contract) {
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067d4:	f083 0301 	eor.w	r3, r3, #1
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0xbe>
				return PESinkSetupWaitCap;
 80067de:	2305      	movs	r3, #5
 80067e0:	e020      	b.n	8006824 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x100>
				/* If we do have an explicit contract, go to the ready state */
			} else {
				return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL,
 80067e2:	f04f 33ff 	mov.w	r3, #4294967295
 80067e6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80067ea:	210c      	movs	r1, #12
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7ff fdc7 	bl	8006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 80067f2:	4603      	mov	r3, r0
						0xFFFFFFFF);
 80067f4:	e016      	b.n	8006824 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x100>
	while (incomingMessages.getOccupied()) {
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3364      	adds	r3, #100	; 0x64
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7ff fe10 	bl	8006420 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf14      	ite	ne
 8006806:	2301      	movne	r3, #1
 8006808:	2300      	moveq	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d193      	bne.n	8006738 <_ZN12PolicyEngine21pe_sink_wait_cap_respEv+0x14>
			}
		}
	}
	return waitForEvent(PESinkWaitCapResp,
 8006810:	f640 238c 	movw	r3, #2700	; 0xa8c
 8006814:	f241 0203 	movw	r2, #4099	; 0x1003
 8006818:	210a      	movs	r1, #10
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff fdb0 	bl	8006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8006820:	4603      	mov	r3, r0
			(uint32_t) Notifications::MSG_RX | (uint32_t) Notifications::RESET
					| (uint32_t) Notifications::TIMEOUT, PD_T_SENDER_RESPONSE);
 8006822:	bf00      	nop
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	08008430 	.word	0x08008430

08006830 <_ZN12PolicyEngine23pe_sink_transition_sinkEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_transition_sink() {
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	/* Wait for the PS_RDY message */
	clearEvents();
 8006838:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fd8d 	bl	800635c <_ZN12PolicyEngine11clearEventsEm>
	/* If we received a message, read it */
	while (incomingMessages.getOccupied()) {
 8006842:	e01d      	b.n	8006880 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x50>

		incomingMessages.pop(&tempMessage);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3344      	adds	r3, #68	; 0x44
 800684e:	4619      	mov	r1, r3
 8006850:	4610      	mov	r0, r2
 8006852:	f000 fbd9 	bl	8007008 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>

		/* If we got a PS_RDY, handle it */
		if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_PS_RDY
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800685c:	f003 031f 	and.w	r3, r3, #31
 8006860:	2b06      	cmp	r3, #6
 8006862:	d10d      	bne.n	8006880 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x50>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800686a:	131b      	asrs	r3, r3, #12
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	2b00      	cmp	r3, #0
 8006872:	d105      	bne.n	8006880 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x50>
			/* We just finished negotiating an explicit contract */
			_explicit_contract = true;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

			/* Negotiation finished */
			return PESinkReady;
 800687c:	230c      	movs	r3, #12
 800687e:	e00d      	b.n	800689c <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x6c>
	while (incomingMessages.getOccupied()) {
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3364      	adds	r3, #100	; 0x64
 8006884:	4618      	mov	r0, r3
 8006886:	f7ff fdcb 	bl	8006420 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	bf14      	ite	ne
 8006890:	2301      	movne	r3, #1
 8006892:	2300      	moveq	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1d4      	bne.n	8006844 <_ZN12PolicyEngine23pe_sink_transition_sinkEv+0x14>
			/* If there was a protocol error, send a hard reset */
		}
	}
	// Timeout
	return PESinkSendSoftReset;
 800689a:	2312      	movs	r3, #18
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <_ZN12PolicyEngine13pe_sink_readyEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_ready() {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	uint32_t evt = currentEvents;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	60fb      	str	r3, [r7, #12]
	clearEvents();
 80068b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff fd50 	bl	800635c <_ZN12PolicyEngine11clearEventsEm>
	/* If SinkPPSPeriodicTimer ran out, send a new request */
	if (evt & (uint32_t) Notifications::PPS_REQUEST) {
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <_ZN12PolicyEngine13pe_sink_readyEv+0x26>
		return PESinkSelectCap;
 80068c6:	2309      	movs	r3, #9
 80068c8:	e13f      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
	}

	/* If we overheated, send a hard reset */
	if (evt & (uint32_t) Notifications::I_OVRTEMP) {
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <_ZN12PolicyEngine13pe_sink_readyEv+0x34>
		return PESinkHardReset;
 80068d4:	230f      	movs	r3, #15
 80068d6:	e138      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
	}
	/* If the DPM wants us to, send a Get_Source_Cap message */
	if (evt & (uint32_t) Notifications::GET_SOURCE_CAP) {
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <_ZN12PolicyEngine13pe_sink_readyEv+0x42>
		return PESinkGetSourceCap;
 80068e2:	230d      	movs	r3, #13
 80068e4:	e131      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
	}
	/* If the DPM wants new power, let it figure out what power it wants
	 * exactly.  This isn't exactly the transition from the spec (that would be
	 * SelectCap, not EvalCap), but this works better with the particular
	 * design of this firmware. */
	if (evt & (uint32_t) Notifications::NEW_POWER) {
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <_ZN12PolicyEngine13pe_sink_readyEv+0x50>
		/* Tell the protocol layer we're starting an AMS */
		return PESinkEvalCap;
 80068f0:	2307      	movs	r3, #7
 80068f2:	e12a      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
	}

	/* If we received a message */
	if (evt & (uint32_t) Notifications::MSG_RX) {
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 811b 	beq.w	8006b36 <_ZN12PolicyEngine13pe_sink_readyEv+0x292>
		if (incomingMessages.getOccupied()) {
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3364      	adds	r3, #100	; 0x64
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff fd8b 	bl	8006420 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	bf14      	ite	ne
 8006910:	2301      	movne	r3, #1
 8006912:	2300      	moveq	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 810d 	beq.w	8006b36 <_ZN12PolicyEngine13pe_sink_readyEv+0x292>

			incomingMessages.pop(&tempMessage);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3344      	adds	r3, #68	; 0x44
 8006926:	4619      	mov	r1, r3
 8006928:	4610      	mov	r0, r2
 800692a:	f000 fb6d 	bl	8007008 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>

			/* Ignore vendor-defined messages */
			if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_VENDOR_DEFINED
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	2b0f      	cmp	r3, #15
 800693a:	d111      	bne.n	8006960 <_ZN12PolicyEngine13pe_sink_readyEv+0xbc>
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006942:	131b      	asrs	r3, r3, #12
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	2b00      	cmp	r3, #0
 800694a:	dd09      	ble.n	8006960 <_ZN12PolicyEngine13pe_sink_readyEv+0xbc>
				return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL);
 800694c:	f04f 33ff 	mov.w	r3, #4294967295
 8006950:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8006954:	210c      	movs	r1, #12
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff fd12 	bl	8006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 800695c:	4603      	mov	r3, r0
 800695e:	e0f4      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Ignore Ping messages */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_PING
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2b05      	cmp	r3, #5
 800696c:	d111      	bne.n	8006992 <_ZN12PolicyEngine13pe_sink_readyEv+0xee>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006974:	131b      	asrs	r3, r3, #12
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <_ZN12PolicyEngine13pe_sink_readyEv+0xee>
				return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL);
 800697e:	f04f 33ff 	mov.w	r3, #4294967295
 8006982:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8006986:	210c      	movs	r1, #12
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff fcf9 	bl	8006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 800698e:	4603      	mov	r3, r0
 8006990:	e0db      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* DR_Swap messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_DR_SWAP
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006998:	f003 031f 	and.w	r3, r3, #31
 800699c:	2b09      	cmp	r3, #9
 800699e:	d109      	bne.n	80069b4 <_ZN12PolicyEngine13pe_sink_readyEv+0x110>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069a6:	131b      	asrs	r3, r3, #12
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <_ZN12PolicyEngine13pe_sink_readyEv+0x110>
				return PESinkSendNotSupported;
 80069b0:	2315      	movs	r3, #21
 80069b2:	e0ca      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Get_Source_Cap messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_GET_SOURCE_CAP
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2b07      	cmp	r3, #7
 80069c0:	d109      	bne.n	80069d6 <_ZN12PolicyEngine13pe_sink_readyEv+0x132>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069c8:	131b      	asrs	r3, r3, #12
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <_ZN12PolicyEngine13pe_sink_readyEv+0x132>
				return PESinkSendNotSupported;
 80069d2:	2315      	movs	r3, #21
 80069d4:	e0b9      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* PR_Swap messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_PR_SWAP
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069dc:	f003 031f 	and.w	r3, r3, #31
 80069e0:	2b0a      	cmp	r3, #10
 80069e2:	d109      	bne.n	80069f8 <_ZN12PolicyEngine13pe_sink_readyEv+0x154>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069ea:	131b      	asrs	r3, r3, #12
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <_ZN12PolicyEngine13pe_sink_readyEv+0x154>
				return PESinkSendNotSupported;
 80069f4:	2315      	movs	r3, #21
 80069f6:	e0a8      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* VCONN_Swap messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_VCONN_SWAP
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069fe:	f003 031f 	and.w	r3, r3, #31
 8006a02:	2b0b      	cmp	r3, #11
 8006a04:	d109      	bne.n	8006a1a <_ZN12PolicyEngine13pe_sink_readyEv+0x176>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a0c:	131b      	asrs	r3, r3, #12
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <_ZN12PolicyEngine13pe_sink_readyEv+0x176>
				return PESinkSendNotSupported;
 8006a16:	2315      	movs	r3, #21
 8006a18:	e097      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Request messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_REQUEST
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d109      	bne.n	8006a3c <_ZN12PolicyEngine13pe_sink_readyEv+0x198>
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a2e:	131b      	asrs	r3, r3, #12
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dd01      	ble.n	8006a3c <_ZN12PolicyEngine13pe_sink_readyEv+0x198>
				return PESinkSendNotSupported;
 8006a38:	2315      	movs	r3, #21
 8006a3a:	e086      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Sink_Capabilities messages are not supported */
			} else if (PD_MSGTYPE_GET(&tempMessage)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d109      	bne.n	8006a5e <_ZN12PolicyEngine13pe_sink_readyEv+0x1ba>
					== PD_MSGTYPE_SINK_CAPABILITIES
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a50:	131b      	asrs	r3, r3, #12
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	dd01      	ble.n	8006a5e <_ZN12PolicyEngine13pe_sink_readyEv+0x1ba>
				return PESinkSendNotSupported;
 8006a5a:	2315      	movs	r3, #21
 8006a5c:	e075      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Handle GotoMin messages */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_GOTOMIN
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a64:	f003 031f 	and.w	r3, r3, #31
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d109      	bne.n	8006a80 <_ZN12PolicyEngine13pe_sink_readyEv+0x1dc>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a72:	131b      	asrs	r3, r3, #12
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <_ZN12PolicyEngine13pe_sink_readyEv+0x1dc>
				return PESinkSendNotSupported;
 8006a7c:	2315      	movs	r3, #21
 8006a7e:	e064      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Evaluate new Source_Capabilities */
			} else if (PD_MSGTYPE_GET(&tempMessage)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d109      	bne.n	8006aa2 <_ZN12PolicyEngine13pe_sink_readyEv+0x1fe>
					== PD_MSGTYPE_SOURCE_CAPABILITIES
					&& PD_NUMOBJ_GET(&tempMessage) > 0) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a94:	131b      	asrs	r3, r3, #12
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	dd01      	ble.n	8006aa2 <_ZN12PolicyEngine13pe_sink_readyEv+0x1fe>
				return PESinkEvalCap;
 8006a9e:	2307      	movs	r3, #7
 8006aa0:	e053      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* Give sink capabilities when asked */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_GET_SINK_CAP
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	2b08      	cmp	r3, #8
 8006aae:	d109      	bne.n	8006ac4 <_ZN12PolicyEngine13pe_sink_readyEv+0x220>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ab6:	131b      	asrs	r3, r3, #12
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <_ZN12PolicyEngine13pe_sink_readyEv+0x220>
				return PESinkGiveSinkCap;
 8006ac0:	230e      	movs	r3, #14
 8006ac2:	e042      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* If the message was a Soft_Reset, do the soft reset procedure */
			} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_SOFT_RESET
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b0d      	cmp	r3, #13
 8006ad0:	d109      	bne.n	8006ae6 <_ZN12PolicyEngine13pe_sink_readyEv+0x242>
					&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ad8:	131b      	asrs	r3, r3, #12
 8006ada:	f003 0307 	and.w	r3, r3, #7
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <_ZN12PolicyEngine13pe_sink_readyEv+0x242>
				return PESinkHandleSoftReset;
 8006ae2:	2311      	movs	r3, #17
 8006ae4:	e031      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				/* PD 3.0 messges */
			} else if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_3_0) {
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006aea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aee:	2b80      	cmp	r3, #128	; 0x80
 8006af0:	d121      	bne.n	8006b36 <_ZN12PolicyEngine13pe_sink_readyEv+0x292>
				/* If the message is a multi-chunk extended message, let it
				 * time out. */
				if ((tempMessage.hdr & PD_HDR_EXT)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006af8:	b21b      	sxth	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	da08      	bge.n	8006b10 <_ZN12PolicyEngine13pe_sink_readyEv+0x26c>
						&& (PD_DATA_SIZE_GET(&tempMessage)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b08:	2b1a      	cmp	r3, #26
 8006b0a:	dd01      	ble.n	8006b10 <_ZN12PolicyEngine13pe_sink_readyEv+0x26c>
								> PD_MAX_EXT_MSG_LEGACY_LEN)) {

					return PESinkChunkReceived;
 8006b0c:	2316      	movs	r3, #22
 8006b0e:	e01c      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
					/* Tell the DPM a message we sent got a response of
					 * Not_Supported. */
				} else if (PD_MSGTYPE_GET(&tempMessage)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	2b10      	cmp	r3, #16
 8006b1c:	d109      	bne.n	8006b32 <_ZN12PolicyEngine13pe_sink_readyEv+0x28e>
						== PD_MSGTYPE_NOT_SUPPORTED
						&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b24:	131b      	asrs	r3, r3, #12
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <_ZN12PolicyEngine13pe_sink_readyEv+0x28e>

					return PESinkNotSupportedReceived;
 8006b2e:	2317      	movs	r3, #23
 8006b30:	e00b      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
					/* If we got an unknown message, send a soft reset */
				} else {

					return PESinkSendSoftReset;
 8006b32:	2312      	movs	r3, #18
 8006b34:	e009      	b.n	8006b4a <_ZN12PolicyEngine13pe_sink_readyEv+0x2a6>
				}
			}
		}
	}

	return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL, 0xFFFFFFFF);
 8006b36:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8006b3e:	210c      	movs	r1, #12
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff fc1d 	bl	8006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8006b46:	4603      	mov	r3, r0
 8006b48:	bf00      	nop
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <_ZN12PolicyEngine22pe_sink_get_source_capEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_get_source_cap() {
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
	/* Get a message object */
	pd_msg *get_source_cap = &tempMessage;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3344      	adds	r3, #68	; 0x44
 8006b5e:	60fb      	str	r3, [r7, #12]
	/* Make a Get_Source_Cap message */
	get_source_cap->hdr = hdr_template | PD_MSGTYPE_GET_SOURCE_CAP
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b64:	f043 0307 	orr.w	r3, r3, #7
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	805a      	strh	r2, [r3, #2]
			| PD_NUMOBJ(0);
	/* Transmit the Get_Source_Cap */
	// On fail -> hard reset, on send -> Sink Ready
	return pe_start_message_tx(PESinkReady, PESinkHardReset, get_source_cap);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	220f      	movs	r2, #15
 8006b72:	210c      	movs	r1, #12
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fb8b 	bl	8006290 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 8006b7a:	4603      	mov	r3, r0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <_ZN12PolicyEngine21pe_sink_give_sink_capEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_give_sink_cap() {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
	/* Get a message object */
	pd_msg *snk_cap = &tempMessage;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3344      	adds	r3, #68	; 0x44
 8006b90:	60fb      	str	r3, [r7, #12]
	/* Get our capabilities from the DPM */
	pdbs_dpm_get_sink_capability(snk_cap,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	695b      	ldr	r3, [r3, #20]
			((hdr_template & PD_HDR_SPECREV) >= PD_SPECREV_3_0));
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8006b9a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
	pdbs_dpm_get_sink_capability(snk_cap,
 8006b9e:	2a7f      	cmp	r2, #127	; 0x7f
 8006ba0:	bfcc      	ite	gt
 8006ba2:	2201      	movgt	r2, #1
 8006ba4:	2200      	movle	r2, #0
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	4611      	mov	r1, r2
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	4798      	blx	r3
	/* Transmit our capabilities */
	return pe_start_message_tx(PESinkReady, PESinkHardReset, snk_cap);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	220f      	movs	r2, #15
 8006bb2:	210c      	movs	r1, #12
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff fb6b 	bl	8006290 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 8006bba:	4603      	mov	r3, r0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <_ZN12PolicyEngine18pe_sink_hard_resetEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_hard_reset() {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
	/* If we've already sent the maximum number of hard resets, assume the
	 * source is unresponsive. */

#ifdef PD_DEBUG_OUTPUT
	printf("Sending hard reset\r\n");
 8006bcc:	480c      	ldr	r0, [pc, #48]	; (8006c00 <_ZN12PolicyEngine18pe_sink_hard_resetEv+0x3c>)
 8006bce:	f000 fb7d 	bl	80072cc <puts>
#endif
	if (_hard_reset_counter > PD_N_HARD_RESET_COUNT) {
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	dd01      	ble.n	8006be0 <_ZN12PolicyEngine18pe_sink_hard_resetEv+0x1c>
		return PESinkSourceUnresponsive;
 8006bdc:	2318      	movs	r3, #24
 8006bde:	e00a      	b.n	8006bf6 <_ZN12PolicyEngine18pe_sink_hard_resetEv+0x32>
	}
	// So, we could send a hardreset here; however that will cause a power cycle
	// on the PSU end.. Which will then reset this MCU So therefore we went get
	// anywhere :)
	/* Increment HardResetCounter */
	_hard_reset_counter++;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	3301      	adds	r3, #1
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	b25a      	sxtb	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	return PESinkTransitionDefault;
 8006bf4:	2310      	movs	r3, #16
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	08008454 	.word	0x08008454

08006c04 <_ZN12PolicyEngine26pe_sink_transition_defaultEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_transition_default() {
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
	_explicit_contract = false;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	/* There is no local hardware to reset. */
	/* Since we never change our data role from UFP, there is no reason to set
	 * it here. */

	return PESinkStartup;
 8006c14:	2303      	movs	r3, #3
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr

08006c20 <_ZN12PolicyEngine18pe_sink_soft_resetEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_soft_reset() {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	; 0x28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	 * when a Soft_Reset message is received. */

	/* Get a message object */
	pd_msg accept;
	/* Make an soft reset message */
	accept.hdr = hdr_template | PD_MSGTYPE_SOFT_RESET | PD_NUMOBJ(0);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c2c:	f043 030d 	orr.w	r3, r3, #13
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	817b      	strh	r3, [r7, #10]
	/* Transmit the Accept */
	return pe_start_message_tx(PESinkSetupWaitCap, PESinkHardReset, &accept);
 8006c34:	f107 0308 	add.w	r3, r7, #8
 8006c38:	220f      	movs	r2, #15
 8006c3a:	2105      	movs	r1, #5
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff fb27 	bl	8006290 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 8006c42:	4603      	mov	r3, r0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3728      	adds	r7, #40	; 0x28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <_ZN12PolicyEngine23pe_sink_send_soft_resetEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_send_soft_reset() {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	/* No need to explicitly reset the protocol layer here.  It resets itself
	 * just before a Soft_Reset message is transmitted. */

#ifdef PD_DEBUG_OUTPUT
	printf("Sending soft reset\r\n");
 8006c54:	480b      	ldr	r0, [pc, #44]	; (8006c84 <_ZN12PolicyEngine23pe_sink_send_soft_resetEv+0x38>)
 8006c56:	f000 fb39 	bl	80072cc <puts>
#endif
	/* Get a message object */
	pd_msg *softrst = &tempMessage;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3344      	adds	r3, #68	; 0x44
 8006c5e:	60fb      	str	r3, [r7, #12]
	/* Make a Soft_Reset message */
	softrst->hdr = hdr_template | PD_MSGTYPE_SOFT_RESET | PD_NUMOBJ(0);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c64:	f043 030d 	orr.w	r3, r3, #13
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	805a      	strh	r2, [r3, #2]
	/* Transmit the soft reset */
	return pe_start_message_tx(PESinkSendSoftResetTxOK, PESinkHardReset,
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	220f      	movs	r2, #15
 8006c72:	2113      	movs	r1, #19
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff fb0b 	bl	8006290 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 8006c7a:	4603      	mov	r3, r0
			softrst);
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	08008468 	.word	0x08008468

08006c88 <_ZN12PolicyEngine29pe_sink_send_soft_reset_tx_okEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_send_soft_reset_tx_ok() {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
	// Transmit is good, wait for response event
	return waitForEvent(PESinkSendSoftResetResp,
 8006c90:	f640 238c 	movw	r3, #2700	; 0xa8c
 8006c94:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c98:	2114      	movs	r1, #20
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fb70 	bl	8006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8006ca0:	4603      	mov	r3, r0
			(uint32_t) Notifications::TIMEOUT | (uint32_t) Notifications::MSG_RX
					| (uint32_t) Notifications::RESET, PD_T_SENDER_RESPONSE);
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_send_soft_reset_resp() {
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]

	/* Wait for a response */
	clearEvents();
 8006cb2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fb50 	bl	800635c <_ZN12PolicyEngine11clearEventsEm>

	/* Get the response message */
	if (incomingMessages.getOccupied()) {
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3364      	adds	r3, #100	; 0x64
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff fbad 	bl	8006420 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	bf14      	ite	ne
 8006ccc:	2301      	movne	r3, #1
 8006cce:	2300      	moveq	r3, #0
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d02c      	beq.n	8006d30 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x86>

		incomingMessages.pop(&tempMessage);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3344      	adds	r3, #68	; 0x44
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f000 f990 	bl	8007008 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>

		/* If the source accepted our soft reset, wait for capabilities. */
		if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_ACCEPT
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cee:	f003 031f 	and.w	r3, r3, #31
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d109      	bne.n	8006d0a <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x60>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cfc:	131b      	asrs	r3, r3, #12
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x60>

			return PESinkSetupWaitCap;
 8006d06:	2305      	movs	r3, #5
 8006d08:	e013      	b.n	8006d32 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x88>
			/* If the message was a Soft_Reset, do the soft reset procedure */
		} else if (PD_MSGTYPE_GET(&tempMessage) == PD_MSGTYPE_SOFT_RESET
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	2b0d      	cmp	r3, #13
 8006d16:	d109      	bne.n	8006d2c <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x82>
				&& PD_NUMOBJ_GET(&tempMessage) == 0) {
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d1e:	131b      	asrs	r3, r3, #12
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x82>
			return PESinkHandleSoftReset;
 8006d28:	2311      	movs	r3, #17
 8006d2a:	e002      	b.n	8006d32 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x88>
			/* Otherwise, send a hard reset */
		} else {
			return PESinkHardReset;
 8006d2c:	230f      	movs	r3, #15
 8006d2e:	e000      	b.n	8006d32 <_ZN12PolicyEngine28pe_sink_send_soft_reset_respEv+0x88>
		}
	}
	return PESinkHardReset;
 8006d30:	230f      	movs	r3, #15
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <_ZN12PolicyEngine26pe_sink_send_not_supportedEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_send_not_supported() {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
	/* Get a message object */

#ifdef PD_DEBUG_OUTPUT
	printf("Sending not supported\r\n");
 8006d44:	4815      	ldr	r0, [pc, #84]	; (8006d9c <_ZN12PolicyEngine26pe_sink_send_not_supportedEv+0x60>)
 8006d46:	f000 fac1 	bl	80072cc <puts>
#endif
	if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_2_0) {
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d52:	2b40      	cmp	r3, #64	; 0x40
 8006d54:	d108      	bne.n	8006d68 <_ZN12PolicyEngine26pe_sink_send_not_supportedEv+0x2c>
		/* Make a Reject message */
		tempMessage.hdr = hdr_template | PD_MSGTYPE_REJECT | PD_NUMOBJ(0);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d5a:	f043 0304 	orr.w	r3, r3, #4
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006d66:	e00d      	b.n	8006d84 <_ZN12PolicyEngine26pe_sink_send_not_supportedEv+0x48>
	} else if ((hdr_template & PD_HDR_SPECREV) == PD_SPECREV_3_0) {
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d70:	2b80      	cmp	r3, #128	; 0x80
 8006d72:	d107      	bne.n	8006d84 <_ZN12PolicyEngine26pe_sink_send_not_supportedEv+0x48>
		/* Make a Not_Supported message */
		tempMessage.hdr =
				hdr_template | PD_MSGTYPE_NOT_SUPPORTED | PD_NUMOBJ(0);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d78:	f043 0310 	orr.w	r3, r3, #16
 8006d7c:	b29a      	uxth	r2, r3
		tempMessage.hdr =
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	}

	/* Transmit the message */
	return pe_start_message_tx(PESinkReady, PESinkSendSoftReset, &tempMessage);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3344      	adds	r3, #68	; 0x44
 8006d88:	2212      	movs	r2, #18
 8006d8a:	210c      	movs	r1, #12
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fa7f 	bl	8006290 <_ZN12PolicyEngine19pe_start_message_txENS_19policy_engine_stateES0_P6pd_msg>
 8006d92:	4603      	mov	r3, r0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	0800847c 	.word	0x0800847c

08006da0 <_ZN12PolicyEngine22pe_sink_chunk_receivedEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_chunk_received() {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]

	/* Wait for tChunkingNotSupported */
	osDelay(PD_T_CHUNKING_NOT_SUPPORTED);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006db0:	4798      	blx	r3

	return PESinkSendNotSupported;
 8006db2:	2315      	movs	r3, #21
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <_ZN12PolicyEngine30pe_sink_not_supported_receivedEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_not_supported_received() {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	/* Inform the Device Policy Manager that we received a Not_Supported
	 * message. */

	return waitForEvent(PESinkReady, (uint32_t) Notifications::ALL, 0xFFFFFFFF);
 8006dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc8:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8006dcc:	210c      	movs	r1, #12
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff fad6 	bl	8006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8006dd4:	4603      	mov	r3, r0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <_ZN12PolicyEngine27pe_sink_source_unresponsiveEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_source_unresponsive() {
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
	// Sit and chill, as PD is not working
	osDelay(PD_T_PD_DEBOUNCE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006dee:	4798      	blx	r3

	return PESinkSourceUnresponsive;
 8006df0:	2318      	movs	r3, #24
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <_ZN12PolicyEngine18pe_sink_wait_eventEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_event() {
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
	// Check timeout
	if (getTimeStamp() > waitingEventsTimeout) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	4798      	blx	r3
 8006e08:	4602      	mov	r2, r0
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	bf8c      	ite	hi
 8006e12:	2301      	movhi	r3, #1
 8006e14:	2300      	movls	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d004      	beq.n	8006e26 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x2c>
		notify(Notifications::TIMEOUT);
 8006e1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff f8b1 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
	}
	if (currentEvents & (uint32_t) Notifications::TIMEOUT) {
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d012      	beq.n	8006e58 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x5e>
		clearEvents();
 8006e32:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff fa90 	bl	800635c <_ZN12PolicyEngine11clearEventsEm>
		if (postNotifcationEvalState>=PESinkHandleSoftReset && postNotifcationEvalState<=PESinkSendSoftResetResp){
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006e42:	2b10      	cmp	r3, #16
 8006e44:	d906      	bls.n	8006e54 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x5a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006e4c:	2b14      	cmp	r3, #20
 8006e4e:	d801      	bhi.n	8006e54 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x5a>
			//Timeout in soft reset, so reset state machine
			return PESinkStartup;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e015      	b.n	8006e80 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x86>
		}
		return PESinkSendSoftReset;
 8006e54:	2312      	movs	r3, #18
 8006e56:	e013      	b.n	8006e80 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x86>
	}
	if (currentEvents & (uint32_t) Notifications::RESET) {
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x6e>
		return PESinkTransitionDefault;
 8006e64:	2310      	movs	r3, #16
 8006e66:	e00b      	b.n	8006e80 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x86>
	}

	if (currentEvents & waitingEventsMask) {
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	4013      	ands	r3, r2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x84>
		return postNotifcationEvalState;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006e7c:	e000      	b.n	8006e80 <_ZN12PolicyEngine18pe_sink_wait_eventEv+0x86>
	}
	return policy_engine_state::PEWaitingEvent;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <_ZN12PolicyEngine21pe_sink_wait_good_crcEv>:

PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_good_crc() {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	; 0x28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
	clearEvents();
 8006e90:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff fa61 	bl	800635c <_ZN12PolicyEngine11clearEventsEm>

	if (incomingMessages.getOccupied()) {
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3364      	adds	r3, #100	; 0x64
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff fabe 	bl	8006420 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bf14      	ite	ne
 8006eaa:	2301      	movne	r3, #1
 8006eac:	2300      	moveq	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d03a      	beq.n	8006f2a <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0xa2>
		// Wait for the Good CRC
		pd_msg goodcrc;
		/* Read the GoodCRC */
		incomingMessages.pop(&goodcrc);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3364      	adds	r3, #100	; 0x64
 8006eb8:	f107 0208 	add.w	r2, r7, #8
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 f8a2 	bl	8007008 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>

		/* Check that the message is correct */
		if (PD_MSGTYPE_GET(&goodcrc) == PD_MSGTYPE_GOODCRC
 8006ec4:	897b      	ldrh	r3, [r7, #10]
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d125      	bne.n	8006f1a <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0x92>
				&& PD_NUMOBJ_GET(&goodcrc) == 0
 8006ece:	897b      	ldrh	r3, [r7, #10]
 8006ed0:	131b      	asrs	r3, r3, #12
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d11f      	bne.n	8006f1a <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0x92>
				&& PD_MESSAGEID_GET(&goodcrc) == _tx_messageidcounter) {
 8006eda:	897b      	ldrh	r3, [r7, #10]
 8006edc:	125b      	asrs	r3, r3, #9
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d116      	bne.n	8006f1a <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0x92>
			/* Increment MessageIDCounter */
			_tx_messageidcounter = (_tx_messageidcounter + 1) % 8;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	425a      	negs	r2, r3
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	f002 0207 	and.w	r2, r2, #7
 8006efe:	bf58      	it	pl
 8006f00:	4253      	negpl	r3, r2
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

			notify(Notifications::TX_DONE);
 8006f0a:	2104      	movs	r1, #4
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff f83b 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
			return postSendState;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f18:	e00e      	b.n	8006f38 <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0xb0>
		} else {
			notify(Notifications::TX_ERR);
 8006f1a:	2108      	movs	r1, #8
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff f833 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
			return postSendFailedState;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f28:	e006      	b.n	8006f38 <_ZN12PolicyEngine21pe_sink_wait_good_crcEv+0xb0>
		}
	}
	notify(Notifications::TX_ERR);
 8006f2a:	2108      	movs	r1, #8
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff f82b 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
	return postSendFailedState;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3728      	adds	r7, #40	; 0x28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv>:
PolicyEngine::policy_engine_state PolicyEngine::pe_sink_wait_send_done() {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

	/* Waiting for response*/
	uint32_t evt = currentEvents;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	60fb      	str	r3, [r7, #12]
	clearEvents();
 8006f4e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff fa02 	bl	800635c <_ZN12PolicyEngine11clearEventsEm>

	if ((uint32_t) evt & (uint32_t) Notifications::DISCARD) {
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d016      	beq.n	8006f90 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0x50>
		// increment the counter
		_tx_messageidcounter = (_tx_messageidcounter + 1) % 8;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006f68:	3301      	adds	r3, #1
 8006f6a:	425a      	negs	r2, r3
 8006f6c:	f003 0307 	and.w	r3, r3, #7
 8006f70:	f002 0207 	and.w	r2, r2, #7
 8006f74:	bf58      	it	pl
 8006f76:	4253      	negpl	r3, r2
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		notify(Notifications::TX_ERR);
 8006f80:	2108      	movs	r1, #8
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff f800 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
		return postSendFailedState;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f8e:	e037      	b.n	8007000 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xc0>
	}

	/* If the message was sent successfully */
	if ((uint32_t) evt & (uint32_t) Notifications::I_TXSENT) {
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d01e      	beq.n	8006fd8 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0x98>

		clearEvents();
 8006f9a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff f9dc 	bl	800635c <_ZN12PolicyEngine11clearEventsEm>
		if (incomingMessages.getOccupied()) {
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3364      	adds	r3, #100	; 0x64
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fa39 	bl	8006420 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d004      	beq.n	8006fc8 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0x88>
			return pe_sink_wait_good_crc();
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff ff62 	bl	8006e88 <_ZN12PolicyEngine21pe_sink_wait_good_crcEv>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	e01b      	b.n	8007000 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xc0>
		} else {
			// No Good CRC has arrived, these should _normally_ come really fast, but users implementation may be lagging
			// Setup a callback for this state
			return waitForEvent(PEWaitingMessageGoodCRC,
 8006fc8:	2364      	movs	r3, #100	; 0x64
 8006fca:	2202      	movs	r2, #2
 8006fcc:	2102      	movs	r1, #2
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff f9d6 	bl	8006380 <_ZN12PolicyEngine12waitForEventENS_19policy_engine_stateEmm>
 8006fd4:	4603      	mov	r3, r0
					(uint32_t) Notifications::MSG_RX, 100);
 8006fd6:	e013      	b.n	8007000 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xc0>
		}
	}
	/* If the message failed to be sent */
	if ((uint32_t) evt & (uint32_t) Notifications::I_RETRYFAIL) {
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d007      	beq.n	8006ff2 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xb2>
		notify(Notifications::TX_ERR);
 8006fe2:	2108      	movs	r1, #8
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7fe ffcf 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
		return postSendFailedState;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ff0:	e006      	b.n	8007000 <_ZN12PolicyEngine22pe_sink_wait_send_doneEv+0xc0>
	}

	/* Silence the compiler warning */
	notify(Notifications::TX_ERR);
 8006ff2:	2108      	movs	r1, #8
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7fe ffc7 	bl	8005f88 <_ZN12PolicyEngine6notifyENS_13NotificationsE>
	return postSendFailedState;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_>:
  void pop(T *dest) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
    if (getOccupied() == 0) {
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff fa04 	bl	8006420 <_ZNK10ringbufferI6pd_msgLj4EE11getOccupiedEv>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	bf0c      	ite	eq
 800701e:	2301      	moveq	r3, #1
 8007020:	2300      	movne	r3, #0
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d125      	bne.n	8007074 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x6c>
    if (dest) {
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x3c>
      memcpy(dest, buffer + begin, sizeof(T));
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007036:	015b      	lsls	r3, r3, #5
 8007038:	4413      	add	r3, r2
 800703a:	2220      	movs	r2, #32
 800703c:	4619      	mov	r1, r3
 800703e:	6838      	ldr	r0, [r7, #0]
 8007040:	f000 fa9f 	bl	8007582 <memcpy>
    begin = (begin + 1) % size;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800704a:	3301      	adds	r3, #1
 800704c:	f003 0203 	and.w	r2, r3, #3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (wrap && (begin == 0)) {
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x6e>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007066:	2b00      	cmp	r3, #0
 8007068:	d105      	bne.n	8007076 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x6e>
      wrap = false;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8007072:	e000      	b.n	8007076 <_ZN10ringbufferI6pd_msgLj4EE3popEPS0_+0x6e>
      return;
 8007074:	bf00      	nop
  }
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <std>:
 800707c:	2300      	movs	r3, #0
 800707e:	b510      	push	{r4, lr}
 8007080:	4604      	mov	r4, r0
 8007082:	e9c0 3300 	strd	r3, r3, [r0]
 8007086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800708a:	6083      	str	r3, [r0, #8]
 800708c:	8181      	strh	r1, [r0, #12]
 800708e:	6643      	str	r3, [r0, #100]	; 0x64
 8007090:	81c2      	strh	r2, [r0, #14]
 8007092:	6183      	str	r3, [r0, #24]
 8007094:	4619      	mov	r1, r3
 8007096:	2208      	movs	r2, #8
 8007098:	305c      	adds	r0, #92	; 0x5c
 800709a:	f000 f9f7 	bl	800748c <memset>
 800709e:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <std+0x58>)
 80070a0:	6224      	str	r4, [r4, #32]
 80070a2:	6263      	str	r3, [r4, #36]	; 0x24
 80070a4:	4b0c      	ldr	r3, [pc, #48]	; (80070d8 <std+0x5c>)
 80070a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <std+0x60>)
 80070aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070ac:	4b0c      	ldr	r3, [pc, #48]	; (80070e0 <std+0x64>)
 80070ae:	6323      	str	r3, [r4, #48]	; 0x30
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <std+0x68>)
 80070b2:	429c      	cmp	r4, r3
 80070b4:	d006      	beq.n	80070c4 <std+0x48>
 80070b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80070ba:	4294      	cmp	r4, r2
 80070bc:	d002      	beq.n	80070c4 <std+0x48>
 80070be:	33d0      	adds	r3, #208	; 0xd0
 80070c0:	429c      	cmp	r4, r3
 80070c2:	d105      	bne.n	80070d0 <std+0x54>
 80070c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070cc:	f000 ba56 	b.w	800757c <__retarget_lock_init_recursive>
 80070d0:	bd10      	pop	{r4, pc}
 80070d2:	bf00      	nop
 80070d4:	080072dd 	.word	0x080072dd
 80070d8:	080072ff 	.word	0x080072ff
 80070dc:	08007337 	.word	0x08007337
 80070e0:	0800735b 	.word	0x0800735b
 80070e4:	20000308 	.word	0x20000308

080070e8 <stdio_exit_handler>:
 80070e8:	4a02      	ldr	r2, [pc, #8]	; (80070f4 <stdio_exit_handler+0xc>)
 80070ea:	4903      	ldr	r1, [pc, #12]	; (80070f8 <stdio_exit_handler+0x10>)
 80070ec:	4803      	ldr	r0, [pc, #12]	; (80070fc <stdio_exit_handler+0x14>)
 80070ee:	f000 b869 	b.w	80071c4 <_fwalk_sglue>
 80070f2:	bf00      	nop
 80070f4:	20000014 	.word	0x20000014
 80070f8:	08007e39 	.word	0x08007e39
 80070fc:	20000020 	.word	0x20000020

08007100 <cleanup_stdio>:
 8007100:	6841      	ldr	r1, [r0, #4]
 8007102:	4b0c      	ldr	r3, [pc, #48]	; (8007134 <cleanup_stdio+0x34>)
 8007104:	b510      	push	{r4, lr}
 8007106:	4299      	cmp	r1, r3
 8007108:	4604      	mov	r4, r0
 800710a:	d001      	beq.n	8007110 <cleanup_stdio+0x10>
 800710c:	f000 fe94 	bl	8007e38 <_fflush_r>
 8007110:	68a1      	ldr	r1, [r4, #8]
 8007112:	4b09      	ldr	r3, [pc, #36]	; (8007138 <cleanup_stdio+0x38>)
 8007114:	4299      	cmp	r1, r3
 8007116:	d002      	beq.n	800711e <cleanup_stdio+0x1e>
 8007118:	4620      	mov	r0, r4
 800711a:	f000 fe8d 	bl	8007e38 <_fflush_r>
 800711e:	68e1      	ldr	r1, [r4, #12]
 8007120:	4b06      	ldr	r3, [pc, #24]	; (800713c <cleanup_stdio+0x3c>)
 8007122:	4299      	cmp	r1, r3
 8007124:	d004      	beq.n	8007130 <cleanup_stdio+0x30>
 8007126:	4620      	mov	r0, r4
 8007128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800712c:	f000 be84 	b.w	8007e38 <_fflush_r>
 8007130:	bd10      	pop	{r4, pc}
 8007132:	bf00      	nop
 8007134:	20000308 	.word	0x20000308
 8007138:	20000370 	.word	0x20000370
 800713c:	200003d8 	.word	0x200003d8

08007140 <global_stdio_init.part.0>:
 8007140:	b510      	push	{r4, lr}
 8007142:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <global_stdio_init.part.0+0x30>)
 8007144:	4c0b      	ldr	r4, [pc, #44]	; (8007174 <global_stdio_init.part.0+0x34>)
 8007146:	4a0c      	ldr	r2, [pc, #48]	; (8007178 <global_stdio_init.part.0+0x38>)
 8007148:	4620      	mov	r0, r4
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	2104      	movs	r1, #4
 800714e:	2200      	movs	r2, #0
 8007150:	f7ff ff94 	bl	800707c <std>
 8007154:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007158:	2201      	movs	r2, #1
 800715a:	2109      	movs	r1, #9
 800715c:	f7ff ff8e 	bl	800707c <std>
 8007160:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007164:	2202      	movs	r2, #2
 8007166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800716a:	2112      	movs	r1, #18
 800716c:	f7ff bf86 	b.w	800707c <std>
 8007170:	20000440 	.word	0x20000440
 8007174:	20000308 	.word	0x20000308
 8007178:	080070e9 	.word	0x080070e9

0800717c <__sfp_lock_acquire>:
 800717c:	4801      	ldr	r0, [pc, #4]	; (8007184 <__sfp_lock_acquire+0x8>)
 800717e:	f000 b9fe 	b.w	800757e <__retarget_lock_acquire_recursive>
 8007182:	bf00      	nop
 8007184:	20000449 	.word	0x20000449

08007188 <__sfp_lock_release>:
 8007188:	4801      	ldr	r0, [pc, #4]	; (8007190 <__sfp_lock_release+0x8>)
 800718a:	f000 b9f9 	b.w	8007580 <__retarget_lock_release_recursive>
 800718e:	bf00      	nop
 8007190:	20000449 	.word	0x20000449

08007194 <__sinit>:
 8007194:	b510      	push	{r4, lr}
 8007196:	4604      	mov	r4, r0
 8007198:	f7ff fff0 	bl	800717c <__sfp_lock_acquire>
 800719c:	6a23      	ldr	r3, [r4, #32]
 800719e:	b11b      	cbz	r3, 80071a8 <__sinit+0x14>
 80071a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a4:	f7ff bff0 	b.w	8007188 <__sfp_lock_release>
 80071a8:	4b04      	ldr	r3, [pc, #16]	; (80071bc <__sinit+0x28>)
 80071aa:	6223      	str	r3, [r4, #32]
 80071ac:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <__sinit+0x2c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1f5      	bne.n	80071a0 <__sinit+0xc>
 80071b4:	f7ff ffc4 	bl	8007140 <global_stdio_init.part.0>
 80071b8:	e7f2      	b.n	80071a0 <__sinit+0xc>
 80071ba:	bf00      	nop
 80071bc:	08007101 	.word	0x08007101
 80071c0:	20000440 	.word	0x20000440

080071c4 <_fwalk_sglue>:
 80071c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c8:	4607      	mov	r7, r0
 80071ca:	4688      	mov	r8, r1
 80071cc:	4614      	mov	r4, r2
 80071ce:	2600      	movs	r6, #0
 80071d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071d4:	f1b9 0901 	subs.w	r9, r9, #1
 80071d8:	d505      	bpl.n	80071e6 <_fwalk_sglue+0x22>
 80071da:	6824      	ldr	r4, [r4, #0]
 80071dc:	2c00      	cmp	r4, #0
 80071de:	d1f7      	bne.n	80071d0 <_fwalk_sglue+0xc>
 80071e0:	4630      	mov	r0, r6
 80071e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071e6:	89ab      	ldrh	r3, [r5, #12]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d907      	bls.n	80071fc <_fwalk_sglue+0x38>
 80071ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071f0:	3301      	adds	r3, #1
 80071f2:	d003      	beq.n	80071fc <_fwalk_sglue+0x38>
 80071f4:	4629      	mov	r1, r5
 80071f6:	4638      	mov	r0, r7
 80071f8:	47c0      	blx	r8
 80071fa:	4306      	orrs	r6, r0
 80071fc:	3568      	adds	r5, #104	; 0x68
 80071fe:	e7e9      	b.n	80071d4 <_fwalk_sglue+0x10>

08007200 <iprintf>:
 8007200:	b40f      	push	{r0, r1, r2, r3}
 8007202:	b507      	push	{r0, r1, r2, lr}
 8007204:	4906      	ldr	r1, [pc, #24]	; (8007220 <iprintf+0x20>)
 8007206:	ab04      	add	r3, sp, #16
 8007208:	6808      	ldr	r0, [r1, #0]
 800720a:	f853 2b04 	ldr.w	r2, [r3], #4
 800720e:	6881      	ldr	r1, [r0, #8]
 8007210:	9301      	str	r3, [sp, #4]
 8007212:	f000 fae1 	bl	80077d8 <_vfiprintf_r>
 8007216:	b003      	add	sp, #12
 8007218:	f85d eb04 	ldr.w	lr, [sp], #4
 800721c:	b004      	add	sp, #16
 800721e:	4770      	bx	lr
 8007220:	2000006c 	.word	0x2000006c

08007224 <_puts_r>:
 8007224:	6a03      	ldr	r3, [r0, #32]
 8007226:	b570      	push	{r4, r5, r6, lr}
 8007228:	4605      	mov	r5, r0
 800722a:	460e      	mov	r6, r1
 800722c:	6884      	ldr	r4, [r0, #8]
 800722e:	b90b      	cbnz	r3, 8007234 <_puts_r+0x10>
 8007230:	f7ff ffb0 	bl	8007194 <__sinit>
 8007234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007236:	07db      	lsls	r3, r3, #31
 8007238:	d405      	bmi.n	8007246 <_puts_r+0x22>
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	0598      	lsls	r0, r3, #22
 800723e:	d402      	bmi.n	8007246 <_puts_r+0x22>
 8007240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007242:	f000 f99c 	bl	800757e <__retarget_lock_acquire_recursive>
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	0719      	lsls	r1, r3, #28
 800724a:	d513      	bpl.n	8007274 <_puts_r+0x50>
 800724c:	6923      	ldr	r3, [r4, #16]
 800724e:	b18b      	cbz	r3, 8007274 <_puts_r+0x50>
 8007250:	3e01      	subs	r6, #1
 8007252:	68a3      	ldr	r3, [r4, #8]
 8007254:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007258:	3b01      	subs	r3, #1
 800725a:	60a3      	str	r3, [r4, #8]
 800725c:	b9e9      	cbnz	r1, 800729a <_puts_r+0x76>
 800725e:	2b00      	cmp	r3, #0
 8007260:	da2e      	bge.n	80072c0 <_puts_r+0x9c>
 8007262:	4622      	mov	r2, r4
 8007264:	210a      	movs	r1, #10
 8007266:	4628      	mov	r0, r5
 8007268:	f000 f87b 	bl	8007362 <__swbuf_r>
 800726c:	3001      	adds	r0, #1
 800726e:	d007      	beq.n	8007280 <_puts_r+0x5c>
 8007270:	250a      	movs	r5, #10
 8007272:	e007      	b.n	8007284 <_puts_r+0x60>
 8007274:	4621      	mov	r1, r4
 8007276:	4628      	mov	r0, r5
 8007278:	f000 f8b0 	bl	80073dc <__swsetup_r>
 800727c:	2800      	cmp	r0, #0
 800727e:	d0e7      	beq.n	8007250 <_puts_r+0x2c>
 8007280:	f04f 35ff 	mov.w	r5, #4294967295
 8007284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007286:	07da      	lsls	r2, r3, #31
 8007288:	d405      	bmi.n	8007296 <_puts_r+0x72>
 800728a:	89a3      	ldrh	r3, [r4, #12]
 800728c:	059b      	lsls	r3, r3, #22
 800728e:	d402      	bmi.n	8007296 <_puts_r+0x72>
 8007290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007292:	f000 f975 	bl	8007580 <__retarget_lock_release_recursive>
 8007296:	4628      	mov	r0, r5
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	2b00      	cmp	r3, #0
 800729c:	da04      	bge.n	80072a8 <_puts_r+0x84>
 800729e:	69a2      	ldr	r2, [r4, #24]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	dc06      	bgt.n	80072b2 <_puts_r+0x8e>
 80072a4:	290a      	cmp	r1, #10
 80072a6:	d004      	beq.n	80072b2 <_puts_r+0x8e>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	6022      	str	r2, [r4, #0]
 80072ae:	7019      	strb	r1, [r3, #0]
 80072b0:	e7cf      	b.n	8007252 <_puts_r+0x2e>
 80072b2:	4622      	mov	r2, r4
 80072b4:	4628      	mov	r0, r5
 80072b6:	f000 f854 	bl	8007362 <__swbuf_r>
 80072ba:	3001      	adds	r0, #1
 80072bc:	d1c9      	bne.n	8007252 <_puts_r+0x2e>
 80072be:	e7df      	b.n	8007280 <_puts_r+0x5c>
 80072c0:	250a      	movs	r5, #10
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	6022      	str	r2, [r4, #0]
 80072c8:	701d      	strb	r5, [r3, #0]
 80072ca:	e7db      	b.n	8007284 <_puts_r+0x60>

080072cc <puts>:
 80072cc:	4b02      	ldr	r3, [pc, #8]	; (80072d8 <puts+0xc>)
 80072ce:	4601      	mov	r1, r0
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	f7ff bfa7 	b.w	8007224 <_puts_r>
 80072d6:	bf00      	nop
 80072d8:	2000006c 	.word	0x2000006c

080072dc <__sread>:
 80072dc:	b510      	push	{r4, lr}
 80072de:	460c      	mov	r4, r1
 80072e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e4:	f000 f8fc 	bl	80074e0 <_read_r>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	bfab      	itete	ge
 80072ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072ee:	89a3      	ldrhlt	r3, [r4, #12]
 80072f0:	181b      	addge	r3, r3, r0
 80072f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072f6:	bfac      	ite	ge
 80072f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80072fa:	81a3      	strhlt	r3, [r4, #12]
 80072fc:	bd10      	pop	{r4, pc}

080072fe <__swrite>:
 80072fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007302:	461f      	mov	r7, r3
 8007304:	898b      	ldrh	r3, [r1, #12]
 8007306:	4605      	mov	r5, r0
 8007308:	05db      	lsls	r3, r3, #23
 800730a:	460c      	mov	r4, r1
 800730c:	4616      	mov	r6, r2
 800730e:	d505      	bpl.n	800731c <__swrite+0x1e>
 8007310:	2302      	movs	r3, #2
 8007312:	2200      	movs	r2, #0
 8007314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007318:	f000 f8d0 	bl	80074bc <_lseek_r>
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	4632      	mov	r2, r6
 8007320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007324:	81a3      	strh	r3, [r4, #12]
 8007326:	4628      	mov	r0, r5
 8007328:	463b      	mov	r3, r7
 800732a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800732e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007332:	f000 b8e7 	b.w	8007504 <_write_r>

08007336 <__sseek>:
 8007336:	b510      	push	{r4, lr}
 8007338:	460c      	mov	r4, r1
 800733a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800733e:	f000 f8bd 	bl	80074bc <_lseek_r>
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	bf15      	itete	ne
 8007348:	6560      	strne	r0, [r4, #84]	; 0x54
 800734a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800734e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007352:	81a3      	strheq	r3, [r4, #12]
 8007354:	bf18      	it	ne
 8007356:	81a3      	strhne	r3, [r4, #12]
 8007358:	bd10      	pop	{r4, pc}

0800735a <__sclose>:
 800735a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800735e:	f000 b89d 	b.w	800749c <_close_r>

08007362 <__swbuf_r>:
 8007362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007364:	460e      	mov	r6, r1
 8007366:	4614      	mov	r4, r2
 8007368:	4605      	mov	r5, r0
 800736a:	b118      	cbz	r0, 8007374 <__swbuf_r+0x12>
 800736c:	6a03      	ldr	r3, [r0, #32]
 800736e:	b90b      	cbnz	r3, 8007374 <__swbuf_r+0x12>
 8007370:	f7ff ff10 	bl	8007194 <__sinit>
 8007374:	69a3      	ldr	r3, [r4, #24]
 8007376:	60a3      	str	r3, [r4, #8]
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	071a      	lsls	r2, r3, #28
 800737c:	d525      	bpl.n	80073ca <__swbuf_r+0x68>
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	b31b      	cbz	r3, 80073ca <__swbuf_r+0x68>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	6922      	ldr	r2, [r4, #16]
 8007386:	b2f6      	uxtb	r6, r6
 8007388:	1a98      	subs	r0, r3, r2
 800738a:	6963      	ldr	r3, [r4, #20]
 800738c:	4637      	mov	r7, r6
 800738e:	4283      	cmp	r3, r0
 8007390:	dc04      	bgt.n	800739c <__swbuf_r+0x3a>
 8007392:	4621      	mov	r1, r4
 8007394:	4628      	mov	r0, r5
 8007396:	f000 fd4f 	bl	8007e38 <_fflush_r>
 800739a:	b9e0      	cbnz	r0, 80073d6 <__swbuf_r+0x74>
 800739c:	68a3      	ldr	r3, [r4, #8]
 800739e:	3b01      	subs	r3, #1
 80073a0:	60a3      	str	r3, [r4, #8]
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	6022      	str	r2, [r4, #0]
 80073a8:	701e      	strb	r6, [r3, #0]
 80073aa:	6962      	ldr	r2, [r4, #20]
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d004      	beq.n	80073bc <__swbuf_r+0x5a>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	07db      	lsls	r3, r3, #31
 80073b6:	d506      	bpl.n	80073c6 <__swbuf_r+0x64>
 80073b8:	2e0a      	cmp	r6, #10
 80073ba:	d104      	bne.n	80073c6 <__swbuf_r+0x64>
 80073bc:	4621      	mov	r1, r4
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 fd3a 	bl	8007e38 <_fflush_r>
 80073c4:	b938      	cbnz	r0, 80073d6 <__swbuf_r+0x74>
 80073c6:	4638      	mov	r0, r7
 80073c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ca:	4621      	mov	r1, r4
 80073cc:	4628      	mov	r0, r5
 80073ce:	f000 f805 	bl	80073dc <__swsetup_r>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	d0d5      	beq.n	8007382 <__swbuf_r+0x20>
 80073d6:	f04f 37ff 	mov.w	r7, #4294967295
 80073da:	e7f4      	b.n	80073c6 <__swbuf_r+0x64>

080073dc <__swsetup_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4b2a      	ldr	r3, [pc, #168]	; (8007488 <__swsetup_r+0xac>)
 80073e0:	4605      	mov	r5, r0
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	460c      	mov	r4, r1
 80073e6:	b118      	cbz	r0, 80073f0 <__swsetup_r+0x14>
 80073e8:	6a03      	ldr	r3, [r0, #32]
 80073ea:	b90b      	cbnz	r3, 80073f0 <__swsetup_r+0x14>
 80073ec:	f7ff fed2 	bl	8007194 <__sinit>
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f6:	0718      	lsls	r0, r3, #28
 80073f8:	d422      	bmi.n	8007440 <__swsetup_r+0x64>
 80073fa:	06d9      	lsls	r1, r3, #27
 80073fc:	d407      	bmi.n	800740e <__swsetup_r+0x32>
 80073fe:	2309      	movs	r3, #9
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007406:	f04f 30ff 	mov.w	r0, #4294967295
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	e034      	b.n	8007478 <__swsetup_r+0x9c>
 800740e:	0758      	lsls	r0, r3, #29
 8007410:	d512      	bpl.n	8007438 <__swsetup_r+0x5c>
 8007412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007414:	b141      	cbz	r1, 8007428 <__swsetup_r+0x4c>
 8007416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800741a:	4299      	cmp	r1, r3
 800741c:	d002      	beq.n	8007424 <__swsetup_r+0x48>
 800741e:	4628      	mov	r0, r5
 8007420:	f000 f8be 	bl	80075a0 <_free_r>
 8007424:	2300      	movs	r3, #0
 8007426:	6363      	str	r3, [r4, #52]	; 0x34
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	2300      	movs	r3, #0
 8007432:	6063      	str	r3, [r4, #4]
 8007434:	6923      	ldr	r3, [r4, #16]
 8007436:	6023      	str	r3, [r4, #0]
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	f043 0308 	orr.w	r3, r3, #8
 800743e:	81a3      	strh	r3, [r4, #12]
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	b94b      	cbnz	r3, 8007458 <__swsetup_r+0x7c>
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800744a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800744e:	d003      	beq.n	8007458 <__swsetup_r+0x7c>
 8007450:	4621      	mov	r1, r4
 8007452:	4628      	mov	r0, r5
 8007454:	f000 fd3d 	bl	8007ed2 <__smakebuf_r>
 8007458:	89a0      	ldrh	r0, [r4, #12]
 800745a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800745e:	f010 0301 	ands.w	r3, r0, #1
 8007462:	d00a      	beq.n	800747a <__swsetup_r+0x9e>
 8007464:	2300      	movs	r3, #0
 8007466:	60a3      	str	r3, [r4, #8]
 8007468:	6963      	ldr	r3, [r4, #20]
 800746a:	425b      	negs	r3, r3
 800746c:	61a3      	str	r3, [r4, #24]
 800746e:	6923      	ldr	r3, [r4, #16]
 8007470:	b943      	cbnz	r3, 8007484 <__swsetup_r+0xa8>
 8007472:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007476:	d1c4      	bne.n	8007402 <__swsetup_r+0x26>
 8007478:	bd38      	pop	{r3, r4, r5, pc}
 800747a:	0781      	lsls	r1, r0, #30
 800747c:	bf58      	it	pl
 800747e:	6963      	ldrpl	r3, [r4, #20]
 8007480:	60a3      	str	r3, [r4, #8]
 8007482:	e7f4      	b.n	800746e <__swsetup_r+0x92>
 8007484:	2000      	movs	r0, #0
 8007486:	e7f7      	b.n	8007478 <__swsetup_r+0x9c>
 8007488:	2000006c 	.word	0x2000006c

0800748c <memset>:
 800748c:	4603      	mov	r3, r0
 800748e:	4402      	add	r2, r0
 8007490:	4293      	cmp	r3, r2
 8007492:	d100      	bne.n	8007496 <memset+0xa>
 8007494:	4770      	bx	lr
 8007496:	f803 1b01 	strb.w	r1, [r3], #1
 800749a:	e7f9      	b.n	8007490 <memset+0x4>

0800749c <_close_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	2300      	movs	r3, #0
 80074a0:	4d05      	ldr	r5, [pc, #20]	; (80074b8 <_close_r+0x1c>)
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	f7f9 f8eb 	bl	8000682 <_close>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_close_r+0x1a>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_close_r+0x1a>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	20000444 	.word	0x20000444

080074bc <_lseek_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4604      	mov	r4, r0
 80074c0:	4608      	mov	r0, r1
 80074c2:	4611      	mov	r1, r2
 80074c4:	2200      	movs	r2, #0
 80074c6:	4d05      	ldr	r5, [pc, #20]	; (80074dc <_lseek_r+0x20>)
 80074c8:	602a      	str	r2, [r5, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	f7f9 f8fd 	bl	80006ca <_lseek>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d102      	bne.n	80074da <_lseek_r+0x1e>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	b103      	cbz	r3, 80074da <_lseek_r+0x1e>
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	20000444 	.word	0x20000444

080074e0 <_read_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4604      	mov	r4, r0
 80074e4:	4608      	mov	r0, r1
 80074e6:	4611      	mov	r1, r2
 80074e8:	2200      	movs	r2, #0
 80074ea:	4d05      	ldr	r5, [pc, #20]	; (8007500 <_read_r+0x20>)
 80074ec:	602a      	str	r2, [r5, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f7f9 f88e 	bl	8000610 <_read>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_read_r+0x1e>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_read_r+0x1e>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	20000444 	.word	0x20000444

08007504 <_write_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	4604      	mov	r4, r0
 8007508:	4608      	mov	r0, r1
 800750a:	4611      	mov	r1, r2
 800750c:	2200      	movs	r2, #0
 800750e:	4d05      	ldr	r5, [pc, #20]	; (8007524 <_write_r+0x20>)
 8007510:	602a      	str	r2, [r5, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	f7f9 f899 	bl	800064a <_write>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_write_r+0x1e>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_write_r+0x1e>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	20000444 	.word	0x20000444

08007528 <__errno>:
 8007528:	4b01      	ldr	r3, [pc, #4]	; (8007530 <__errno+0x8>)
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	2000006c 	.word	0x2000006c

08007534 <__libc_init_array>:
 8007534:	b570      	push	{r4, r5, r6, lr}
 8007536:	2600      	movs	r6, #0
 8007538:	4d0c      	ldr	r5, [pc, #48]	; (800756c <__libc_init_array+0x38>)
 800753a:	4c0d      	ldr	r4, [pc, #52]	; (8007570 <__libc_init_array+0x3c>)
 800753c:	1b64      	subs	r4, r4, r5
 800753e:	10a4      	asrs	r4, r4, #2
 8007540:	42a6      	cmp	r6, r4
 8007542:	d109      	bne.n	8007558 <__libc_init_array+0x24>
 8007544:	f000 fd42 	bl	8007fcc <_init>
 8007548:	2600      	movs	r6, #0
 800754a:	4d0a      	ldr	r5, [pc, #40]	; (8007574 <__libc_init_array+0x40>)
 800754c:	4c0a      	ldr	r4, [pc, #40]	; (8007578 <__libc_init_array+0x44>)
 800754e:	1b64      	subs	r4, r4, r5
 8007550:	10a4      	asrs	r4, r4, #2
 8007552:	42a6      	cmp	r6, r4
 8007554:	d105      	bne.n	8007562 <__libc_init_array+0x2e>
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	f855 3b04 	ldr.w	r3, [r5], #4
 800755c:	4798      	blx	r3
 800755e:	3601      	adds	r6, #1
 8007560:	e7ee      	b.n	8007540 <__libc_init_array+0xc>
 8007562:	f855 3b04 	ldr.w	r3, [r5], #4
 8007566:	4798      	blx	r3
 8007568:	3601      	adds	r6, #1
 800756a:	e7f2      	b.n	8007552 <__libc_init_array+0x1e>
 800756c:	080084f8 	.word	0x080084f8
 8007570:	080084f8 	.word	0x080084f8
 8007574:	080084f8 	.word	0x080084f8
 8007578:	08008500 	.word	0x08008500

0800757c <__retarget_lock_init_recursive>:
 800757c:	4770      	bx	lr

0800757e <__retarget_lock_acquire_recursive>:
 800757e:	4770      	bx	lr

08007580 <__retarget_lock_release_recursive>:
 8007580:	4770      	bx	lr

08007582 <memcpy>:
 8007582:	440a      	add	r2, r1
 8007584:	4291      	cmp	r1, r2
 8007586:	f100 33ff 	add.w	r3, r0, #4294967295
 800758a:	d100      	bne.n	800758e <memcpy+0xc>
 800758c:	4770      	bx	lr
 800758e:	b510      	push	{r4, lr}
 8007590:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007594:	4291      	cmp	r1, r2
 8007596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800759a:	d1f9      	bne.n	8007590 <memcpy+0xe>
 800759c:	bd10      	pop	{r4, pc}
	...

080075a0 <_free_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4605      	mov	r5, r0
 80075a4:	2900      	cmp	r1, #0
 80075a6:	d040      	beq.n	800762a <_free_r+0x8a>
 80075a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ac:	1f0c      	subs	r4, r1, #4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	bfb8      	it	lt
 80075b2:	18e4      	addlt	r4, r4, r3
 80075b4:	f000 f8dc 	bl	8007770 <__malloc_lock>
 80075b8:	4a1c      	ldr	r2, [pc, #112]	; (800762c <_free_r+0x8c>)
 80075ba:	6813      	ldr	r3, [r2, #0]
 80075bc:	b933      	cbnz	r3, 80075cc <_free_r+0x2c>
 80075be:	6063      	str	r3, [r4, #4]
 80075c0:	6014      	str	r4, [r2, #0]
 80075c2:	4628      	mov	r0, r5
 80075c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075c8:	f000 b8d8 	b.w	800777c <__malloc_unlock>
 80075cc:	42a3      	cmp	r3, r4
 80075ce:	d908      	bls.n	80075e2 <_free_r+0x42>
 80075d0:	6820      	ldr	r0, [r4, #0]
 80075d2:	1821      	adds	r1, r4, r0
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf01      	itttt	eq
 80075d8:	6819      	ldreq	r1, [r3, #0]
 80075da:	685b      	ldreq	r3, [r3, #4]
 80075dc:	1809      	addeq	r1, r1, r0
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	e7ed      	b.n	80075be <_free_r+0x1e>
 80075e2:	461a      	mov	r2, r3
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	b10b      	cbz	r3, 80075ec <_free_r+0x4c>
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	d9fa      	bls.n	80075e2 <_free_r+0x42>
 80075ec:	6811      	ldr	r1, [r2, #0]
 80075ee:	1850      	adds	r0, r2, r1
 80075f0:	42a0      	cmp	r0, r4
 80075f2:	d10b      	bne.n	800760c <_free_r+0x6c>
 80075f4:	6820      	ldr	r0, [r4, #0]
 80075f6:	4401      	add	r1, r0
 80075f8:	1850      	adds	r0, r2, r1
 80075fa:	4283      	cmp	r3, r0
 80075fc:	6011      	str	r1, [r2, #0]
 80075fe:	d1e0      	bne.n	80075c2 <_free_r+0x22>
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4408      	add	r0, r1
 8007606:	6010      	str	r0, [r2, #0]
 8007608:	6053      	str	r3, [r2, #4]
 800760a:	e7da      	b.n	80075c2 <_free_r+0x22>
 800760c:	d902      	bls.n	8007614 <_free_r+0x74>
 800760e:	230c      	movs	r3, #12
 8007610:	602b      	str	r3, [r5, #0]
 8007612:	e7d6      	b.n	80075c2 <_free_r+0x22>
 8007614:	6820      	ldr	r0, [r4, #0]
 8007616:	1821      	adds	r1, r4, r0
 8007618:	428b      	cmp	r3, r1
 800761a:	bf01      	itttt	eq
 800761c:	6819      	ldreq	r1, [r3, #0]
 800761e:	685b      	ldreq	r3, [r3, #4]
 8007620:	1809      	addeq	r1, r1, r0
 8007622:	6021      	streq	r1, [r4, #0]
 8007624:	6063      	str	r3, [r4, #4]
 8007626:	6054      	str	r4, [r2, #4]
 8007628:	e7cb      	b.n	80075c2 <_free_r+0x22>
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	2000044c 	.word	0x2000044c

08007630 <sbrk_aligned>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	4e0e      	ldr	r6, [pc, #56]	; (800766c <sbrk_aligned+0x3c>)
 8007634:	460c      	mov	r4, r1
 8007636:	6831      	ldr	r1, [r6, #0]
 8007638:	4605      	mov	r5, r0
 800763a:	b911      	cbnz	r1, 8007642 <sbrk_aligned+0x12>
 800763c:	f000 fca8 	bl	8007f90 <_sbrk_r>
 8007640:	6030      	str	r0, [r6, #0]
 8007642:	4621      	mov	r1, r4
 8007644:	4628      	mov	r0, r5
 8007646:	f000 fca3 	bl	8007f90 <_sbrk_r>
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	d00a      	beq.n	8007664 <sbrk_aligned+0x34>
 800764e:	1cc4      	adds	r4, r0, #3
 8007650:	f024 0403 	bic.w	r4, r4, #3
 8007654:	42a0      	cmp	r0, r4
 8007656:	d007      	beq.n	8007668 <sbrk_aligned+0x38>
 8007658:	1a21      	subs	r1, r4, r0
 800765a:	4628      	mov	r0, r5
 800765c:	f000 fc98 	bl	8007f90 <_sbrk_r>
 8007660:	3001      	adds	r0, #1
 8007662:	d101      	bne.n	8007668 <sbrk_aligned+0x38>
 8007664:	f04f 34ff 	mov.w	r4, #4294967295
 8007668:	4620      	mov	r0, r4
 800766a:	bd70      	pop	{r4, r5, r6, pc}
 800766c:	20000450 	.word	0x20000450

08007670 <_malloc_r>:
 8007670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007674:	1ccd      	adds	r5, r1, #3
 8007676:	f025 0503 	bic.w	r5, r5, #3
 800767a:	3508      	adds	r5, #8
 800767c:	2d0c      	cmp	r5, #12
 800767e:	bf38      	it	cc
 8007680:	250c      	movcc	r5, #12
 8007682:	2d00      	cmp	r5, #0
 8007684:	4607      	mov	r7, r0
 8007686:	db01      	blt.n	800768c <_malloc_r+0x1c>
 8007688:	42a9      	cmp	r1, r5
 800768a:	d905      	bls.n	8007698 <_malloc_r+0x28>
 800768c:	230c      	movs	r3, #12
 800768e:	2600      	movs	r6, #0
 8007690:	603b      	str	r3, [r7, #0]
 8007692:	4630      	mov	r0, r6
 8007694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007698:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800776c <_malloc_r+0xfc>
 800769c:	f000 f868 	bl	8007770 <__malloc_lock>
 80076a0:	f8d8 3000 	ldr.w	r3, [r8]
 80076a4:	461c      	mov	r4, r3
 80076a6:	bb5c      	cbnz	r4, 8007700 <_malloc_r+0x90>
 80076a8:	4629      	mov	r1, r5
 80076aa:	4638      	mov	r0, r7
 80076ac:	f7ff ffc0 	bl	8007630 <sbrk_aligned>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	4604      	mov	r4, r0
 80076b4:	d155      	bne.n	8007762 <_malloc_r+0xf2>
 80076b6:	f8d8 4000 	ldr.w	r4, [r8]
 80076ba:	4626      	mov	r6, r4
 80076bc:	2e00      	cmp	r6, #0
 80076be:	d145      	bne.n	800774c <_malloc_r+0xdc>
 80076c0:	2c00      	cmp	r4, #0
 80076c2:	d048      	beq.n	8007756 <_malloc_r+0xe6>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	4631      	mov	r1, r6
 80076c8:	4638      	mov	r0, r7
 80076ca:	eb04 0903 	add.w	r9, r4, r3
 80076ce:	f000 fc5f 	bl	8007f90 <_sbrk_r>
 80076d2:	4581      	cmp	r9, r0
 80076d4:	d13f      	bne.n	8007756 <_malloc_r+0xe6>
 80076d6:	6821      	ldr	r1, [r4, #0]
 80076d8:	4638      	mov	r0, r7
 80076da:	1a6d      	subs	r5, r5, r1
 80076dc:	4629      	mov	r1, r5
 80076de:	f7ff ffa7 	bl	8007630 <sbrk_aligned>
 80076e2:	3001      	adds	r0, #1
 80076e4:	d037      	beq.n	8007756 <_malloc_r+0xe6>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	442b      	add	r3, r5
 80076ea:	6023      	str	r3, [r4, #0]
 80076ec:	f8d8 3000 	ldr.w	r3, [r8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d038      	beq.n	8007766 <_malloc_r+0xf6>
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	42a2      	cmp	r2, r4
 80076f8:	d12b      	bne.n	8007752 <_malloc_r+0xe2>
 80076fa:	2200      	movs	r2, #0
 80076fc:	605a      	str	r2, [r3, #4]
 80076fe:	e00f      	b.n	8007720 <_malloc_r+0xb0>
 8007700:	6822      	ldr	r2, [r4, #0]
 8007702:	1b52      	subs	r2, r2, r5
 8007704:	d41f      	bmi.n	8007746 <_malloc_r+0xd6>
 8007706:	2a0b      	cmp	r2, #11
 8007708:	d917      	bls.n	800773a <_malloc_r+0xca>
 800770a:	1961      	adds	r1, r4, r5
 800770c:	42a3      	cmp	r3, r4
 800770e:	6025      	str	r5, [r4, #0]
 8007710:	bf18      	it	ne
 8007712:	6059      	strne	r1, [r3, #4]
 8007714:	6863      	ldr	r3, [r4, #4]
 8007716:	bf08      	it	eq
 8007718:	f8c8 1000 	streq.w	r1, [r8]
 800771c:	5162      	str	r2, [r4, r5]
 800771e:	604b      	str	r3, [r1, #4]
 8007720:	4638      	mov	r0, r7
 8007722:	f104 060b 	add.w	r6, r4, #11
 8007726:	f000 f829 	bl	800777c <__malloc_unlock>
 800772a:	f026 0607 	bic.w	r6, r6, #7
 800772e:	1d23      	adds	r3, r4, #4
 8007730:	1af2      	subs	r2, r6, r3
 8007732:	d0ae      	beq.n	8007692 <_malloc_r+0x22>
 8007734:	1b9b      	subs	r3, r3, r6
 8007736:	50a3      	str	r3, [r4, r2]
 8007738:	e7ab      	b.n	8007692 <_malloc_r+0x22>
 800773a:	42a3      	cmp	r3, r4
 800773c:	6862      	ldr	r2, [r4, #4]
 800773e:	d1dd      	bne.n	80076fc <_malloc_r+0x8c>
 8007740:	f8c8 2000 	str.w	r2, [r8]
 8007744:	e7ec      	b.n	8007720 <_malloc_r+0xb0>
 8007746:	4623      	mov	r3, r4
 8007748:	6864      	ldr	r4, [r4, #4]
 800774a:	e7ac      	b.n	80076a6 <_malloc_r+0x36>
 800774c:	4634      	mov	r4, r6
 800774e:	6876      	ldr	r6, [r6, #4]
 8007750:	e7b4      	b.n	80076bc <_malloc_r+0x4c>
 8007752:	4613      	mov	r3, r2
 8007754:	e7cc      	b.n	80076f0 <_malloc_r+0x80>
 8007756:	230c      	movs	r3, #12
 8007758:	4638      	mov	r0, r7
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	f000 f80e 	bl	800777c <__malloc_unlock>
 8007760:	e797      	b.n	8007692 <_malloc_r+0x22>
 8007762:	6025      	str	r5, [r4, #0]
 8007764:	e7dc      	b.n	8007720 <_malloc_r+0xb0>
 8007766:	605b      	str	r3, [r3, #4]
 8007768:	deff      	udf	#255	; 0xff
 800776a:	bf00      	nop
 800776c:	2000044c 	.word	0x2000044c

08007770 <__malloc_lock>:
 8007770:	4801      	ldr	r0, [pc, #4]	; (8007778 <__malloc_lock+0x8>)
 8007772:	f7ff bf04 	b.w	800757e <__retarget_lock_acquire_recursive>
 8007776:	bf00      	nop
 8007778:	20000448 	.word	0x20000448

0800777c <__malloc_unlock>:
 800777c:	4801      	ldr	r0, [pc, #4]	; (8007784 <__malloc_unlock+0x8>)
 800777e:	f7ff beff 	b.w	8007580 <__retarget_lock_release_recursive>
 8007782:	bf00      	nop
 8007784:	20000448 	.word	0x20000448

08007788 <__sfputc_r>:
 8007788:	6893      	ldr	r3, [r2, #8]
 800778a:	b410      	push	{r4}
 800778c:	3b01      	subs	r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	6093      	str	r3, [r2, #8]
 8007792:	da07      	bge.n	80077a4 <__sfputc_r+0x1c>
 8007794:	6994      	ldr	r4, [r2, #24]
 8007796:	42a3      	cmp	r3, r4
 8007798:	db01      	blt.n	800779e <__sfputc_r+0x16>
 800779a:	290a      	cmp	r1, #10
 800779c:	d102      	bne.n	80077a4 <__sfputc_r+0x1c>
 800779e:	bc10      	pop	{r4}
 80077a0:	f7ff bddf 	b.w	8007362 <__swbuf_r>
 80077a4:	6813      	ldr	r3, [r2, #0]
 80077a6:	1c58      	adds	r0, r3, #1
 80077a8:	6010      	str	r0, [r2, #0]
 80077aa:	7019      	strb	r1, [r3, #0]
 80077ac:	4608      	mov	r0, r1
 80077ae:	bc10      	pop	{r4}
 80077b0:	4770      	bx	lr

080077b2 <__sfputs_r>:
 80077b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b4:	4606      	mov	r6, r0
 80077b6:	460f      	mov	r7, r1
 80077b8:	4614      	mov	r4, r2
 80077ba:	18d5      	adds	r5, r2, r3
 80077bc:	42ac      	cmp	r4, r5
 80077be:	d101      	bne.n	80077c4 <__sfputs_r+0x12>
 80077c0:	2000      	movs	r0, #0
 80077c2:	e007      	b.n	80077d4 <__sfputs_r+0x22>
 80077c4:	463a      	mov	r2, r7
 80077c6:	4630      	mov	r0, r6
 80077c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077cc:	f7ff ffdc 	bl	8007788 <__sfputc_r>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d1f3      	bne.n	80077bc <__sfputs_r+0xa>
 80077d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077d8 <_vfiprintf_r>:
 80077d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	460d      	mov	r5, r1
 80077de:	4614      	mov	r4, r2
 80077e0:	4698      	mov	r8, r3
 80077e2:	4606      	mov	r6, r0
 80077e4:	b09d      	sub	sp, #116	; 0x74
 80077e6:	b118      	cbz	r0, 80077f0 <_vfiprintf_r+0x18>
 80077e8:	6a03      	ldr	r3, [r0, #32]
 80077ea:	b90b      	cbnz	r3, 80077f0 <_vfiprintf_r+0x18>
 80077ec:	f7ff fcd2 	bl	8007194 <__sinit>
 80077f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077f2:	07d9      	lsls	r1, r3, #31
 80077f4:	d405      	bmi.n	8007802 <_vfiprintf_r+0x2a>
 80077f6:	89ab      	ldrh	r3, [r5, #12]
 80077f8:	059a      	lsls	r2, r3, #22
 80077fa:	d402      	bmi.n	8007802 <_vfiprintf_r+0x2a>
 80077fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077fe:	f7ff febe 	bl	800757e <__retarget_lock_acquire_recursive>
 8007802:	89ab      	ldrh	r3, [r5, #12]
 8007804:	071b      	lsls	r3, r3, #28
 8007806:	d501      	bpl.n	800780c <_vfiprintf_r+0x34>
 8007808:	692b      	ldr	r3, [r5, #16]
 800780a:	b99b      	cbnz	r3, 8007834 <_vfiprintf_r+0x5c>
 800780c:	4629      	mov	r1, r5
 800780e:	4630      	mov	r0, r6
 8007810:	f7ff fde4 	bl	80073dc <__swsetup_r>
 8007814:	b170      	cbz	r0, 8007834 <_vfiprintf_r+0x5c>
 8007816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007818:	07dc      	lsls	r4, r3, #31
 800781a:	d504      	bpl.n	8007826 <_vfiprintf_r+0x4e>
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	b01d      	add	sp, #116	; 0x74
 8007822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007826:	89ab      	ldrh	r3, [r5, #12]
 8007828:	0598      	lsls	r0, r3, #22
 800782a:	d4f7      	bmi.n	800781c <_vfiprintf_r+0x44>
 800782c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800782e:	f7ff fea7 	bl	8007580 <__retarget_lock_release_recursive>
 8007832:	e7f3      	b.n	800781c <_vfiprintf_r+0x44>
 8007834:	2300      	movs	r3, #0
 8007836:	9309      	str	r3, [sp, #36]	; 0x24
 8007838:	2320      	movs	r3, #32
 800783a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800783e:	2330      	movs	r3, #48	; 0x30
 8007840:	f04f 0901 	mov.w	r9, #1
 8007844:	f8cd 800c 	str.w	r8, [sp, #12]
 8007848:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80079f8 <_vfiprintf_r+0x220>
 800784c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007850:	4623      	mov	r3, r4
 8007852:	469a      	mov	sl, r3
 8007854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007858:	b10a      	cbz	r2, 800785e <_vfiprintf_r+0x86>
 800785a:	2a25      	cmp	r2, #37	; 0x25
 800785c:	d1f9      	bne.n	8007852 <_vfiprintf_r+0x7a>
 800785e:	ebba 0b04 	subs.w	fp, sl, r4
 8007862:	d00b      	beq.n	800787c <_vfiprintf_r+0xa4>
 8007864:	465b      	mov	r3, fp
 8007866:	4622      	mov	r2, r4
 8007868:	4629      	mov	r1, r5
 800786a:	4630      	mov	r0, r6
 800786c:	f7ff ffa1 	bl	80077b2 <__sfputs_r>
 8007870:	3001      	adds	r0, #1
 8007872:	f000 80a9 	beq.w	80079c8 <_vfiprintf_r+0x1f0>
 8007876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007878:	445a      	add	r2, fp
 800787a:	9209      	str	r2, [sp, #36]	; 0x24
 800787c:	f89a 3000 	ldrb.w	r3, [sl]
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 80a1 	beq.w	80079c8 <_vfiprintf_r+0x1f0>
 8007886:	2300      	movs	r3, #0
 8007888:	f04f 32ff 	mov.w	r2, #4294967295
 800788c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007890:	f10a 0a01 	add.w	sl, sl, #1
 8007894:	9304      	str	r3, [sp, #16]
 8007896:	9307      	str	r3, [sp, #28]
 8007898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800789c:	931a      	str	r3, [sp, #104]	; 0x68
 800789e:	4654      	mov	r4, sl
 80078a0:	2205      	movs	r2, #5
 80078a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a6:	4854      	ldr	r0, [pc, #336]	; (80079f8 <_vfiprintf_r+0x220>)
 80078a8:	f000 fb82 	bl	8007fb0 <memchr>
 80078ac:	9a04      	ldr	r2, [sp, #16]
 80078ae:	b9d8      	cbnz	r0, 80078e8 <_vfiprintf_r+0x110>
 80078b0:	06d1      	lsls	r1, r2, #27
 80078b2:	bf44      	itt	mi
 80078b4:	2320      	movmi	r3, #32
 80078b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ba:	0713      	lsls	r3, r2, #28
 80078bc:	bf44      	itt	mi
 80078be:	232b      	movmi	r3, #43	; 0x2b
 80078c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078c4:	f89a 3000 	ldrb.w	r3, [sl]
 80078c8:	2b2a      	cmp	r3, #42	; 0x2a
 80078ca:	d015      	beq.n	80078f8 <_vfiprintf_r+0x120>
 80078cc:	4654      	mov	r4, sl
 80078ce:	2000      	movs	r0, #0
 80078d0:	f04f 0c0a 	mov.w	ip, #10
 80078d4:	9a07      	ldr	r2, [sp, #28]
 80078d6:	4621      	mov	r1, r4
 80078d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078dc:	3b30      	subs	r3, #48	; 0x30
 80078de:	2b09      	cmp	r3, #9
 80078e0:	d94d      	bls.n	800797e <_vfiprintf_r+0x1a6>
 80078e2:	b1b0      	cbz	r0, 8007912 <_vfiprintf_r+0x13a>
 80078e4:	9207      	str	r2, [sp, #28]
 80078e6:	e014      	b.n	8007912 <_vfiprintf_r+0x13a>
 80078e8:	eba0 0308 	sub.w	r3, r0, r8
 80078ec:	fa09 f303 	lsl.w	r3, r9, r3
 80078f0:	4313      	orrs	r3, r2
 80078f2:	46a2      	mov	sl, r4
 80078f4:	9304      	str	r3, [sp, #16]
 80078f6:	e7d2      	b.n	800789e <_vfiprintf_r+0xc6>
 80078f8:	9b03      	ldr	r3, [sp, #12]
 80078fa:	1d19      	adds	r1, r3, #4
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	9103      	str	r1, [sp, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	bfbb      	ittet	lt
 8007904:	425b      	neglt	r3, r3
 8007906:	f042 0202 	orrlt.w	r2, r2, #2
 800790a:	9307      	strge	r3, [sp, #28]
 800790c:	9307      	strlt	r3, [sp, #28]
 800790e:	bfb8      	it	lt
 8007910:	9204      	strlt	r2, [sp, #16]
 8007912:	7823      	ldrb	r3, [r4, #0]
 8007914:	2b2e      	cmp	r3, #46	; 0x2e
 8007916:	d10c      	bne.n	8007932 <_vfiprintf_r+0x15a>
 8007918:	7863      	ldrb	r3, [r4, #1]
 800791a:	2b2a      	cmp	r3, #42	; 0x2a
 800791c:	d134      	bne.n	8007988 <_vfiprintf_r+0x1b0>
 800791e:	9b03      	ldr	r3, [sp, #12]
 8007920:	3402      	adds	r4, #2
 8007922:	1d1a      	adds	r2, r3, #4
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	9203      	str	r2, [sp, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	bfb8      	it	lt
 800792c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007930:	9305      	str	r3, [sp, #20]
 8007932:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80079fc <_vfiprintf_r+0x224>
 8007936:	2203      	movs	r2, #3
 8007938:	4650      	mov	r0, sl
 800793a:	7821      	ldrb	r1, [r4, #0]
 800793c:	f000 fb38 	bl	8007fb0 <memchr>
 8007940:	b138      	cbz	r0, 8007952 <_vfiprintf_r+0x17a>
 8007942:	2240      	movs	r2, #64	; 0x40
 8007944:	9b04      	ldr	r3, [sp, #16]
 8007946:	eba0 000a 	sub.w	r0, r0, sl
 800794a:	4082      	lsls	r2, r0
 800794c:	4313      	orrs	r3, r2
 800794e:	3401      	adds	r4, #1
 8007950:	9304      	str	r3, [sp, #16]
 8007952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007956:	2206      	movs	r2, #6
 8007958:	4829      	ldr	r0, [pc, #164]	; (8007a00 <_vfiprintf_r+0x228>)
 800795a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800795e:	f000 fb27 	bl	8007fb0 <memchr>
 8007962:	2800      	cmp	r0, #0
 8007964:	d03f      	beq.n	80079e6 <_vfiprintf_r+0x20e>
 8007966:	4b27      	ldr	r3, [pc, #156]	; (8007a04 <_vfiprintf_r+0x22c>)
 8007968:	bb1b      	cbnz	r3, 80079b2 <_vfiprintf_r+0x1da>
 800796a:	9b03      	ldr	r3, [sp, #12]
 800796c:	3307      	adds	r3, #7
 800796e:	f023 0307 	bic.w	r3, r3, #7
 8007972:	3308      	adds	r3, #8
 8007974:	9303      	str	r3, [sp, #12]
 8007976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007978:	443b      	add	r3, r7
 800797a:	9309      	str	r3, [sp, #36]	; 0x24
 800797c:	e768      	b.n	8007850 <_vfiprintf_r+0x78>
 800797e:	460c      	mov	r4, r1
 8007980:	2001      	movs	r0, #1
 8007982:	fb0c 3202 	mla	r2, ip, r2, r3
 8007986:	e7a6      	b.n	80078d6 <_vfiprintf_r+0xfe>
 8007988:	2300      	movs	r3, #0
 800798a:	f04f 0c0a 	mov.w	ip, #10
 800798e:	4619      	mov	r1, r3
 8007990:	3401      	adds	r4, #1
 8007992:	9305      	str	r3, [sp, #20]
 8007994:	4620      	mov	r0, r4
 8007996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800799a:	3a30      	subs	r2, #48	; 0x30
 800799c:	2a09      	cmp	r2, #9
 800799e:	d903      	bls.n	80079a8 <_vfiprintf_r+0x1d0>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0c6      	beq.n	8007932 <_vfiprintf_r+0x15a>
 80079a4:	9105      	str	r1, [sp, #20]
 80079a6:	e7c4      	b.n	8007932 <_vfiprintf_r+0x15a>
 80079a8:	4604      	mov	r4, r0
 80079aa:	2301      	movs	r3, #1
 80079ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80079b0:	e7f0      	b.n	8007994 <_vfiprintf_r+0x1bc>
 80079b2:	ab03      	add	r3, sp, #12
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	462a      	mov	r2, r5
 80079b8:	4630      	mov	r0, r6
 80079ba:	4b13      	ldr	r3, [pc, #76]	; (8007a08 <_vfiprintf_r+0x230>)
 80079bc:	a904      	add	r1, sp, #16
 80079be:	f3af 8000 	nop.w
 80079c2:	4607      	mov	r7, r0
 80079c4:	1c78      	adds	r0, r7, #1
 80079c6:	d1d6      	bne.n	8007976 <_vfiprintf_r+0x19e>
 80079c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079ca:	07d9      	lsls	r1, r3, #31
 80079cc:	d405      	bmi.n	80079da <_vfiprintf_r+0x202>
 80079ce:	89ab      	ldrh	r3, [r5, #12]
 80079d0:	059a      	lsls	r2, r3, #22
 80079d2:	d402      	bmi.n	80079da <_vfiprintf_r+0x202>
 80079d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079d6:	f7ff fdd3 	bl	8007580 <__retarget_lock_release_recursive>
 80079da:	89ab      	ldrh	r3, [r5, #12]
 80079dc:	065b      	lsls	r3, r3, #25
 80079de:	f53f af1d 	bmi.w	800781c <_vfiprintf_r+0x44>
 80079e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079e4:	e71c      	b.n	8007820 <_vfiprintf_r+0x48>
 80079e6:	ab03      	add	r3, sp, #12
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	462a      	mov	r2, r5
 80079ec:	4630      	mov	r0, r6
 80079ee:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <_vfiprintf_r+0x230>)
 80079f0:	a904      	add	r1, sp, #16
 80079f2:	f000 f87d 	bl	8007af0 <_printf_i>
 80079f6:	e7e4      	b.n	80079c2 <_vfiprintf_r+0x1ea>
 80079f8:	080084c4 	.word	0x080084c4
 80079fc:	080084ca 	.word	0x080084ca
 8007a00:	080084ce 	.word	0x080084ce
 8007a04:	00000000 	.word	0x00000000
 8007a08:	080077b3 	.word	0x080077b3

08007a0c <_printf_common>:
 8007a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a10:	4616      	mov	r6, r2
 8007a12:	4699      	mov	r9, r3
 8007a14:	688a      	ldr	r2, [r1, #8]
 8007a16:	690b      	ldr	r3, [r1, #16]
 8007a18:	4607      	mov	r7, r0
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	bfb8      	it	lt
 8007a1e:	4613      	movlt	r3, r2
 8007a20:	6033      	str	r3, [r6, #0]
 8007a22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a26:	460c      	mov	r4, r1
 8007a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a2c:	b10a      	cbz	r2, 8007a32 <_printf_common+0x26>
 8007a2e:	3301      	adds	r3, #1
 8007a30:	6033      	str	r3, [r6, #0]
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	0699      	lsls	r1, r3, #26
 8007a36:	bf42      	ittt	mi
 8007a38:	6833      	ldrmi	r3, [r6, #0]
 8007a3a:	3302      	addmi	r3, #2
 8007a3c:	6033      	strmi	r3, [r6, #0]
 8007a3e:	6825      	ldr	r5, [r4, #0]
 8007a40:	f015 0506 	ands.w	r5, r5, #6
 8007a44:	d106      	bne.n	8007a54 <_printf_common+0x48>
 8007a46:	f104 0a19 	add.w	sl, r4, #25
 8007a4a:	68e3      	ldr	r3, [r4, #12]
 8007a4c:	6832      	ldr	r2, [r6, #0]
 8007a4e:	1a9b      	subs	r3, r3, r2
 8007a50:	42ab      	cmp	r3, r5
 8007a52:	dc2b      	bgt.n	8007aac <_printf_common+0xa0>
 8007a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a58:	1e13      	subs	r3, r2, #0
 8007a5a:	6822      	ldr	r2, [r4, #0]
 8007a5c:	bf18      	it	ne
 8007a5e:	2301      	movne	r3, #1
 8007a60:	0692      	lsls	r2, r2, #26
 8007a62:	d430      	bmi.n	8007ac6 <_printf_common+0xba>
 8007a64:	4649      	mov	r1, r9
 8007a66:	4638      	mov	r0, r7
 8007a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a6c:	47c0      	blx	r8
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d023      	beq.n	8007aba <_printf_common+0xae>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	6922      	ldr	r2, [r4, #16]
 8007a76:	f003 0306 	and.w	r3, r3, #6
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	bf14      	ite	ne
 8007a7e:	2500      	movne	r5, #0
 8007a80:	6833      	ldreq	r3, [r6, #0]
 8007a82:	f04f 0600 	mov.w	r6, #0
 8007a86:	bf08      	it	eq
 8007a88:	68e5      	ldreq	r5, [r4, #12]
 8007a8a:	f104 041a 	add.w	r4, r4, #26
 8007a8e:	bf08      	it	eq
 8007a90:	1aed      	subeq	r5, r5, r3
 8007a92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007a96:	bf08      	it	eq
 8007a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	bfc4      	itt	gt
 8007aa0:	1a9b      	subgt	r3, r3, r2
 8007aa2:	18ed      	addgt	r5, r5, r3
 8007aa4:	42b5      	cmp	r5, r6
 8007aa6:	d11a      	bne.n	8007ade <_printf_common+0xd2>
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	e008      	b.n	8007abe <_printf_common+0xb2>
 8007aac:	2301      	movs	r3, #1
 8007aae:	4652      	mov	r2, sl
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	47c0      	blx	r8
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	d103      	bne.n	8007ac2 <_printf_common+0xb6>
 8007aba:	f04f 30ff 	mov.w	r0, #4294967295
 8007abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac2:	3501      	adds	r5, #1
 8007ac4:	e7c1      	b.n	8007a4a <_printf_common+0x3e>
 8007ac6:	2030      	movs	r0, #48	; 0x30
 8007ac8:	18e1      	adds	r1, r4, r3
 8007aca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ad4:	4422      	add	r2, r4
 8007ad6:	3302      	adds	r3, #2
 8007ad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007adc:	e7c2      	b.n	8007a64 <_printf_common+0x58>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	4622      	mov	r2, r4
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	47c0      	blx	r8
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d0e6      	beq.n	8007aba <_printf_common+0xae>
 8007aec:	3601      	adds	r6, #1
 8007aee:	e7d9      	b.n	8007aa4 <_printf_common+0x98>

08007af0 <_printf_i>:
 8007af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007af4:	7e0f      	ldrb	r7, [r1, #24]
 8007af6:	4691      	mov	r9, r2
 8007af8:	2f78      	cmp	r7, #120	; 0x78
 8007afa:	4680      	mov	r8, r0
 8007afc:	460c      	mov	r4, r1
 8007afe:	469a      	mov	sl, r3
 8007b00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b06:	d807      	bhi.n	8007b18 <_printf_i+0x28>
 8007b08:	2f62      	cmp	r7, #98	; 0x62
 8007b0a:	d80a      	bhi.n	8007b22 <_printf_i+0x32>
 8007b0c:	2f00      	cmp	r7, #0
 8007b0e:	f000 80d5 	beq.w	8007cbc <_printf_i+0x1cc>
 8007b12:	2f58      	cmp	r7, #88	; 0x58
 8007b14:	f000 80c1 	beq.w	8007c9a <_printf_i+0x1aa>
 8007b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b20:	e03a      	b.n	8007b98 <_printf_i+0xa8>
 8007b22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b26:	2b15      	cmp	r3, #21
 8007b28:	d8f6      	bhi.n	8007b18 <_printf_i+0x28>
 8007b2a:	a101      	add	r1, pc, #4	; (adr r1, 8007b30 <_printf_i+0x40>)
 8007b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b30:	08007b89 	.word	0x08007b89
 8007b34:	08007b9d 	.word	0x08007b9d
 8007b38:	08007b19 	.word	0x08007b19
 8007b3c:	08007b19 	.word	0x08007b19
 8007b40:	08007b19 	.word	0x08007b19
 8007b44:	08007b19 	.word	0x08007b19
 8007b48:	08007b9d 	.word	0x08007b9d
 8007b4c:	08007b19 	.word	0x08007b19
 8007b50:	08007b19 	.word	0x08007b19
 8007b54:	08007b19 	.word	0x08007b19
 8007b58:	08007b19 	.word	0x08007b19
 8007b5c:	08007ca3 	.word	0x08007ca3
 8007b60:	08007bc9 	.word	0x08007bc9
 8007b64:	08007c5d 	.word	0x08007c5d
 8007b68:	08007b19 	.word	0x08007b19
 8007b6c:	08007b19 	.word	0x08007b19
 8007b70:	08007cc5 	.word	0x08007cc5
 8007b74:	08007b19 	.word	0x08007b19
 8007b78:	08007bc9 	.word	0x08007bc9
 8007b7c:	08007b19 	.word	0x08007b19
 8007b80:	08007b19 	.word	0x08007b19
 8007b84:	08007c65 	.word	0x08007c65
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	1d1a      	adds	r2, r3, #4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	602a      	str	r2, [r5, #0]
 8007b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e0a0      	b.n	8007cde <_printf_i+0x1ee>
 8007b9c:	6820      	ldr	r0, [r4, #0]
 8007b9e:	682b      	ldr	r3, [r5, #0]
 8007ba0:	0607      	lsls	r7, r0, #24
 8007ba2:	f103 0104 	add.w	r1, r3, #4
 8007ba6:	6029      	str	r1, [r5, #0]
 8007ba8:	d501      	bpl.n	8007bae <_printf_i+0xbe>
 8007baa:	681e      	ldr	r6, [r3, #0]
 8007bac:	e003      	b.n	8007bb6 <_printf_i+0xc6>
 8007bae:	0646      	lsls	r6, r0, #25
 8007bb0:	d5fb      	bpl.n	8007baa <_printf_i+0xba>
 8007bb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007bb6:	2e00      	cmp	r6, #0
 8007bb8:	da03      	bge.n	8007bc2 <_printf_i+0xd2>
 8007bba:	232d      	movs	r3, #45	; 0x2d
 8007bbc:	4276      	negs	r6, r6
 8007bbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bc2:	230a      	movs	r3, #10
 8007bc4:	4859      	ldr	r0, [pc, #356]	; (8007d2c <_printf_i+0x23c>)
 8007bc6:	e012      	b.n	8007bee <_printf_i+0xfe>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	6820      	ldr	r0, [r4, #0]
 8007bcc:	1d19      	adds	r1, r3, #4
 8007bce:	6029      	str	r1, [r5, #0]
 8007bd0:	0605      	lsls	r5, r0, #24
 8007bd2:	d501      	bpl.n	8007bd8 <_printf_i+0xe8>
 8007bd4:	681e      	ldr	r6, [r3, #0]
 8007bd6:	e002      	b.n	8007bde <_printf_i+0xee>
 8007bd8:	0641      	lsls	r1, r0, #25
 8007bda:	d5fb      	bpl.n	8007bd4 <_printf_i+0xe4>
 8007bdc:	881e      	ldrh	r6, [r3, #0]
 8007bde:	2f6f      	cmp	r7, #111	; 0x6f
 8007be0:	bf0c      	ite	eq
 8007be2:	2308      	moveq	r3, #8
 8007be4:	230a      	movne	r3, #10
 8007be6:	4851      	ldr	r0, [pc, #324]	; (8007d2c <_printf_i+0x23c>)
 8007be8:	2100      	movs	r1, #0
 8007bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bee:	6865      	ldr	r5, [r4, #4]
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	bfa8      	it	ge
 8007bf4:	6821      	ldrge	r1, [r4, #0]
 8007bf6:	60a5      	str	r5, [r4, #8]
 8007bf8:	bfa4      	itt	ge
 8007bfa:	f021 0104 	bicge.w	r1, r1, #4
 8007bfe:	6021      	strge	r1, [r4, #0]
 8007c00:	b90e      	cbnz	r6, 8007c06 <_printf_i+0x116>
 8007c02:	2d00      	cmp	r5, #0
 8007c04:	d04b      	beq.n	8007c9e <_printf_i+0x1ae>
 8007c06:	4615      	mov	r5, r2
 8007c08:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c0c:	fb03 6711 	mls	r7, r3, r1, r6
 8007c10:	5dc7      	ldrb	r7, [r0, r7]
 8007c12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c16:	4637      	mov	r7, r6
 8007c18:	42bb      	cmp	r3, r7
 8007c1a:	460e      	mov	r6, r1
 8007c1c:	d9f4      	bls.n	8007c08 <_printf_i+0x118>
 8007c1e:	2b08      	cmp	r3, #8
 8007c20:	d10b      	bne.n	8007c3a <_printf_i+0x14a>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	07de      	lsls	r6, r3, #31
 8007c26:	d508      	bpl.n	8007c3a <_printf_i+0x14a>
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	6861      	ldr	r1, [r4, #4]
 8007c2c:	4299      	cmp	r1, r3
 8007c2e:	bfde      	ittt	le
 8007c30:	2330      	movle	r3, #48	; 0x30
 8007c32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c3a:	1b52      	subs	r2, r2, r5
 8007c3c:	6122      	str	r2, [r4, #16]
 8007c3e:	464b      	mov	r3, r9
 8007c40:	4621      	mov	r1, r4
 8007c42:	4640      	mov	r0, r8
 8007c44:	f8cd a000 	str.w	sl, [sp]
 8007c48:	aa03      	add	r2, sp, #12
 8007c4a:	f7ff fedf 	bl	8007a0c <_printf_common>
 8007c4e:	3001      	adds	r0, #1
 8007c50:	d14a      	bne.n	8007ce8 <_printf_i+0x1f8>
 8007c52:	f04f 30ff 	mov.w	r0, #4294967295
 8007c56:	b004      	add	sp, #16
 8007c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	f043 0320 	orr.w	r3, r3, #32
 8007c62:	6023      	str	r3, [r4, #0]
 8007c64:	2778      	movs	r7, #120	; 0x78
 8007c66:	4832      	ldr	r0, [pc, #200]	; (8007d30 <_printf_i+0x240>)
 8007c68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	6829      	ldr	r1, [r5, #0]
 8007c70:	061f      	lsls	r7, r3, #24
 8007c72:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c76:	d402      	bmi.n	8007c7e <_printf_i+0x18e>
 8007c78:	065f      	lsls	r7, r3, #25
 8007c7a:	bf48      	it	mi
 8007c7c:	b2b6      	uxthmi	r6, r6
 8007c7e:	07df      	lsls	r7, r3, #31
 8007c80:	bf48      	it	mi
 8007c82:	f043 0320 	orrmi.w	r3, r3, #32
 8007c86:	6029      	str	r1, [r5, #0]
 8007c88:	bf48      	it	mi
 8007c8a:	6023      	strmi	r3, [r4, #0]
 8007c8c:	b91e      	cbnz	r6, 8007c96 <_printf_i+0x1a6>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	f023 0320 	bic.w	r3, r3, #32
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	2310      	movs	r3, #16
 8007c98:	e7a6      	b.n	8007be8 <_printf_i+0xf8>
 8007c9a:	4824      	ldr	r0, [pc, #144]	; (8007d2c <_printf_i+0x23c>)
 8007c9c:	e7e4      	b.n	8007c68 <_printf_i+0x178>
 8007c9e:	4615      	mov	r5, r2
 8007ca0:	e7bd      	b.n	8007c1e <_printf_i+0x12e>
 8007ca2:	682b      	ldr	r3, [r5, #0]
 8007ca4:	6826      	ldr	r6, [r4, #0]
 8007ca6:	1d18      	adds	r0, r3, #4
 8007ca8:	6961      	ldr	r1, [r4, #20]
 8007caa:	6028      	str	r0, [r5, #0]
 8007cac:	0635      	lsls	r5, r6, #24
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	d501      	bpl.n	8007cb6 <_printf_i+0x1c6>
 8007cb2:	6019      	str	r1, [r3, #0]
 8007cb4:	e002      	b.n	8007cbc <_printf_i+0x1cc>
 8007cb6:	0670      	lsls	r0, r6, #25
 8007cb8:	d5fb      	bpl.n	8007cb2 <_printf_i+0x1c2>
 8007cba:	8019      	strh	r1, [r3, #0]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4615      	mov	r5, r2
 8007cc0:	6123      	str	r3, [r4, #16]
 8007cc2:	e7bc      	b.n	8007c3e <_printf_i+0x14e>
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	1d1a      	adds	r2, r3, #4
 8007cca:	602a      	str	r2, [r5, #0]
 8007ccc:	681d      	ldr	r5, [r3, #0]
 8007cce:	6862      	ldr	r2, [r4, #4]
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f000 f96d 	bl	8007fb0 <memchr>
 8007cd6:	b108      	cbz	r0, 8007cdc <_printf_i+0x1ec>
 8007cd8:	1b40      	subs	r0, r0, r5
 8007cda:	6060      	str	r0, [r4, #4]
 8007cdc:	6863      	ldr	r3, [r4, #4]
 8007cde:	6123      	str	r3, [r4, #16]
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ce6:	e7aa      	b.n	8007c3e <_printf_i+0x14e>
 8007ce8:	462a      	mov	r2, r5
 8007cea:	4649      	mov	r1, r9
 8007cec:	4640      	mov	r0, r8
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	47d0      	blx	sl
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	d0ad      	beq.n	8007c52 <_printf_i+0x162>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	079b      	lsls	r3, r3, #30
 8007cfa:	d413      	bmi.n	8007d24 <_printf_i+0x234>
 8007cfc:	68e0      	ldr	r0, [r4, #12]
 8007cfe:	9b03      	ldr	r3, [sp, #12]
 8007d00:	4298      	cmp	r0, r3
 8007d02:	bfb8      	it	lt
 8007d04:	4618      	movlt	r0, r3
 8007d06:	e7a6      	b.n	8007c56 <_printf_i+0x166>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	4632      	mov	r2, r6
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	4640      	mov	r0, r8
 8007d10:	47d0      	blx	sl
 8007d12:	3001      	adds	r0, #1
 8007d14:	d09d      	beq.n	8007c52 <_printf_i+0x162>
 8007d16:	3501      	adds	r5, #1
 8007d18:	68e3      	ldr	r3, [r4, #12]
 8007d1a:	9903      	ldr	r1, [sp, #12]
 8007d1c:	1a5b      	subs	r3, r3, r1
 8007d1e:	42ab      	cmp	r3, r5
 8007d20:	dcf2      	bgt.n	8007d08 <_printf_i+0x218>
 8007d22:	e7eb      	b.n	8007cfc <_printf_i+0x20c>
 8007d24:	2500      	movs	r5, #0
 8007d26:	f104 0619 	add.w	r6, r4, #25
 8007d2a:	e7f5      	b.n	8007d18 <_printf_i+0x228>
 8007d2c:	080084d5 	.word	0x080084d5
 8007d30:	080084e6 	.word	0x080084e6

08007d34 <__sflush_r>:
 8007d34:	898a      	ldrh	r2, [r1, #12]
 8007d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d38:	4605      	mov	r5, r0
 8007d3a:	0710      	lsls	r0, r2, #28
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	d457      	bmi.n	8007df0 <__sflush_r+0xbc>
 8007d40:	684b      	ldr	r3, [r1, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	dc04      	bgt.n	8007d50 <__sflush_r+0x1c>
 8007d46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	dc01      	bgt.n	8007d50 <__sflush_r+0x1c>
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d52:	2e00      	cmp	r6, #0
 8007d54:	d0fa      	beq.n	8007d4c <__sflush_r+0x18>
 8007d56:	2300      	movs	r3, #0
 8007d58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d5c:	682f      	ldr	r7, [r5, #0]
 8007d5e:	6a21      	ldr	r1, [r4, #32]
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	d032      	beq.n	8007dca <__sflush_r+0x96>
 8007d64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	075a      	lsls	r2, r3, #29
 8007d6a:	d505      	bpl.n	8007d78 <__sflush_r+0x44>
 8007d6c:	6863      	ldr	r3, [r4, #4]
 8007d6e:	1ac0      	subs	r0, r0, r3
 8007d70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d72:	b10b      	cbz	r3, 8007d78 <__sflush_r+0x44>
 8007d74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d76:	1ac0      	subs	r0, r0, r3
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d7e:	4628      	mov	r0, r5
 8007d80:	6a21      	ldr	r1, [r4, #32]
 8007d82:	47b0      	blx	r6
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	d106      	bne.n	8007d98 <__sflush_r+0x64>
 8007d8a:	6829      	ldr	r1, [r5, #0]
 8007d8c:	291d      	cmp	r1, #29
 8007d8e:	d82b      	bhi.n	8007de8 <__sflush_r+0xb4>
 8007d90:	4a28      	ldr	r2, [pc, #160]	; (8007e34 <__sflush_r+0x100>)
 8007d92:	410a      	asrs	r2, r1
 8007d94:	07d6      	lsls	r6, r2, #31
 8007d96:	d427      	bmi.n	8007de8 <__sflush_r+0xb4>
 8007d98:	2200      	movs	r2, #0
 8007d9a:	6062      	str	r2, [r4, #4]
 8007d9c:	6922      	ldr	r2, [r4, #16]
 8007d9e:	04d9      	lsls	r1, r3, #19
 8007da0:	6022      	str	r2, [r4, #0]
 8007da2:	d504      	bpl.n	8007dae <__sflush_r+0x7a>
 8007da4:	1c42      	adds	r2, r0, #1
 8007da6:	d101      	bne.n	8007dac <__sflush_r+0x78>
 8007da8:	682b      	ldr	r3, [r5, #0]
 8007daa:	b903      	cbnz	r3, 8007dae <__sflush_r+0x7a>
 8007dac:	6560      	str	r0, [r4, #84]	; 0x54
 8007dae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007db0:	602f      	str	r7, [r5, #0]
 8007db2:	2900      	cmp	r1, #0
 8007db4:	d0ca      	beq.n	8007d4c <__sflush_r+0x18>
 8007db6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dba:	4299      	cmp	r1, r3
 8007dbc:	d002      	beq.n	8007dc4 <__sflush_r+0x90>
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f7ff fbee 	bl	80075a0 <_free_r>
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	6360      	str	r0, [r4, #52]	; 0x34
 8007dc8:	e7c1      	b.n	8007d4e <__sflush_r+0x1a>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	4628      	mov	r0, r5
 8007dce:	47b0      	blx	r6
 8007dd0:	1c41      	adds	r1, r0, #1
 8007dd2:	d1c8      	bne.n	8007d66 <__sflush_r+0x32>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0c5      	beq.n	8007d66 <__sflush_r+0x32>
 8007dda:	2b1d      	cmp	r3, #29
 8007ddc:	d001      	beq.n	8007de2 <__sflush_r+0xae>
 8007dde:	2b16      	cmp	r3, #22
 8007de0:	d101      	bne.n	8007de6 <__sflush_r+0xb2>
 8007de2:	602f      	str	r7, [r5, #0]
 8007de4:	e7b2      	b.n	8007d4c <__sflush_r+0x18>
 8007de6:	89a3      	ldrh	r3, [r4, #12]
 8007de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	e7ae      	b.n	8007d4e <__sflush_r+0x1a>
 8007df0:	690f      	ldr	r7, [r1, #16]
 8007df2:	2f00      	cmp	r7, #0
 8007df4:	d0aa      	beq.n	8007d4c <__sflush_r+0x18>
 8007df6:	0793      	lsls	r3, r2, #30
 8007df8:	bf18      	it	ne
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	680e      	ldr	r6, [r1, #0]
 8007dfe:	bf08      	it	eq
 8007e00:	694b      	ldreq	r3, [r1, #20]
 8007e02:	1bf6      	subs	r6, r6, r7
 8007e04:	600f      	str	r7, [r1, #0]
 8007e06:	608b      	str	r3, [r1, #8]
 8007e08:	2e00      	cmp	r6, #0
 8007e0a:	dd9f      	ble.n	8007d4c <__sflush_r+0x18>
 8007e0c:	4633      	mov	r3, r6
 8007e0e:	463a      	mov	r2, r7
 8007e10:	4628      	mov	r0, r5
 8007e12:	6a21      	ldr	r1, [r4, #32]
 8007e14:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007e18:	47e0      	blx	ip
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	dc06      	bgt.n	8007e2c <__sflush_r+0xf8>
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e28:	81a3      	strh	r3, [r4, #12]
 8007e2a:	e790      	b.n	8007d4e <__sflush_r+0x1a>
 8007e2c:	4407      	add	r7, r0
 8007e2e:	1a36      	subs	r6, r6, r0
 8007e30:	e7ea      	b.n	8007e08 <__sflush_r+0xd4>
 8007e32:	bf00      	nop
 8007e34:	dfbffffe 	.word	0xdfbffffe

08007e38 <_fflush_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	690b      	ldr	r3, [r1, #16]
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	460c      	mov	r4, r1
 8007e40:	b913      	cbnz	r3, 8007e48 <_fflush_r+0x10>
 8007e42:	2500      	movs	r5, #0
 8007e44:	4628      	mov	r0, r5
 8007e46:	bd38      	pop	{r3, r4, r5, pc}
 8007e48:	b118      	cbz	r0, 8007e52 <_fflush_r+0x1a>
 8007e4a:	6a03      	ldr	r3, [r0, #32]
 8007e4c:	b90b      	cbnz	r3, 8007e52 <_fflush_r+0x1a>
 8007e4e:	f7ff f9a1 	bl	8007194 <__sinit>
 8007e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0f3      	beq.n	8007e42 <_fflush_r+0xa>
 8007e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e5c:	07d0      	lsls	r0, r2, #31
 8007e5e:	d404      	bmi.n	8007e6a <_fflush_r+0x32>
 8007e60:	0599      	lsls	r1, r3, #22
 8007e62:	d402      	bmi.n	8007e6a <_fflush_r+0x32>
 8007e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e66:	f7ff fb8a 	bl	800757e <__retarget_lock_acquire_recursive>
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	f7ff ff61 	bl	8007d34 <__sflush_r>
 8007e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e74:	4605      	mov	r5, r0
 8007e76:	07da      	lsls	r2, r3, #31
 8007e78:	d4e4      	bmi.n	8007e44 <_fflush_r+0xc>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	059b      	lsls	r3, r3, #22
 8007e7e:	d4e1      	bmi.n	8007e44 <_fflush_r+0xc>
 8007e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e82:	f7ff fb7d 	bl	8007580 <__retarget_lock_release_recursive>
 8007e86:	e7dd      	b.n	8007e44 <_fflush_r+0xc>

08007e88 <__swhatbuf_r>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e90:	4615      	mov	r5, r2
 8007e92:	2900      	cmp	r1, #0
 8007e94:	461e      	mov	r6, r3
 8007e96:	b096      	sub	sp, #88	; 0x58
 8007e98:	da0c      	bge.n	8007eb4 <__swhatbuf_r+0x2c>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ea2:	bf0c      	ite	eq
 8007ea4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007ea8:	2340      	movne	r3, #64	; 0x40
 8007eaa:	2000      	movs	r0, #0
 8007eac:	6031      	str	r1, [r6, #0]
 8007eae:	602b      	str	r3, [r5, #0]
 8007eb0:	b016      	add	sp, #88	; 0x58
 8007eb2:	bd70      	pop	{r4, r5, r6, pc}
 8007eb4:	466a      	mov	r2, sp
 8007eb6:	f000 f849 	bl	8007f4c <_fstat_r>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	dbed      	blt.n	8007e9a <__swhatbuf_r+0x12>
 8007ebe:	9901      	ldr	r1, [sp, #4]
 8007ec0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007ec4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007ec8:	4259      	negs	r1, r3
 8007eca:	4159      	adcs	r1, r3
 8007ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ed0:	e7eb      	b.n	8007eaa <__swhatbuf_r+0x22>

08007ed2 <__smakebuf_r>:
 8007ed2:	898b      	ldrh	r3, [r1, #12]
 8007ed4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ed6:	079d      	lsls	r5, r3, #30
 8007ed8:	4606      	mov	r6, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	d507      	bpl.n	8007eee <__smakebuf_r+0x1c>
 8007ede:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	6123      	str	r3, [r4, #16]
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	6163      	str	r3, [r4, #20]
 8007eea:	b002      	add	sp, #8
 8007eec:	bd70      	pop	{r4, r5, r6, pc}
 8007eee:	466a      	mov	r2, sp
 8007ef0:	ab01      	add	r3, sp, #4
 8007ef2:	f7ff ffc9 	bl	8007e88 <__swhatbuf_r>
 8007ef6:	9900      	ldr	r1, [sp, #0]
 8007ef8:	4605      	mov	r5, r0
 8007efa:	4630      	mov	r0, r6
 8007efc:	f7ff fbb8 	bl	8007670 <_malloc_r>
 8007f00:	b948      	cbnz	r0, 8007f16 <__smakebuf_r+0x44>
 8007f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f06:	059a      	lsls	r2, r3, #22
 8007f08:	d4ef      	bmi.n	8007eea <__smakebuf_r+0x18>
 8007f0a:	f023 0303 	bic.w	r3, r3, #3
 8007f0e:	f043 0302 	orr.w	r3, r3, #2
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	e7e3      	b.n	8007ede <__smakebuf_r+0xc>
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	6020      	str	r0, [r4, #0]
 8007f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	9b00      	ldr	r3, [sp, #0]
 8007f22:	6120      	str	r0, [r4, #16]
 8007f24:	6163      	str	r3, [r4, #20]
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	b15b      	cbz	r3, 8007f42 <__smakebuf_r+0x70>
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f30:	f000 f81e 	bl	8007f70 <_isatty_r>
 8007f34:	b128      	cbz	r0, 8007f42 <__smakebuf_r+0x70>
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	f023 0303 	bic.w	r3, r3, #3
 8007f3c:	f043 0301 	orr.w	r3, r3, #1
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	431d      	orrs	r5, r3
 8007f46:	81a5      	strh	r5, [r4, #12]
 8007f48:	e7cf      	b.n	8007eea <__smakebuf_r+0x18>
	...

08007f4c <_fstat_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	2300      	movs	r3, #0
 8007f50:	4d06      	ldr	r5, [pc, #24]	; (8007f6c <_fstat_r+0x20>)
 8007f52:	4604      	mov	r4, r0
 8007f54:	4608      	mov	r0, r1
 8007f56:	4611      	mov	r1, r2
 8007f58:	602b      	str	r3, [r5, #0]
 8007f5a:	f7f8 fb9d 	bl	8000698 <_fstat>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	d102      	bne.n	8007f68 <_fstat_r+0x1c>
 8007f62:	682b      	ldr	r3, [r5, #0]
 8007f64:	b103      	cbz	r3, 8007f68 <_fstat_r+0x1c>
 8007f66:	6023      	str	r3, [r4, #0]
 8007f68:	bd38      	pop	{r3, r4, r5, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000444 	.word	0x20000444

08007f70 <_isatty_r>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	2300      	movs	r3, #0
 8007f74:	4d05      	ldr	r5, [pc, #20]	; (8007f8c <_isatty_r+0x1c>)
 8007f76:	4604      	mov	r4, r0
 8007f78:	4608      	mov	r0, r1
 8007f7a:	602b      	str	r3, [r5, #0]
 8007f7c:	f7f8 fb9b 	bl	80006b6 <_isatty>
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	d102      	bne.n	8007f8a <_isatty_r+0x1a>
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	b103      	cbz	r3, 8007f8a <_isatty_r+0x1a>
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	20000444 	.word	0x20000444

08007f90 <_sbrk_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	2300      	movs	r3, #0
 8007f94:	4d05      	ldr	r5, [pc, #20]	; (8007fac <_sbrk_r+0x1c>)
 8007f96:	4604      	mov	r4, r0
 8007f98:	4608      	mov	r0, r1
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f7f8 fba2 	bl	80006e4 <_sbrk>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_sbrk_r+0x1a>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_sbrk_r+0x1a>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	20000444 	.word	0x20000444

08007fb0 <memchr>:
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	b510      	push	{r4, lr}
 8007fb4:	b2c9      	uxtb	r1, r1
 8007fb6:	4402      	add	r2, r0
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	d101      	bne.n	8007fc2 <memchr+0x12>
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	e003      	b.n	8007fca <memchr+0x1a>
 8007fc2:	7804      	ldrb	r4, [r0, #0]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	428c      	cmp	r4, r1
 8007fc8:	d1f6      	bne.n	8007fb8 <memchr+0x8>
 8007fca:	bd10      	pop	{r4, pc}

08007fcc <_init>:
 8007fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fce:	bf00      	nop
 8007fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd2:	bc08      	pop	{r3}
 8007fd4:	469e      	mov	lr, r3
 8007fd6:	4770      	bx	lr

08007fd8 <_fini>:
 8007fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fda:	bf00      	nop
 8007fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fde:	bc08      	pop	{r3}
 8007fe0:	469e      	mov	lr, r3
 8007fe2:	4770      	bx	lr
